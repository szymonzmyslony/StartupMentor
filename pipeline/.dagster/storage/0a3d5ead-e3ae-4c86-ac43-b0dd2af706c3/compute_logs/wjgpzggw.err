[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - 25604 - LOGS_CAPTURED - Started capturing logs in process (pid: 25604).
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - 25604 - docs_for_embeddings - STEP_START - Started execution of step "docs_for_embeddings".
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - docs_for_embeddings - Loading file from: /Users/szymonzmyslony/projects/master-pipeline/pipeline/.dagster/storage/combined_and_cleaned_docs using PickledObjectFilesystemIOManager...
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - 25604 - docs_for_embeddings - ASSET_OBSERVATION - DagsterEventType.ASSET_OBSERVATION for step docs_for_embeddings
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - 25604 - docs_for_embeddings - LOADED_INPUT - Loaded input "combined_and_cleaned_docs" using input manager "io_manager"
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - docs_for_embeddings - Loading file from: /Users/szymonzmyslony/projects/master-pipeline/pipeline/.dagster/storage/combined_and_cleaned_video_docs using PickledObjectFilesystemIOManager...
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - 25604 - docs_for_embeddings - ASSET_OBSERVATION - DagsterEventType.ASSET_OBSERVATION for step docs_for_embeddings
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - 25604 - docs_for_embeddings - LOADED_INPUT - Loaded input "combined_and_cleaned_video_docs" using input manager "io_manager"
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - 25604 - docs_for_embeddings - STEP_INPUT - Got input "combined_and_cleaned_docs" of type "Any". (Type check passed).
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - 25604 - docs_for_embeddings - STEP_INPUT - Got input "combined_and_cleaned_video_docs" of type "Any". (Type check passed).
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mINFO[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - docs_for_embeddings - Shortest Text Chunks: [(102, 'The original version of this essay is available at\nhttp://www.paulgraham.com/convince.html\nAugust 2013', 'https://www.ycombinator.com/library/98-how-to-convince-investors'), (105, 'A couple days ago I finally got being a good startup founder down to two words: relentlessly resourceful.', 'https://www.ycombinator.com/library/94-be-relentlessly-resourceful'), (121, 'Here are the results I got when I ran the numbers for myself and some of my fellow batchmmates: Oleg Rogynskyy, People.ai', 'https://www.ycombinator.com/library/4i-the-yc-effect')]
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mINFO[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - docs_for_embeddings - Longest Text Chunks: [(14243, "Behind the scenes preparation\nCompanies usually start planning a month in advance for the board meeting. In the case of Brex, the co-founders, CFO,\nand Chief of Staff align on the list of topics at least a month in advance and kick off a process to pull the materials\ntogether. The CFO leads the charge, working with executives across the company to align on inputs and topics for\ndiscussion. \nHeres an example of a prep email sent by the Brex CFO to the team 28 days in advance of the board meeting, because\nobviously they are working on other things as well so they need that much time to prepare materials in between. T-28 days:\n     Founders/Chief of Staff: Identify the two strategic topics for discussion with the board\n     Share with executive team to align on topics for discussion\nT-18 days\n     Founders/CFO/Finance team:Outline topics and write/collect content to be covered\n     Share draft deck with end of month close data with executive team\nT-11 days\n     Execs comment/edit and provide feedback to Finance Team\n     Finance Team finalizes the deck including formatting\n     Final review if deck and backup data sent to founders and CFO\nT-7 days\n     Review and final run of edits\n     Distribute deck to Board of Directors (BoD)\nT-4 days\n     BoD submits questions (particularly on KPIs)\nT-2 days\n     Brex consolidates and answers all questions from BoD\nT-0\n     Set expectations upfront (which sections you want to spend the most time and where do you need more feedback) Involving the executive team in board meetings\nPost-Series B, most companies will have an executive leadership team that helps the CEO scale and grow the company.\nNote, the general counsel and/or outside counsel can also be invited as part of this. It is important for at least one\nof the GC and/or outside counsel to attend all your board meetings to capture notes and discuss any sensitive issues\nthat require attorney-client privilege. \nSince the board is tasked with scaling and governance, it is important for execs to get to know the board (and vice\nversa). There are two approaches here: (1) Ask your leadership team to attend the entire board meeting; or (2) Ask only\nthose executives who have a section to present to the board join the meeting for a particular agenda item, for about 45\nminutes. \nThe problem with the first approach of inviting all executives to the meeting is the board meeting can turn into a\npresentation vs. a discussion. It also becomes challenging for the founders and the CEO to discuss sensitive matters\ndirectly. \nThats why I prefer the latter approach, where specific execs join just for that agenda item (usually about 45 minutes).\nThis approach achieves three things: a meatier discussion on the strategic issue at hand; the executives hear the\nboards feedback directly; and more time at the end of the meeting for the CEO and the board to discuss other\nsensitive matters on their own. \nRemember: The board meeting is not about selling to your board members. Of course, you want to show off great work and\ncelebrate milestones. But, your board is already bought in, and the highest leverage on their time - and yours! - is in\nhelping you get to the next milestone. \nMonthly updates\nIn addition to quarterly in-person board meetings, its a good practice to send a 2-page monthly update email (sample\nhere) to the board at the beginning of every month. The email\nusually includes a summary of last months performance; a hiring update; a section outlining burning issues; and a\nsection with specific asks for help. \nBrex always makes two specific asks in their monthly emails: potential introductions to business partners/customers, and\nhelp with key roles they are looking to fill. In their monthly investor update, GitLab will ask for introductions to\nspecific individuals at companies who can be potential customers -- they also applaud specific investors who have helped\nthem in the past, putting pressure on the entire board to do the same. \nGetting into a good rhythm of sending monthly updates accomplishes three things: (1) Board members will go above and\nbeyond to help you with your specific asks; (2) The board is better prepared for the in-person board meetings; and (3)\nIt is a great way for you as the CEO to take a step back and reflect on the most important elements of your business and\nobjectively measure how well you are doing as a company. Often writing vs. talking is more effective for showcasing your\nclarity of thought, and written narrative is more compelling in sharing ideas than bullet points and slides, as Jeff\nBezos has argued about\nmemos. \nBonus: Letter to the board\nIn fact, some CEOs may even use the board meeting as an opportunity to take a step back and write a letter to the board.\nFor example, Peter Reinhardt, CEO of Segment, writes a 3-5 page memo that focuses on highlights, lowlights, and areas\nwhere he would like to spend more time vs. where hes spending time today. He prefers the written format vs. slides in\nthe deck as it allows him to reflect on the quarter and articulate the company's future. More importantly, he focuses on\nhis own strengths and weaknesses and what he could be doing better as a CEO. \nFaire often uses the written memo format to discuss the strategic priorities during the board meeting. The memo sets the\ncontext for the discussion, articulates their decision framework, and explains why they are recommending a particular\napproach. They also write down all the uncertainties and blind spots they have when it comes to making that decision.\nNot only do these memos help the board prepare for the discussion, but they help the CEO create a record of the quality\nof their decision-making processes. \nLeveraging Your Board & Navigating Issues\nMost issues boil down to communication, which is why following the best practices outlined so far can help smooth the\nway. However, there are a lot of incremental opportunities CEOs may leave on the table when it comes to\nmanaging/leveraging their boards -- as well as obstacles that come up from frictions or specific issues. Ill share our\ncollective advice on navigating these below. \nMixed messages\nConflicting viewpoints are a good thing! The job of the board is to push you on your strategy and to ask questions that\nhelp you sharpen your thinking. As a CEO you should welcome conflicting opinions and should not feel pressure to get the\nboard to come to a consensus decision. \nHowever, if the conflict reaches a point where it is hard to move the conversation forward, offer to take the\nconversation offline and set up 1:1s or small group meetings to understand the conflicting views. After understanding\nconflicting viewpoints, use a decision-making framework (as an example see one below) to guide the discussion. \nA YC CEO recently shared how two board members had strong, directly conflicting opinions about the order in which they\nshould pursue new products. The CEO took the discussion offline and came up with a decision-making framework (e.g.\neconomic value, resources, cash needs, and competitive threat) to decide which path they were going to take. Coming up\nwith the framework also made it quite clear which path was the right one for the company, and why. Sometimes the answer\nis not very clear but a framework is helpful when you decide to go against the boards advice. Your board members will\nnever be as close to the business to make that decision. While board members provide important input all CEOs should\nseriously consider, the CEO has the authority to make the best decision on behalf of the company. As long as you have a\nclear decision-making framework, your board members will understand when you disagree. Also with time if you are more\nright than wrong about your decisions, the board will be willing to disagree and commit to the path forward. \nAsking board members for help\nAs you get a better sense of the areas where different board members can be most helpful - whether its helping recruit\nexecs, offering fundraising advice, or other areas - dont hesitate to follow up directly with them outside of board\nmeetings on those topics. \nMany CEOs seem to think its important to update every board member 1:1 on every topic. To which I say: NO! Not every\nboard member needs to be in the loop on every topic or issue; its an ineffective use of everyones time, including\nyours. I also think it is a poor use of time to update every board member 1:1 before every board meeting. Unless there\nare sensitive topics that need to be discussed before hand, dont waste time doing 1:1 calls with board members to get\neveryone on the same page. Allow your board members to challenge you and the team during the board meetings and\nencourage conflicting views to help flesh out your thinking. \nBalancing helpfulness vs control\nBe cautious of board members who are trying to make decisions for you. A board members job is to help you think through\nthe issues by offering tools or decision frameworksnot to give you all the answers on how to run your business. \nIn fact, great board members will often refrain from stating opinions; instead, they ask questions to help flesh out a\nCEOs thinking. My fellow board member at Brex, Micky Malka of Ribbit Capital, does this: Even if the CEO asks for his\nopinion on, say, What should our typical credit loss rate be?, Micky would respond with examples of 10 startups in\nRibbits portfolio and their trajectory along credit loss rates; share pros and cons of each approach; yet refrain from\ngiving one definitive answer. In doing so, he empowers the founders to make the decision. \nProblem (overbearing / unhelpful) board members\nAs mentioned earlier, backchannel checks are a great way to test for quality and helpfulness, so take the time to do\nthis. But, if you still end up getting stuck with an unhelpful board member, the best way to handle this is to first\nmeet 1:1 and share that feedback, constructively (not unlike running a feedback meeting with your peers or direct\nreports). \nBe sure to focus on the issue at hand - dont make it personal and/or scattered - and share specific examples from past\nboard meetings where their feedback was not helpful. If you have a good relationship with other members of the board,\nyou can also work with them to understand how to raise the issue with the unhelpful board member. \nIn some cases, board members may step in and give feedback to fellow board members. But be careful about a board member\nwho tries to work around the CEO. One YC company recently faced this - the board member started having direct meetings\nwith senior management without the CEOs knowledge and jumped to conclusions without full context. This put the CEO in a\nreally tough spot. The CEO used this as an opportunity to have 1:1 conversations with other board members, gather\nfeedback, and directly approach the board member who was being disruptive. It took about 6 months to get the situation\nresolved and trust was re-established. The CEO worked with the rest of the board to set up a decision framework on when\nand how the board can intervene. Use every challenging situation as an opportunity to improve your existing processes. \nRemoving board members\nThis one is really hard! The situation arises when a board member is destructive to the company - trying to meddle,\nmicromanage, act like an operator running the company - and sometimes even leaking information to the press. If you have\ntried everything (such as talking to the board member directly) and are convinced that your board member is destructive\nto the company, then you have a couple of options. I suggest the following, either (1) Approach someone senior at the\nfirm (where the board member works) and seek a replacement or (2) Add more board members (independent or via new\ninvestment rounds) who can be a sounding board and help address some of the issues. \nIf you pursue option (1), you will burn bridges with the board member and potentially the firm. If your company is not\nin good standing (i.e., metrics dont look good, and potential doesnt look great) then it will be hard to find a\nreplacement. You will likely be stuck with your current board member. However, if your company is doing well then you\nhave more negotiating leverage than you think. If your company is one of the best performing companies in the VCs\nportfolio, the firm will work hard to find you the board member that you want. \nIf you pursue option (2), you can leverage other board members to push back when the unhelpful board member is giving\nadvice that is not productive and could hurt the company. At the end of the day, you dont have to listen to the boards\nadvice if you are convinced that it does more harm than good. \nThat said, as a founder and CEO you should work to understand the gravity of the situation. Board members have the right\nintenttheir job and their incentives are aligned to set the company up for success. If all your board members are\nechoing the same feedback and you are not listening, then the problem is likely you. Some CEOs bring their executive\ncoach to one or two board meetings to get feedback on board dynamics. This may also help calibrate your perception of\nthe board members around the table. I have also seen a few CEOs seek bi-annual feedback from the entire board via the\nexecutive coach. \nFinal Thoughts\nMany CEOs get nervous at the idea of board meetings. But theyre a good thing. They remind you that you are not alone.\nYour board of directors - when composed and managed well - is dedicated to your companys success, which means they will\nchallenge you to make better decisions but are on your side as long as you are being ethical and doing the right thing\nfor the company. And of course, what is considered an effective board will evolve over time as the company matures. But,\nyou can be intentional in building the right team of advisors up front, using the best practices outlined above. If\nknowing is half the battle, why not enlist the best help you can get? \nSpecial thanks to Justin Kan, Sonal Chokshi, Ali Rowghani, Daniel Gackle, Adora Cheung, Craig Cannon, Gusto, Brex,\nConvoy and Faire founders for reading multiple drafts of this essay. Thank you to numerous YC founders for sharing their\nperspectives on this topic.", 'https://www.ycombinator.com/library/3w-how-to-create-and-manage-a-board'), (16316, 'All-Consuming\nThat brings us to our fourth counterintuitive point: startups are all-consuming. If you start a startup, it will take\nover your life to a degree you cannot imagine. And if your startup succeeds, it will take over your life for a long\ntime: for several years at the very least, maybe for a decade, maybe for the rest of your working life. So there is a\nreal opportunity cost here.   \nLarry Page may seem to have an enviable life, but there are aspects of it that are unenviable. Basically at 25 he\nstarted running as fast as he could and it must seem to him that he hasn\'t stopped to catch his breath since. Every day\nnew shit happens in the Google empire that only the CEO can deal with, and he, as CEO, has to deal with it. If he goes\non vacation for even a week, a whole week\'s backlog of shit accumulates. And he has to bear this uncomplainingly, partly\nbecause as the company\'s daddy he can never show fear or weakness, and partly because billionaires get less than zero\nsympathy if they talk about having difficult lives. Which has the strange side effect that the difficulty of being a\nsuccessful startup founder is concealed from almost everyone except those who\'ve done it.   \nY Combinator has now funded several companies that can be called big successes, and in every single case the founders\nsay the same thing. It never gets any easier. The nature of the problems change. You\'re worrying about construction\ndelays at your London office instead of the broken air conditioner in your studio apartment. But the total volume of\nworry never decreases; if anything it increases.   \nStarting a successful startup is similar to having kids in that it\'s like a button you push that changes your life\nirrevocably. And while it\'s truly wonderful having kids, there are a lot of things that are easier to do before you have\nthem than after. Many of which will make you a better parent when you do have kids. And since you can delay pushing the\nbutton for a while, most people in rich countries do.   \nYet when it comes to startups, a lot of people seem to think they\'re supposed to start them while they\'re still in\ncollege. Are you crazy? And what are the universities thinking? They go out of their way to ensure their students are\nwell supplied with contraceptives, and yet they\'re setting up entrepreneurship programs and startup incubators left and\nright.   \nTo be fair, the universities have their hand forced here. A lot of incoming students are interested in startups.\nUniversities are, at least de facto, expected to prepare them for their careers. So students who want to start startups\nhope universities can teach them about startups. And whether universities can do this or not, there\'s some pressure to\nclaim they can, lest they lose applicants to other universities that do.   \nCan universities teach students about startups? Yes and no. They can teach students about startups, but as I explained\nbefore, this is not what you need to know. What you need to learn about are the needs of your own users, and you can\'t\ndo that until you actually start the company. [5] So starting a startup is intrinsically something you can only really\nlearn by doing it. And it\'s impossible to do that in college, for the reason I just explained: startups take over your\nlife. You can\'t start a startup for real as a student, because if you start a startup for real you\'re not a student\nanymore. You may be nominally a student for a bit, but you won\'t even be that for long. [6]    \nGiven this dichotomy, which of the two paths should you take? Be a real student and not start a startup, or start a real\nstartup and not be a student? I can answer that one for you. Do not start a startup in college. How to start a startup\nis just a subset of a bigger problem you\'re trying to solve: how to have a good life. And though starting a startup can\nbe part of a good life for a lot of ambitious people, age 20 is not the optimal time to do it. Starting a startup is\nlike a brutally fast depth-first search. Most people should still be searching breadth-first at 20.   \nYou can do things in your early 20s that you can\'t do as well before or after, like plunge deeply into projects on a\nwhim and travel super cheaply with no sense of a deadline. For unambitious people, this sort of thing is the dreaded\n"failure to launch," but for the ambitious ones it can be an incomparably valuable sort of exploration. If you start a\nstartup at 20 and you\'re sufficiently successful, you\'ll never get to do it. [7]    \nMark Zuckerberg will never get to bum around a foreign country. He can do other things most people can\'t, like charter\njets to fly him to foreign countries. But success has taken a lot of the serendipity out of his life. Facebook is\nrunning him as much as he\'s running Facebook. And while it can be very cool to be in the grip of a project you consider\nyour life\'s work, there are advantages to serendipity too, especially early in life. Among other things it gives you\nmore options to choose your life\'s work from.   \nThere\'s not even a tradeoff here. You\'re not sacrificing anything if you forgo starting a startup at 20, because you\'re\nmore likely to succeed if you wait. In the unlikely case that you\'re 20 and one of your side projects takes off like\nFacebook did, you\'ll face a choice of running with it or not, and it may be reasonable to run with it. But the usual way\nstartups take off is for the founders to make them take off, and it\'s gratuitously\nstupid to do that at 20. \nTry\nShould you do it at any age? I realize I\'ve made startups sound pretty hard. If I haven\'t, let me try again: starting a\nstartup is really hard. What if it\'s too hard? How can you tell if you\'re up to this challenge?   \nThe answer is the fifth counterintuitive point: you can\'t tell. Your life so far may have given you some idea what your\nprospects might be if you tried to become a mathematician, or a professional football player. But unless you\'ve had a\nvery strange life you haven\'t done much that was like being a startup founder.\nStarting a startup will change you a lot. So what you\'re trying to estimate is not just what you are, but what you could\ngrow into, and who can do that?   \nFor the past 9 years it was my job to predict whether people would have what it took to start successful startups. It\nwas easy to tell how smart they were, and most people reading this will be over that threshold. The hard part was\npredicting how tough and ambitious they would become. There may be no one who has more experience at trying to predict\nthat, so I can tell you how much an expert can know about it, and the answer is: not much. I learned to keep a\ncompletely open mind about which of the startups in each batch would turn out to be the stars.   \nThe founders sometimes think they know. Some arrive feeling sure they will ace Y Combinator just as they\'ve aced every\none of the (few, artificial, easy) tests they\'ve faced in life so far. Others arrive wondering how they got in, and\nhoping YC doesn\'t discover whatever mistake caused it to accept them. But there is little correlation between founders\'\ninitial attitudes and how well their companies do.   \nI\'ve read that the same is true in the military  that the swaggering recruits are no more likely to turn out to be\nreally tough than the quiet ones. And probably for the same reason: that the tests involved are so different from the\nones in their previous lives.   \nIf you\'re absolutely terrified of starting a startup, you probably shouldn\'t do it. But if you\'re merely unsure whether\nyou\'re up to it, the only way to find out is to try. Just not now. \nIdeas\nSo if you want to start a startup one day, what should you do in college? There are only two things you need initially:\nan idea and cofounders. And the m.o. for getting both is the same. Which leads to our sixth and last counterintuitive\npoint: that the way to get startup ideas is not to try to think of startup ideas.   \nI\'ve written a whole essay on this, so I won\'t repeat it all here. But\nthe short version is that if you make a conscious effort to think of startup ideas, the ideas you come up with will not\nmerely be bad, but bad and plausible-sounding, meaning you\'ll waste a lot of time on them before realizing they\'re\nbad.   \nThe way to come up with good startup ideas is to take a step back. Instead of making a conscious effort to think of\nstartup ideas, turn your mind into the type that startup ideas form in without any conscious effort. In fact, so\nunconsciously that you don\'t even realize at first that they\'re startup ideas.   \nThis is not only possible, it\'s how Apple, Yahoo, Google, and Facebook all got started. None of these companies were\neven meant to be companies at first. They were all just side projects. The best startups almost have to start as side\nprojects, because great ideas tend to be such outliers that your conscious mind would reject them as ideas for\ncompanies.   \nOk, so how do you turn your mind into the type that startup ideas form in unconsciously? (1) Learn a lot about things\nthat matter, then (2) work on problems that interest you (3) with people you like and respect. The third part,\nincidentally, is how you get cofounders at the same time as the idea.   \nThe first time I wrote that paragraph, instead of "learn a lot about things that matter," I wrote "become good at some\ntechnology." But that prescription, though sufficient, is too narrow. What was special about Brian Chesky and Joe Gebbia\nwas not that they were experts in technology. They were good at design, and perhaps even more importantly, they were\ngood at organizing groups and making projects happen. So you don\'t have to work on technology per se, so long as you\nwork on problems demanding enough to stretch you.   \nWhat kind of problems are those? That is very hard to answer in the general case. History is full of examples of young\npeople who were working on important problems that no one else at the time\nthought were important, and in particular that their parents didn\'t think were important. On the other hand, history is\neven fuller of examples of parents who thought their kids were wasting their time and who were right. So how do you know\nwhen you\'re working on real stuff? [8]   \nI know how I know. Real problems are interesting, and I am self-indulgent in the sense that I always want to work on\ninteresting things, even if no one else cares about them (in fact, especially if no one else cares about them), and find\nit very hard to make myself work on boring things, even if they\'re supposed to be important.   \nMy life is full of case after case where I worked on something just because it seemed interesting, and it turned out\nlater to be useful in some worldly way. Y Combinator itself was something I only\ndid because it seemed interesting. So I seem to have some sort of internal compass that helps me out. But I don\'t know\nwhat other people have in their heads. Maybe if I think more about this I can come up with heuristics for recognizing\ngenuinely interesting problems, but for the moment the best I can offer is the hopelessly question-begging advice that\nif you have a taste for genuinely interesting problems, indulging it energetically is the best way to prepare yourself\nfor a startup. And indeed, probably also the best way to live. [9]   \nBut although I can\'t explain in the general case what counts as an interesting problem, I can tell you about a large\nsubset of them. If you think of technology as something that\'s spreading like a sort of fractal stain, every moving\npoint on the edge represents an interesting problem. So one guaranteed way to turn your mind into the type that has good\nstartup ideas is to get yourself to the leading edge of some technology  to cause yourself, as Paul Buchheit put it, to\n"live in the future." When you reach that point, ideas that will seem to other people uncannily prescient will seem\nobvious to you. You may not realize they\'re startup ideas, but you\'ll know they\'re something that ought to exist.   \nFor example, back at Harvard in the mid 90s a fellow grad student of my friends Robert and Trevor wrote his own voice\nover IP software. He didn\'t mean it to be a startup, and he never tried to turn it into one. He just wanted to talk to\nhis girlfriend in Taiwan without paying for long distance calls, and since he was an expert on networks it seemed\nobvious to him that the way to do it was turn the sound into packets and ship it over the Internet. He never did any\nmore with his software than talk to his girlfriend, but this is exactly the way the best startups get started.   \nSo strangely enough the optimal thing to do in college if you want to be a successful startup founder is not some sort\nof new, vocational version of college focused on "entrepreneurship." It\'s the classic version of college as education\nfor its own sake. If you want to start a startup after college, what you should do in college is learn powerful things.\nAnd if you have genuine intellectual curiosity, that\'s what you\'ll naturally tend to do if you just follow your own\ninclinations. [10]   \nThe component of entrepreneurship that really matters is domain expertise. The way to become Larry Page was to become an\nexpert on search. And the way to become an expert on search was to be driven by genuine curiosity, not some ulterior\nmotive.   \nAt its best, starting a startup is merely an ulterior motive for curiosity. And you\'ll do it best if you introduce the\nulterior motive toward the end of the process.   \nSo here is the ultimate advice for young would-be startup founders, boiled down to two words: just learn. \nNotes\n[1] Some founders listen more than others, and this tends to be a predictor of\nsuccess. One of the things I remember about the Airbnbs during YC is how intently\nthey listened.   \n[2] In fact, this is one of the reasons startups are possible. If big companies weren\'t plagued by internal\ninefficiencies, they\'d be proportionately more effective, leaving less room for startups.   \n[3] In a startup you have to spend a lot of time on schleps, but this sort of\nwork is merely unglamorous, not bogus.   \n[4] What should you do if your true calling is gaming the system? Management consulting.   \n[5] The company may not be incorporated, but if you start to get significant numbers of users, you\'ve started it,\nwhether you realize it yet or not.   \n[6] It shouldn\'t be that surprising that colleges can\'t teach students how to be good startup founders, because they\ncan\'t teach them how to be good employees either.   \nThe way universities "teach" students how to be employees is to hand off the task to companies via internship programs.\nBut you couldn\'t do the equivalent thing for startups, because by definition if the students did well they would never\ncome back.   \n[7] Charles Darwin was 22 when he received an invitation to travel aboard the HMS Beagle as a naturalist. It was only\nbecause he was otherwise unoccupied, to a degree that alarmed his family, that he could accept it. And yet if he hadn\'t\nwe probably would not know his name.   \n[8] Parents can sometimes be especially conservative in this department. There are some whose definition of important\nproblems includes only those on the critical path to med school.   \n[9] I did manage to think of a heuristic for detecting whether you have a taste for interesting ideas: whether you\nfind known boring ideas intolerable. Could you endure studying literary theory, or working in middle management at a\nlarge company?   \n[10] In fact, if your goal is to start a startup, you can stick even more closely to the ideal of a liberal education\nthan past generations have. Back when students focused mainly on getting a job after college, they thought at least a\nlittle about how the courses they took might look to an employer. And perhaps even worse, they might shy away from\ntaking a difficult class lest they get a low grade, which would harm their all-important GPA. Good news: users don\'t\ncare what your GPA was. And I\'ve never heard of investors caring either. Y\nCombinator certainly never asks what classes you took in college or what grades you got in them.   \nThanks to Sam Altman, Paul Buchheit, John Collison, Patrick Collison, Jessica Livingston, Robert Morris, Geoff\nRalston, and Fred Wilson for reading drafts of this.', 'https://www.ycombinator.com/library/8y-before-the-startup'), (34646, 'Similarly for Microsoft: Basic for the Altair; Basic for other machines; other languages besides Basic; operating\nsystems; applications; IPO. \nSelf\nHow do you tell whether there\'s a path out of an idea? How do you tell whether something is the germ of a giant company,\nor just a niche product? Often you can\'t. The founders of Airbnb didn\'t realize at first how big a market they were\ntapping. Initially they had a much narrower idea. They were going to let hosts rent out space on their floors during\nconventions. They didn\'t foresee the expansion of this idea; it forced itself upon them gradually. All they knew at\nfirst is that they were onto something. That\'s probably as much as Bill Gates or Mark Zuckerberg knew at first.   \nOccasionally it\'s obvious from the beginning when there\'s a path out of the initial niche. And sometimes I can see a\npath that\'s not immediately obvious; that\'s one of our specialties at YC. But there are limits to how well this can be\ndone, no matter how much experience you have. The most important thing to understand about paths out of the initial idea\nis the meta-fact that these are hard to see.   \nSo if you can\'t predict whether there\'s a path out of an idea, how do you choose between ideas? The truth is\ndisappointing but interesting: if you\'re the right sort of person, you have the right sort of hunches. If you\'re at the\nleading edge of a field that\'s changing fast, when you have a hunch that something is worth doing, you\'re more likely to\nbe right.   \nIn Zen and the Art of Motorcycle Maintenance, Robert Pirsig says: You want to know how to paint a perfect painting? It\'s easy. Make yourself perfect and then just paint naturally. I\'ve wondered about that passage since I read it in high school. I\'m not sure how useful his advice is for painting\nspecifically, but it fits this situation well. Empirically, the way to have good startup ideas is to become the sort of\nperson who has them.   \nBeing at the leading edge of a field doesn\'t mean you have to be one of the people pushing it forward. You can also be\nat the leading edge as a user. It was not so much because he was a programmer that Facebook seemed a good idea to Mark\nZuckerberg as because he used computers so much. If you\'d asked most 40 year olds in 2004 whether they\'d like to publish\ntheir lives semi-publicly on the Internet, they\'d have been horrified at the idea. But Mark already lived online; to him\nit seemed natural.   \nPaul Buchheit says that people at the leading edge of a rapidly changing field "live in the future." Combine that with\nPirsig and you get: Live in the future, then build what\'s missing. That describes the way many if not most of the biggest startups got started. Neither Apple nor Yahoo nor Google nor\nFacebook were even supposed to be companies at first. They grew out of things their founders built because there seemed\na gap in the world.   \nIf you look at the way successful founders have had their ideas, it\'s generally the result of some external stimulus\nhitting a prepared mind. Bill Gates and Paul Allen hear about the Altair and think "I bet we could write a Basic\ninterpreter for it." Drew Houston realizes he\'s forgotten his USB stick and thinks "I really need to make my files live\nonline." Lots of people heard about the Altair. Lots forgot USB sticks. The reason those stimuli caused those founders\nto start companies was that their experiences had prepared them to notice the opportunities they represented.   \nThe verb you want to be using with respect to startup ideas is not "think up" but "notice." At YC we call ideas that\ngrow naturally out of the founders\' own experiences "organic" startup ideas. The most successful startups almost all\nbegin this way.   \nThat may not have been what you wanted to hear. You may have expected recipes for coming up with startup ideas, and\ninstead I\'m telling you that the key is to have a mind that\'s prepared in the right way. But disappointing though it may\nbe, this is the truth. And it is a recipe of a sort, just one that in the worst case takes a year rather than a\nweekend.   \nIf you\'re not at the leading edge of some rapidly changing field, you can get to one. For example, anyone reasonably\nsmart can probably get to an edge of programming (e.g. building mobile apps) in a year. Since a successful startup will\nconsume at least 3-5 years of your life, a year\'s preparation would be a reasonable investment. Especially if you\'re\nalso looking for a cofounder. [4]   \nYou don\'t have to learn programming to be at the leading edge of a domain that\'s changing fast. Other domains change\nfast. But while learning to hack is not necessary, it is for the forseeable future sufficient. As Marc Andreessen put\nit, software is eating the world, and this trend has decades left to run.   \nKnowing how to hack also means that when you have ideas, you\'ll be able to implement them. That\'s not absolutely\nnecessary (Jeff Bezos couldn\'t) but it\'s an advantage. It\'s a big advantage, when you\'re considering an idea like\nputting a college facebook online, if instead of merely thinking "That\'s an interesting idea," you can think instead\n"That\'s an interesting idea. I\'ll try building an initial version tonight." It\'s even better when you\'re both a\nprogrammer and the target user, because then the cycle of generating new versions and testing them on users can happen\ninside one head. \nNoticing\nOnce you\'re living in the future in some respect, the way to notice startup ideas is to look for things that seem to be\nmissing. If you\'re really at the leading edge of a rapidly changing field, there will be things that are obviously\nmissing. What won\'t be obvious is that they\'re startup ideas. So if you want to find startup ideas, don\'t merely turn on\nthe filter "What\'s missing?" Also turn off every other filter, particularly "Could this be a big company?" There\'s\nplenty of time to apply that test later. But if you\'re thinking about that initially, it may not only filter out lots of\ngood ideas, but also cause you to focus on bad ones.   \nMost things that are missing will take some time to see. You almost have to trick yourself into seeing the ideas around\nyou.   \nBut you know the ideas are out there. This is not one of those problems where there might not be an answer. It\'s\nimpossibly unlikely that this is the exact moment when technological progress stops. You can be sure people are going to\nbuild things in the next few years that will make you think "What did I do before x?"   \nAnd when these problems get solved, they will probably seem flamingly obvious in retrospect. What you need to do is turn\noff the filters that usually prevent you from seeing them. The most powerful is simply taking the current state of the\nworld for granted. Even the most radically open-minded of us mostly do that. You couldn\'t get from your bed to the front\ndoor if you stopped to question everything.   \nBut if you\'re looking for startup ideas you can sacrifice some of the efficiency of taking the status quo for granted\nand start to question things. Why is your inbox overflowing? Because you get a lot of email, or because it\'s hard to get\nemail out of your inbox? Why do you get so much email? What problems are people trying to solve by sending you email?\nAre there better ways to solve them? And why is it hard to get emails out of your inbox? Why do you keep emails around\nafter you\'ve read them? Is an inbox the optimal tool for that?   \nPay particular attention to things that chafe you. The advantage of taking the status quo for granted is not just that\nit makes life (locally) more efficient, but also that it makes life more tolerable. If you knew about all the things\nwe\'ll get in the next 50 years but don\'t have yet, you\'d find present day life pretty constraining, just as someone from\nthe present would if they were sent back 50 years in a time machine. When something annoys you, it could be because\nyou\'re living in the future.   \nWhen you find the right sort of problem, you should probably be able to describe it as obvious, at least to you. When\nwe started Viaweb, all the online stores were built by hand, by web designers making individual HTML pages. It was\nobvious to us as programmers that these sites would have to be generated by software. [5]   \nWhich means, strangely enough, that coming up with startup ideas is a question of seeing the obvious. That suggests how\nweird this process is: you\'re trying to see things that are obvious, and yet that you hadn\'t seen.   \nSince what you need to do here is loosen up your own mind, it may be best not to make too much of a direct frontal\nattack on the problem  i.e. to sit down and try to think of ideas. The best plan may be just to keep a background\nprocess running, looking for things that seem to be missing. Work on hard problems, driven mainly by curiosity, but have\na second self watching over your shoulder, taking note of gaps and anomalies. [6]   \nGive yourself some time. You have a lot of control over the rate at which you turn yours into a prepared mind, but you\nhave less control over the stimuli that spark ideas when they hit it. If Bill Gates and Paul Allen had constrained\nthemselves to come up with a startup idea in one month, what if they\'d chosen a month before the Altair appeared? They\nprobably would have worked on a less promising idea. Drew Houston did work on a less promising idea before Dropbox: an\nSAT prep startup. But Dropbox was a much better idea, both in the absolute sense and also as a match for his skills.\n[7]   \nA good way to trick yourself into noticing ideas is to work on projects that seem like they\'d be cool. If you do that,\nyou\'ll naturally tend to build things that are missing. It wouldn\'t seem as interesting to build something that already\nexisted.   \nJust as trying to think up startup ideas tends to produce bad ones, working on things that could be dismissed as "toys"\noften produces good ones. When something is described as a toy, that means it has everything an idea needs except being\nimportant. It\'s cool; users love it; it just doesn\'t matter. But if you\'re living in the future and you build something\ncool that users love, it may matter more than outsiders think. Microcomputers seemed like toys when Apple and Microsoft\nstarted working on them. I\'m old enough to remember that era; the usual term for people with their own microcomputers\nwas "hobbyists." BackRub seemed like an inconsequential science project. The Facebook was just a way for undergrads to\nstalk one another.   \nAt YC we\'re excited when we meet startups working on things that we could imagine know-it-alls on forums dismissing as\ntoys. To us that\'s positive evidence an idea is good.   \nIf you can afford to take a long view (and arguably you can\'t afford not to), you can turn "Live in the future and build\nwhat\'s missing" into something even better: Live in the future and build what seems interesting. School\nThat\'s what I\'d advise college students to do, rather than trying to learn about "entrepreneurship." "Entrepreneurship"\nis something you learn best by doing it. The examples of the most successful founders make that clear. What you should\nbe spending your time on in college is ratcheting yourself into the future. College is an incomparable opportunity to do\nthat. What a waste to sacrifice an opportunity to solve the hard part of starting a startup  becoming the sort of\nperson who can have organic startup ideas  by spending time learning about the easy part. Especially since you won\'t\neven really learn about it, any more than you\'d learn about sex in a class. All you\'ll learn is the words for things.   \nThe clash of domains is a particularly fruitful source of ideas. If you know a lot about programming and you start\nlearning about some other field, you\'ll probably see problems that software could solve. In fact, you\'re doubly likely\nto find good problems in another domain: (a) the inhabitants of that domain are not as likely as software people to have\nalready solved their problems with software, and (b) since you come into the new domain totally ignorant, you don\'t even\nknow what the status quo is to take it for granted.   \nSo if you\'re a CS major and you want to start a startup, instead of taking a class on entrepreneurship you\'re better off\ntaking a class on, say, genetics. Or better still, go work for a biotech company. CS majors normally get summer jobs at\ncomputer hardware or software companies. But if you want to find startup ideas, you might do better to get a summer job\nin some unrelated field. [8]   \nOr don\'t take any extra classes, and just build things. It\'s no coincidence that Microsoft and Facebook both got started\nin January. At Harvard that is (or was) Reading Period, when students have no classes to attend because they\'re supposed\nto be studying for finals. [9]   \nBut don\'t feel like you have to build things that will become startups. That\'s premature optimization. Just build\nthings. Preferably with other students. It\'s not just the classes that make a university such a good place to crank\noneself into the future. You\'re also surrounded by other people trying to do the same thing. If you work together with\nthem on projects, you\'ll end up producing not just organic ideas, but organic ideas with organic founding teams  and\nthat, empirically, is the best combination.   \nBeware of research. If an undergrad writes something all his friends start using, it\'s quite likely to represent a good\nstartup idea. Whereas a PhD dissertation is extremely unlikely to. For some reason, the more a project has to count as\nresearch, the less likely it is to be something that could be turned into a startup. [10] I think the reason is that\nthe subset of ideas that count as research is so narrow that it\'s unlikely that a project that satisfied that constraint\nwould also satisfy the orthogonal constraint of solving users\' problems. Whereas when students (or professors) build\nsomething as a side-project, they automatically gravitate toward solving users\' problems  perhaps even with an\nadditional energy that comes from being freed from the constraints of research. \nCompetition\nBecause a good idea should seem obvious, when you have one you\'ll tend to feel that you\'re late. Don\'t let that deter\nyou. Worrying that you\'re late is one of the signs of a good idea. Ten minutes of searching the web will usually settle\nthe question. Even if you find someone else working on the same thing, you\'re probably not too late. It\'s exceptionally\nrare for startups to be killed by competitors  so rare that you can almost discount the possibility. So unless you\ndiscover a competitor with the sort of lock-in that would prevent users from choosing you, don\'t discard the idea.   \nIf you\'re uncertain, ask users. The question of whether you\'re too late is subsumed by the question of whether anyone\nurgently needs what you plan to make. If you have something that no competitor does and that some subset of users\nurgently need, you have a beachhead. [11]   \nThe question then is whether that beachhead is big enough. Or more importantly, who\'s in it: if the beachhead consists\nof people doing something lots more people will be doing in the future, then it\'s probably big enough no matter how\nsmall it is. For example, if you\'re building something differentiated from competitors by the fact that it works on\nphones, but it only works on the newest phones, that\'s probably a big enough beachhead.   \nErr on the side of doing things where you\'ll face competitors. Inexperienced founders usually give competitors more\ncredit than they deserve. Whether you succeed depends far more on you than on your competitors. So better a good idea\nwith competitors than a bad one without.   \nYou don\'t need to worry about entering a "crowded market" so long as you have a thesis about what everyone else in it is\noverlooking. In fact that\'s a very promising starting point. Google was that type of idea. Your thesis has to be more\nprecise than "we\'re going to make an x that doesn\'t suck" though. You have to be able to phrase it in terms of something\nthe incumbents are overlooking. Best of all is when you can say that they didn\'t have the courage of their convictions,\nand that your plan is what they\'d have done if they\'d followed through on their own insights. Google was that type of\nidea too. The search engines that preceded them shied away from the most radical implications of what they were doing \nparticularly that the better a job they did, the faster users would leave.   \nA crowded market is actually a good sign, because it means both that there\'s demand and that none of the existing\nsolutions are good enough. A startup can\'t hope to enter a market that\'s obviously big and yet in which they have no\ncompetitors. So any startup that succeeds is either going to be entering a market with existing competitors, but armed\nwith some secret weapon that will get them all the users (like Google), or entering a market that looks small but which\nwill turn out to be big (like Microsoft). [12] \nFilters\nThere are two more filters you\'ll need to turn off if you want to notice startup ideas: the unsexy filter and the schlep\nfilter.   \nMost programmers wish they could start a startup by just writing some brilliant code, pushing it to a server, and having\nusers pay them lots of money. They\'d prefer not to deal with tedious problems or get involved in messy ways with the\nreal world. Which is a reasonable preference, because such things slow you down. But this preference is so widespread\nthat the space of convenient startup ideas has been stripped pretty clean. If you let your mind wander a few blocks down\nthe street to the messy, tedious ideas, you\'ll find valuable ones just sitting there waiting to be implemented.   \nThe schlep filter is so dangerous that I wrote a separate essay about the condition it induces, which I called schlep\nblindness. I gave Stripe as an example of a startup that benefited from turning\noff this filter, and a pretty striking example it is. Thousands of programmers were in a position to see this idea;\nthousands of programmers knew how painful it was to process payments before Stripe. But when they looked for startup\nideas they didn\'t see this one, because unconsciously they shrank from having to deal with payments. And dealing with\npayments is a schlep for Stripe, but not an intolerable one. In fact they might have had net less pain; because the fear\nof dealing with payments kept most people away from this idea, Stripe has had comparatively smooth sailing in other\nareas that are sometimes painful, like user acquisition. They didn\'t have to try very hard to make themselves heard by\nusers, because users were desperately waiting for what they were building.   \nThe unsexy filter is similar to the schlep filter, except it keeps you from working on problems you despise rather than\nones you fear. We overcame this one to work on Viaweb. There were interesting things about the architecture of our\nsoftware, but we weren\'t interested in ecommerce per se. We could see the problem was one that needed to be solved\nthough.   \nTurning off the schlep filter is more important than turning off the unsexy filter, because the schlep filter is more\nlikely to be an illusion. And even to the degree it isn\'t, it\'s a worse form of self-indulgence. Starting a successful\nstartup is going to be fairly laborious no matter what. Even if the product doesn\'t entail a lot of schleps, you\'ll\nstill have plenty dealing with investors, hiring and firing people, and so on. So if there\'s some idea you think would\nbe cool but you\'re kept away from by fear of the schleps involved, don\'t worry: any sufficiently good idea will have as\nmany.   \nThe unsexy filter, while still a source of error, is not as entirely useless as the schlep filter. If you\'re at the\nleading edge of a field that\'s changing rapidly, your ideas about what\'s sexy will be somewhat correlated with what\'s\nvaluable in practice. Particularly as you get older and more experienced. Plus if you find an idea sexy, you\'ll work on\nit more enthusiastically. [13] \nRecipes\nWhile the best way to discover startup ideas is to become the sort of person who has them and then build whatever\ninterests you, sometimes you don\'t have that luxury. Sometimes you need an idea now. For example, if you\'re working on a\nstartup and your initial idea turns out to be bad.   \nFor the rest of this essay I\'ll talk about tricks for coming up with startup ideas on demand. Although empirically\nyou\'re better off using the organic strategy, you could succeed this way. You just have to be more disciplined. When you\nuse the organic method, you don\'t even notice an idea unless it\'s evidence that something is truly missing. But when you\nmake a conscious effort to think of startup ideas, you have to replace this natural constraint with self-discipline.\nYou\'ll see a lot more ideas, most of them bad, so you need to be able to filter them.   \nOne of the biggest dangers of not using the organic method is the example of the organic method. Organic ideas feel like\ninspirations. There are a lot of stories about successful startups that began when the founders had what seemed a crazy\nidea but "just knew" it was promising. When you feel that about an idea you\'ve had while trying to come up with startup\nideas, you\'re probably mistaken.   \nWhen searching for ideas, look in areas where you have some expertise. If you\'re a database expert, don\'t build a chat\napp for teenagers (unless you\'re also a teenager). Maybe it\'s a good idea, but you can\'t trust your judgment about that,\nso ignore it. There have to be other ideas that involve databases, and whose quality you can judge. Do you find it hard\nto come up with good ideas involving databases? That\'s because your expertise raises your standards. Your ideas about\nchat apps are just as bad, but you\'re giving yourself a Dunning-Kruger pass in that domain.   \nThe place to start looking for ideas is things you need. There must be things you need. [14]   \nOne good trick is to ask yourself whether in your previous job you ever found yourself saying "Why doesn\'t someone make\nx? If someone made x we\'d buy it in a second." If you can think of any x people said that about, you probably have an\nidea. You know there\'s demand, and people don\'t say that about things that are impossible to build.   \nMore generally, try asking yourself whether there\'s something unusual about you that makes your needs different from\nmost other people\'s. You\'re probably not the only one. It\'s especially good if you\'re different in a way people will\nincreasingly be.   \nIf you\'re changing ideas, one unusual thing about you is the idea you\'d previously been working on. Did you discover any\nneeds while working on it? Several well-known startups began this way. Hotmail began as something its founders wrote to\ntalk about their previous startup idea while they were working at their day jobs. [15]   \nA particularly promising way to be unusual is to be young. Some of the most valuable new ideas take root first among\npeople in their teens and early twenties. And while young founders are at a disadvantage in some respects, they\'re the\nonly ones who really understand their peers. It would have been very hard for someone who wasn\'t a college student to\nstart Facebook. So if you\'re a young founder (under 23 say), are there things you and your friends would like to do that\ncurrent technology won\'t let you?   \nThe next best thing to an unmet need of your own is an unmet need of someone else. Try talking to everyone you can about\nthe gaps they find in the world. What\'s missing? What would they like to do that they can\'t? What\'s tedious or annoying,\nparticularly in their work? Let the conversation get general; don\'t be trying too hard to find startup ideas. You\'re\njust looking for something to spark a thought. Maybe you\'ll notice a problem they didn\'t consciously realize they had,\nbecause you know how to solve it.   \nWhen you find an unmet need that isn\'t your own, it may be somewhat blurry at first. The person who needs something may\nnot know exactly what they need. In that case I often recommend that founders act like consultants  that they do what\nthey\'d do if they\'d been retained to solve the problems of this one user. People\'s problems are similar enough that\nnearly all the code you write this way will be reusable, and whatever isn\'t will be a small price to start out certain\nthat you\'ve reached the bottom of the well. [16]   \nOne way to ensure you do a good job solving other people\'s problems is to make them your own. When Rajat Suri of E la\nCarte decided to write software for restaurants, he got a job as a waiter to learn how restaurants worked. That may seem\nlike taking things to extremes, but startups are extreme. We love it when founders do such things.   \nIn fact, one strategy I recommend to people who need a new idea is not merely to turn off their schlep and unsexy\nfilters, but to seek out ideas that are unsexy or involve schleps. Don\'t try to start Twitter. Those ideas are so rare\nthat you can\'t find them by looking for them. Make something unsexy that people will pay you for.   \nA good trick for bypassing the schlep and to some extent the unsexy filter is to ask what you wish someone else would\nbuild, so that you could use it. What would you pay for right now?   \nSince startups often garbage-collect broken companies and industries, it can be a good trick to look for those that are\ndying, or deserve to, and try to imagine what kind of company would profit from their demise. For example, journalism is\nin free fall at the moment. But there may still be money to be made from something like journalism. What sort of company\nmight cause people in the future to say "this replaced journalism" on some axis?   \nBut imagine asking that in the future, not now. When one company or industry replaces another, it usually comes in from\nthe side. So don\'t look for a replacement for x; look for something that people will later say turned out to be a\nreplacement for x. And be imaginative about the axis along which the replacement occurs. Traditional journalism, for\nexample, is a way for readers to get information and to kill time, a way for writers to make money and to get attention,\nand a vehicle for several different types of advertising. It could be replaced on any of these axes (it has already\nstarted to be on most).   \nWhen startups consume incumbents, they usually start by serving some small but important market that the big players\nignore. It\'s particularly good if there\'s an admixture of disdain in the big players\' attitude, because that often\nmisleads them. For example, after Steve Wozniak built the computer that became the Apple I, he felt obliged to give his\nthen-employer Hewlett-Packard the option to produce it. Fortunately for him, they turned it down, and one of the reasons\nthey did was that it used a TV for a monitor, which seemed intolerably dclass to a high-end hardware company like HP\nwas at the time. [17]   \nAre there groups of scruffy but sophisticated users like the early\nmicrocomputer "hobbyists" that are currently being ignored by the big players? A startup with its sights set on bigger\nthings can often capture a small market easily by expending an effort that wouldn\'t be justified by that market alone.   \nSimilarly, since the most successful startups generally ride some wave bigger than themselves, it could be a good trick\nto look for waves and ask how one could benefit from them. The prices of gene sequencing and 3D printing are both\nexperiencing Moore\'s Law-like declines. What new things will we be able to do in the new world we\'ll have in a few\nyears? What are we unconsciously ruling out as impossible that will soon be possible? \nOrganic\nBut talking about looking explicitly for waves makes it clear that such recipes are plan B for getting startup ideas.\nLooking for waves is essentially a way to simulate the organic method. If you\'re at the leading edge of some rapidly\nchanging field, you don\'t have to look for waves; you are the wave.   \nFinding startup ideas is a subtle business, and that\'s why most people who try fail so miserably. It doesn\'t work well\nsimply to try to think of startup ideas. If you do that, you get bad ones that sound dangerously plausible. The best\napproach is more indirect: if you have the right sort of background, good startup ideas will seem obvious to you. But\neven then, not immediately. It takes time to come across situations where you notice something missing. And often these\ngaps won\'t seem to be ideas for companies, just things that would be interesting to build. Which is why it\'s good to\nhave the time and the inclination to build things just because they\'re interesting.   \nLive in the future and build what seems interesting. Strange as it sounds, that\'s the real recipe. \nNotes\n[1] This form of bad idea has been around as long as the web. It was common in the 1990s, except then people who had\nit used to say they were going to create a portal for x instead of a social network for x. Structurally the idea is\nstone soup: you post a sign saying "this is the place for people interested in x," and all those people show up and you\nmake money from them. What lures founders into this sort of idea are statistics about the millions of people who might\nbe interested in each type of x. What they forget is that any given person might have 20 affinities by this standard,\nand no one is going to visit 20 different communities regularly.   \n[2] I\'m not saying, incidentally, that I know for sure a social network for pet owners is a bad idea. I know it\'s a\nbad idea the way I know randomly generated DNA would not produce a viable organism. The set of plausible sounding\nstartup ideas is many times larger than the set of good ones, and many of the good ones don\'t even sound that plausible.\nSo if all you know about a startup idea is that it sounds plausible, you have to assume it\'s bad.   \n[3] More precisely, the users\' need has to give them sufficient activation energy to start using whatever you make,\nwhich can vary a lot. For example, the activation energy for enterprise software sold through traditional channels is\nvery high, so you\'d have to be a_lot_better to get users to switch. Whereas the activation energy required to switch\nto a new search engine is low. Which in turn is why search engines are so much better than enterprise software.   \n[4] This gets harder as you get older. While the space of ideas doesn\'t have dangerous local maxima, the space of\ncareers does. There are fairly high walls between most of the paths people take through life, and the older you get, the\nhigher the walls become.   \n[5] It was also obvious to us that the web was going to be a big deal. Few non-programmers grasped that in 1995, but\nthe programmers had seen what GUIs had done for desktop computers.   \n[6] Maybe it would work to have this second self keep a journal, and each night to make a brief entry listing the gaps\nand anomalies you\'d noticed that day. Not startup ideas, just the raw gaps and anomalies.   \n[7] Sam Altman points out that taking time to come up with an idea is not merely a better strategy in an absolute\nsense, but also like an undervalued stock in that so few founders do it.   \nThere\'s comparatively little competition for the best ideas, because few founders are willing to put in the time\nrequired to notice them. Whereas there is a great deal of competition for mediocre ideas, because when people make up\nstartup ideas, they tend to make up the same ones.   \n[8] For the computer hardware and software companies, summer jobs are the first phase of the recruiting funnel. But if\nyou\'re good you can skip the first phase. If you\'re good you\'ll have no trouble getting hired by these companies when\nyou graduate, regardless of how you spent your summers.   \n[9] The empirical evidence suggests that if colleges want to help their students start startups, the best thing they\ncan do is leave them alone in the right way.   \n[10] I\'m speaking here of IT startups; in biotech things are different.   \n[11] This is an instance of a more general rule: focus on users, not competitors. The most important information about\ncompetitors is what you learn via users anyway.   \n[12] In practice most successful startups have elements of both. And you can describe each strategy in terms of the\nother by adjusting the boundaries of what you call the market. But it\'s useful to consider these two ideas separately.   \n[13] I almost hesitate to raise that point though. Startups are businesses; the point of a business is to make money;\nand with that additional constraint, you can\'t expect you\'ll be able to spend all your time working on what interests\nyou most.   \n[14] The need has to be a strong one. You can retroactively describe any made-up idea as something you need. But do\nyou really need that recipe site or local event aggregator as much as Drew Houston needed Dropbox, or Brian Chesky and\nJoe Gebbia needed Airbnb?   \nQuite often at YC I find myself asking founders "Would you use this thing yourself, if you hadn\'t written it?" and you\'d\nbe surprised how often the answer is no.   \n[15] Paul Buchheit points out that trying to sell something bad can be a source of better ideas:   \n"The best technique I\'ve found for dealing with YC companies that have bad ideas is to tell them to go sell the product\nASAP (before wasting time building it). Not only do they learn that nobody wants what they are building, they very often\ncome back with a real idea that they discovered in the process of trying to sell the bad idea."   \n[16] Here\'s a recipe that might produce the next Facebook, if you\'re college students. If you have a connection to one\nof the more powerful sororities at your school, approach the queen bees thereof and offer to be their personal IT\nconsultants, building anything they could imagine needing in their social lives that didn\'t already exist. Anything that\ngot built this way would be very promising, because such users are not just the most demanding but also the perfect\npoint to spread from.   \nI have no idea whether this would work.   \n[17] And the reason it used a TV for a monitor is that Steve Wozniak started out by solving his own problems. He, like\nmost of his peers, couldn\'t afford a monitor.   \nThanks to Sam Altman, Mike Arrington, Paul Buchheit, John Collison, Patrick Collison, Garry Tan, and Harj Taggar for\nreading drafts of this, and Marc Andreessen, Joe Gebbia, Reid Hoffman, Shel Kaphan, Mike Moritz and Kevin Systrom for\nanswering my questions about startup history.', 'https://www.ycombinator.com/library/8z-how-to-get-startup-ideas')]
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mINFO[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - docs_for_embeddings - Shortest Video Chunks: [(2, 's.', 'https://www.ycombinator.com/library/6R-how-pachama-uses-tech-to-tackle-climate-change'), (61, 'well great chatbot sounds good thanks man [Music] [Music] you', 'https://www.ycombinator.com/library/Ik-dalton-michael-how-future-billionaires-get-sh-t-done'), (83, "thank you all for having me and it's so\nawesome to see so many of you at 9:00\na. m.", 'https://www.ycombinator.com/library/8E-nine-business-models-and-the-metrics-investors-want')]
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mINFO[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - docs_for_embeddings - Longest Video Chunks: [(20552, 'Here\'s an example of a bad one, and I didn\'t pull this from a real application. I wrote this myself, and I wrote this based on many of the applications I read, you know what I\'m saying? Like, I didn\'t have to think too hard to write what a bad description is. And it keeps going, I couldn\'t fit it on the slide. It keeps going for pages. And this isn\'t even an exaggeration, this is what a lot of applications look like. And I understand, like, I have empathy for the people that apply with stuff like this because I think that they think that this is what we want, or they think that if they use enough jargon or buzzwords, that we will get confused and fund them or something. \nYou know, it\'s like stunning us, like, "Oh, I don\'t know, blockchain, okay, yes." Instead, this is arduous work that makes me, like, want to go take a break. I\'m like, "Okay, well, I\'m done." Like, I read one of these and I need to go, like, get a breath of fresh air. This is a really hard to read, it\'s really hard to understand what\'s going on. I read this and I\'ve learned nothing. I still don\'t know what this company does even after reading the application. And so, please don\'t apply with stuff like this. It\'s not helping. Makes sense? Yeah. And do you see the crisp difference between this and the good examples? Yeah. Okay. \nGreat applications tell a story. So here\'s the things that I would want to pull out of an application that I was reading. Who\'s on the team? So, "This is who we are. This is what we\'re working on. This is why we\'re working on it i.e., how we got the idea," something like that. "This is what we\'ve accomplished thus far." Even if that\'s, "Hey, we haven\'t done much," that\'s okay. I still want to figure that out. And, "This is why we\'re going to make this work." And that\'s pretty much it. \nThese are the things that, when I read an application, that I\'m trying to pull out of it, and there\'s nothing fancy here. And if you make me work really, really, really hard to figure this out, that\'s a sign of not a great application. But if this just flows out without taking any effort whatsoever, then that\'s a good application. Nothing fancy here, right? And if you\'ve ever hired people and read resumes before, it\'s kind of the same deal, right? You just look at a resume and you\'re like, "Okay, cool." There\'re some key things you\'re looking for and then you\'re like, "Sounds good," and you move on, right? A resume that takes tons, and tons, and tons of work to make sense of is probably not a great resume. \nOkay, here is my number one tip to applicants on what would help. Make it clear that there\'s at least one person on the team who can make the thing that you are working on. And notice I\'m being a little vague in that language because this is not just software, this means any kind of technology that you bring to bear, right? So if you are building a cure for cancer, you clearly are not going to have any programmers on that team, nor would you be expected to do so. But it would certainly be good if you\'re working on a cure to cancer to have some sort of scientist on that team. \nDoes that make sense? Same thing, hardware, you know, our nuclear companies, there were no programmers that were the founders of the nuclear companies, but you would hope to see a couple of folks with PhDs in something related to the nuclear field, right? So some sort of domain expertise. And the reason is we fund lots of startups, and if you have all these great ideas and no one on the team can actually do it, you\'re going to have a hard time. And so just having a really good sense, both in the application, and in general, I would recommend having someone on the team that can do it is highly recommended and changeable. \nSometimes there\'s folks where the team is not... Say you are working on something in software and there aren\'t folks that have the credentials or background where they\'re known software experts, that\'s A-okay. We still fund folks like this. But the burden of proof is on them to prove they can do it. I can think of an example of a company where it was, like, a self-taught programmer that was so excited and wanted to do their idea so badly that they went and built the prototype themselves. And it was in the application, like, "Here, I built this myself." Great, they got in, right? \nAnd it\'s because the burden of proof, not just like, "Let me take your word for it," but you were able to show, even though you don\'t have a background of an established software engineer, you built a prototype, and you brought it to market, and you proved it. And so that\'s a good way to think about if you\'re in this status of having a currently non-technical team of just simply backing up the fact that you can bring the product to bear. Whether that\'s from a team, whether that\'s you learning from yourself, whether it\'s a friend helping with the prototype, just some evidence that you can bring the product to market is highly recommended. \nAnd, like, last note here is, obfuscating this doesn\'t help, right? So, sometimes, people make it very vague who built the product, or where the prototype came from, or who is going to build it. And, like, I don\'t recommend obfuscating this. I think having it be super crisp on who is making the thing that you\'re working on is highly recommended. \nOkay, if you have an application that actually follows the directions really well, and is well written and does the video stuff correctly, and you have one or more folks that can build the thing that you want to build, and there\'s some evidence that you\'re serious about it. And what I mean by that is, like, a lot of times people apply, and it\'s clear they did it, kind of, on a whim, and they\'re not actually serious about it whatsoever comes across. If there\'s just some evidence that you really want to do this, that\'s recommended. So if you meet those things, you get about four times higher odds to get an interview, right? Like, if you\'re doing this stuff, getting an interview is not that crazy hard. And if you fail all these criteria, then, yeah, the odds are pretty slim. And so, it\'s as simple as this, that, you know, this is what it looks like to get an interview, is that you meet these criteria. I think that\'s pretty straightforward and transparent, okay? \nLet\'s talk about applying more than once. Okay, about a third of last batch were companies that applied already in the past and didn\'t get in. And so, the reason I say this is, it\'s not bad to apply and not get in. That doesn\'t ruin your odds, if anything, it helps you. The way it helps you is that your next application shows progress. If you apply and don\'t get in, and you apply again and you show progress, I look at that when I\'m reading the applications, and I know we all do, and we\'re like, "Wow, way to go. They really went and did it. Like, I\'m so psyched. \nLike, they went from an unlaunched idea, and then the next application, they launched it, wow, great job." You know, like we\'re impressed. And this is another thing to think about is, as application readers, we\'re, like, on your side. We\'re not looking at reasons to pick something apart, we\'re looking for evidence that, like, you\'re serious and that, like, things are going well and you\'re trying really hard. And so, when you see someone expend real effort and make real progress application, application, that\'s such a strong signal, right? And this is why you see such a huge percentage of the folks that do YC are folks that have applied in the past, right? Is because it is such a strong positive signal. \nOne thing I wanted to mention is that it\'s basically impossible to network your way into YC. The whole reason YC was created was to make it easy for people that had no network to start a startup and get help and raise money. And so, the idea of having this website where you can apply, and then you do a 10-minute interview, and you get funded was, like, really out there and weird. I remember when YC launched, I was not working here. So we don\'t expect anyone to have a network. We don\'t expect anyone to network with us. One note on this is, I get the sense, it\'s not a lot of people, but some people attempt to cold email us a lot or do other things that are, sort of, stalker-ish a lot, and that does not help. \nWe don\'t expect you to have done that, and the vast, vast, vast, vast, vast majority of people that get in are complete strangers we have never met before. That\'s the entire system here, is funding complete strangers. And my guess is, your time is better spent actually making your startup better than trying to, like, do some weird stuff to, like, get attention. Like, we always have these really crazy attention-seeking things that happen, and I can assure you, we don\'t enjoy those things. And, again, what do, I mean? Like, people, they physically mail us weird stuff sometimes, and, like, that\'s not great, right? So, some people put a lot of effort into this, not a lot of people, some people do. And I\'m just letting you know that this is not a good use of time, nor expected in any way, and that\'s not how I see it set up. \nAnother thing to think about is, sometimes there are people that you know that are a network, say alumni or other people, and they will give you well-intentioned bad advice. For instance, "Oh, don\'t apply until you have $5k MRR," or, "Oh, you know, I\'m really tight with the YC partners so let me put in a good word for you." Like, you should be very skeptical of this stuff. Self-appointed people that are giving you well-intentioned advice that\'s essentially putting up barriers between you and the process, I would just be, like, really wary of that. I\'m sure it\'s coming from a good place, but, again, a lot of times where I answer questions for people that are applying, some of the weirder ideas come from people that are vaguely in the network. And so if someone is telling you, "You\'re too early, or too far along, or something, something, something," I would be fairly skeptical, right? And, again, you don\'t need a network to get in so expecting the network to give you all the perfect advice is not always great. \nReal quick point, this is not about YC, but the last topic made me think of it, watch out for predatory advisors. So in the entertainment industry, there\'s lots of people that want to be famous. There\'s lots of people that want to be a recording artists, or they want to be actors, or directors. There\'s a huge supply of them. And one of the things of starting out in the entertainment industry is you meet all of these people that claim to have great connections, and they somehow are going to extract value from these poor naive people. And it\'s really sad. And this exists, for sure, in the tech industry, where there are people that will just ask for equity or cash compensation and claim all this stuff and promise you the world. And it\'s, kind of, a drag to see this exists. \nAnd so I just want to encourage everyone to be very wary of people like these and to do research. And that means googling them. If they claim fantastic things, look into that, due diligence on other people they\'ve worked with in the past. There\'s just, like, a whole variety of people that claim to help you break into Silicon Valley that, I think, is pretty dubious. And there are some legit things in there, but just like in the entertainment industry, for every, I don\'t know, 10 people that claim they can get you a meeting with the head of all the labels to get you a record deal, you know, 9 of those are probably lying, you know? So, keep in mind, the best way to have great things happen is to build a great startup and then great folks will find you, and to be a little wary of some of the folks that are looking for people just like you that are trying to break in. All right. \nSo let\'s talk about interviews. If you get invited to interviews, they last 10 minutes. The interviews are in-person. We expect the full founding team to be there. There\'s usually three to four people from YC in the interview, and the questions are usually very basic. And what we\'re trying to do is just understand the nuts and bolts of the business. It\'s nothing fancy. Just like I was saying about the application process, people are surprised to learn that there\'s nothing too fancy here, there\'s no trick questions, there\'s no really expert stuff. We\'re just trying to understand really basic things like, "Oh, are you launched? Well, how are you getting users? Okay, what is the next step for the company? How do you see this getting big?" These are all very, very basic questions, and we\'re simply trying to understand the stuff, right, versus... Yeah, actually, let me go to the next slide. \nSo there\'s a lot on the internet about how to prepare for interviews, and I think a lot of it is a little wrong. And the reason it\'s wrong is I think it sets up the mentality that a YC interview is this adversarial thing that it\'s your job to beat, right? It\'s like the interviewers are your opponents, and your job is to go in there and, like, stun them and confuse them. And then if you fool us good enough, then we will fund you. And I think that that is wrong. Again, I read this whole genre of blog posts because they\'re entertaining to me. And I think its usually people that didn\'t get in that write that and so I understand how it can feel adversarial if you didn\'t get in. \nAnd it\'s also more exciting to write a blog post about this really exciting interview, and it was like, "They were grilling me so hard and I, like, had to think on the fly." Like, that\'s more exciting than, "Yeah, we had, kind of, a boring conversation about my business," right? And so, I want you, this is a good thing for any kind of working with investors, I want you to put yourself in the shoes of the person on the other side of the table, which is, "What are we trying to get out of the interview?" Imagine you are interviewing a company, what would you be looking for? You\'d be looking for basic answers to your question, and you\'d be looking for having a pleasant conversation that this is someone that you want to work with and that you\'re excited to embark on their journey with them, right? \nAnd so a lot of what I\'m looking for in an interview is like, "Can I have a productive conversation with this person?" And if someone goes in there and spits out this memorized paragraph of text about AI-something, that\'s weird. That\'s not, like, an organic conversation of someone you might want to work with. That\'s someone going in there that clearly read way too many blog posts and spent way too much time preparing, and is, like, kind of, not understanding the context of the conversation, which is, "Hey, like, let\'s have a conversation about your company." Instead, they\'re just, like, spouting nonsense at us, okay? And I feel like that\'s a consequence of people reading too many blog posts about this adversarial process. \nBecause the fact is, when we fund a company, we are now working really closely with that company forever. The founders and your group, they get your cell phone number. They call you all the time, they text you all the time. Like, these become people that are really important member of your life. And the people that I fund, like this lasts a long time. And so, I just want you to know, from our perspective, we\'re just trying to get a feel of, like, "Okay, like, are we ready to really work with this company and get super involved?" \nAnd so, you know, have that compassion for the people on the other side the table versus making it really, like, a strange situation where it feels unnecessarily, I don\'t know, memorized and painful for us on the other side of the table. And, again, like I think sometimes people try to manipulate the process and I don\'t... If we get any hint that you\'re trying to do something weird, again, that doesn\'t engender trust. I think that\'s the word. We\'re looking for trustworthiness in a sense that we\'re getting to know the real you and those things. \nSo let\'s talk about a successful interview. Interviews do go really fast and they\'re intense. And the reason they\'re fast and intense is we\'re trying to pull all the information out of you quickly, and there\'s not a ton of time. And so it\'s not an attempt to trip you up, it\'s simply that that\'s how much time we have and we\'re trying to learn as much as we can. Successful interviews, the founders demonstrate a mastery of their own business. \nThey can talk about what they\'re working on. They know their own numbers, they know how many users they have, they know what their plans are, they know what their equity split is. Like, all the things that are in the application, they are, like, "Yeah, I can talk about that," you know? Like, "Oh, I have a question. When you said this is about that in your application, what did you mean? " "Oh, yeah, I have an answer to that," right? Like, we\'re just looking for you to clarify things that we may not have understood from the application. And so, there\'s no such thing as a correct answer, right? This is not a quiz show, this is not a, "Beat the Interviewers at Their Own Game." This is a legit, "We\'re just trying to understand what you\'re doing." \nAnother thing is, we know how risky this is and we know how slim the odds are in an interview are to succeed. And so, if you come in there being like, "Everything is great, everything is perfect. I have it all figured out, I\'m confident." Like, "We\'re definitely going to be successful, I promise." Like, okay, that\'s not actually good. Like, it denotes lack of self-awareness. And so, again, if you over practice for these things and you think your job is to come in there and tell us how you have everything figured out, and you\'re a genius, and your whole team is geniuses, and, like, it\'s like, you cannot lose, not a great sign in an interview, right? So a good idea of what is hard about the business and what the challenges are is expected and recommended versus the things where you do know what you\'re doing. Does that make sense? So, yeah, like, overconfidence, not necessarily great. You don\'t see this in successful interviews, you see self-aware founders. \nIf you are interviewed and not selected, we send an email with some feedback. Usually, the feedback is focused on a single thing, which is what we are most concerned about or not convinced about in the interview, and it\'s pretty transparent and straightforward. And if you take that feedback, and you go work on it, and you apply next batch, and you show how you either disproved the feedback or addressed it, that is highly recommended and that\'s totally a great way to get into YC. You see what I\'m saying? Sometimes people get these emails, and then you never hear from them again, or they get really angry or something and argue with you. \nBut you can either prove it and show that the feedback is invalid. Like, "Hey, we\'re worried about your growth strategy, blah, blah, blah." Well, go prove it. "Yeah, we did grow, here\'s what we did." We\'d love that, we\'d love to be disproven. Or, "Hey, you were right about the growth strategy, and so here\'s the changes we made." That\'s great things to hear too. And so that\'s a great way to take this feedback into account, is demonstrate either why it was not valid or that you\'ve addressed it. \nApplying to YC is actually really straightforward and well-documented, and intentionally so. So there are not a lot of secrets, and we\'re not looking for people to do too much tricky stuff. The more you can just, like, stay, make it super clear, tell a super-clear story like I talked about earlier, then you\'re going to do great. And I would also argue, the skills that you need to successfully apply are broadly applicable to what it takes to be a great founder, right? If you\'re going to talk to reporters, if you\'re going to be talking to other investors, if you\'re going to be talking to employees, you\'re going to talk to customers, having all the skills that we mentioned earlier that you would want to see in an interview or an application, I think, are extremely useful, okay? \nAnd then, final point, if you have questions and the question is of the form, "Should I apply dot, dot, dot?" Most likely the answer is, "Yes." And just always think about it and reflect on it if you\'re being the barrier to setting yourself up to being lucky or having unfortunate things happen to you and optimize towards saying yes to things like this. I think it\'ll help you, in general, as a founder. Great. Thanks so much.', 'https://www.ycombinator.com/library/6t-how-to-apply-and-succeed-at-y-combinator'), (24188, "like be very clear about like. What's unique to you, that you stand for? Once you do that, you need to make sure you hire people that believe in that. And so we interviewed hundreds of people. You need to make sure that you hire and fire based on the ideas of these values. And, and, you know? One of the things we do is we constantly repeat over and over again. So we interview. Like, when we interview, we wanna make sure they're world class and they fit the culture. So, the first thing I used to ask people, I had at the end of an interview sheet. Is if you can hire. This is a functional question. If you can hire anybody in the world, would you hire the person sitting accords from you. And if our, our vision if become like the best of what we do why dont we hire the very best in the world. So, every single person is meant to hire a person better than the previous people. You're constantly hiring, raising the bar. You're constantly hiring world class people. Then we have separate people called core value people. Who aren't in the function. So if you're an engineer, the core values engineers interviewers are never engineers. Because we don't want them to be biased and say, oh, I know how good they are. And they interview just for values, to make sure that people care about the same thing. And we've said no to a lot of really great people. Because we just didn't feel right about them being with us long term. So that's one of the things. I also think that maybe some other examples of when we kind of had hard decisions. In mid 2011 we had this. So we were mostly in the United States. And we had this internet clone funded by these guys called the Samwer brothers. Has anyone heard about the Samwer brothers? They basically, they clone. Yeah Rocket Internet, they just went public. And they basically copy American websites quickly, and they try to sell it back to you. And if you don't, then they just try to, so it's kind of like putting a gun to your head. And so, and they had basically done this to Groupon. Groupon at this point was like the fastest growing company in the world ever. First company to, fastest company to a billion dollars in revenue. And then they stopped doing Groupon. This is when Groupon was on top of the world. And they cloned us. And we had 40 employees. We had raised $7 million. They cloned us, and they raised $90 million. And, in 30 days, they hired 400 people. And they wanted to sell the company and if they couldn't, they were gonna destroy us around the world. And the problem with Airbnb is if we're not everywhere around the world. Like, a travel site not being in Europe is like your phone not having email, it doesn't actually work. So we were kind of in trouble. And we had this conversation and there was the pragmatic decision of should we acquire them and then there was the values decision. The pragmatic one should've probably have said buy them because you can't risk losing international. So just guarantee you're gonna get international. But we ended up not buying them. And the reason we ended up not buying them is I just didn't like the culture. I didn't wanna bring in this 400 people. I felt like we were missionaries and they were mercenaries. I didn't think they were doing it for the beliefs. I thought they were doing it to make a lot of money very quickly. And I believe in a war on missionaries would outlast and out-endure mercenaries. And I also felt like the best revenge against an Internet startup, Internet clone was just to make them run the company long term. It's like you have the baby, now you gotta raise it. So. That's what we ended up dong. And that was a very controversial decision. A lot of people are telling me, you should buy this company. We didn't. And I think it worked out. Let's see, the last part being how. What percentage of revenue comes from Europe? More than 50%. I think it worked out. Yeah. All right, anybody have any questions? I can keep going. Yeah, so one other question, one other statement we had at Zappos was that culture and brand were two sides of the same coin. Yes. Airbnb has a great culture and also a great brand. You wanna talk a little bit about branding, since that's actually a kind of a weak thing in Silicon Valley. We don't tend to focus on this, on culture and brand. Yeah. Yeah, that's what I actually just said that to Sam Altman. I think Silicon Valley is not historically really strong, or we don't talk about culture and brand very much. They are two sides of the same coin. So cultural like the principles and the beliefs you have inside the company that you want people to be aligned with long term. And whatever happens inside the company eventually comes out. You can't hold it in. And brand is really the promise outside the company that everyone identifies with. And so I think, having a clear mission, and making sure that you know that mission, and making sure that mission comes through the company is probably the most important thing you can do for both culture and values. And then, the second thing you need to know is that your brand, the way people think about you as a company, is often decided by your, you know, your brand evangelists are your employees. And so you have a weak culture. And we often think that companies that hire employees or people that are deeply passionate, create companies that customers are really, really passionate about. And those are the companies that have strong brands. And so, Zappos had a really strong brand because they have strong culture. And a lot of companies, Google, they care deeply about the culture. They actually have a question, is this person googly? And it's meant to be like, a catchall for do they fit the Google culture. Google's a very strong culture. It's unique to Google. And, by the way, there's no such thing as a good or bad culture. It's either a strong or weak culture. And a good culture for somebody else may not be a good culture for you. So, I think brand is incredibly important as well. And brand is really the connection of you with your customers. And so, if you have an incredibly strong culture that can be a whole talk and brand. But if you have a fairly strong culture, then the brand will come through. The final thing to say about brand is, a lot of people when they talk about their brand, they talk about what they sell. So if you're Apple, one way of doing it is to say, we sell computers. And like, our new screens are larger and it's faster. And they talk about bits and bytes. And I remember Steve Jobs had this really important talk where he says the way to win, this is 1997 when he first came back, wasn't to talk about bits and bytes. The way to win is to talk about what we value. And our core value is we believe people with passion can change the world. And that was how we introduced the Think Different campaign. And so Apple before they had this huge renaissance, which became the most valuable company in the world. They did the Think Different campaign, which is basically saying, this is what we believe in. And if you buy an Apple computer, you're also saying, I believe in this, too. And there would have to be, I think, a deeper core belief and if that doesn't happen, you're a utility. And the utilities get sold at commodity prices. Go ahead. How did you know how to communicate this idea? How? The question is how do you know how to communicate this to the company? The culture or the core values. To the employees. To the outside world. The culture? The values. The brand? How to communicate what Airbnb does Well, so the question is how do we communicate what Airbnb does early in the days? Well, we learned a lot because in the early days, we communicate like a utility. We actually said Airbnb is a cheap, affordable alternative to hotels. And we had a tagline of forget hotels, save money with Airbnb. And over time we felt like that was, I mean this was in really early days. And we felt like that was way too limiting. That undercut the idea. And so, we then eventually changed our tag line to travel like a human. Which we haven't kept. But it was basically meant to say that we believe in a certain kind of world and we really feel like travel is mass produced. You feel isolated, you feel like a stranger. And we want to bring the world back to the place where it's a little bit like a village again. Where the service is coming from other people. You have this feeling like you belong and you're actually treated like a human. You know, no matter how successful you are in life, often travelling will remind you, you're not that successful. Go through TSA, stay in a typical hotel. Sometimes you'll have some problems. And so we really want to make people feel special. And this was kind of some of the stuff we did in the early days and we did a lot of storytelling. I mean, I probably told the story of Airbnb like 10,000 times. And this is something that's kind of related to culture. But one, somebody asked me the other day like what's the job of the CEO. And there's a number of things a CEO does. But what you mostly do is articulate the vision. So you articulate the vision, you gotta develop a strategy and you gotta hire people to fit the culture. If you do those three things you basically have a company. And that company will hopefully be successful. If you have the right vision, the right strategy and good people. So what we end up doing is articulating the vision over and over and over again. Whether you're hiring people or recruiting them, talking to investors to raise money, doing PR interviews, if you're speaking at a class. You're always reinforcing the values. You're doing it in email to a customer. And so you just do it thousands of times. And if you do something thousands of times it will change and get better every time. So it's just kind of, evolved. Yeah, question. So you are interacting with the host, somehow you're in charge of the host and reinforcing the parts of Airbnb? Very, very good question. How do we make sure the hosts are reinforcing the culture of Airbnb? So when, the answer to that is, we do a pretty good job but not yet an amazing job at it. When we first started Airbnb, I kinda took the Craig Newmark school of thought. Craig Newmark's the founder of Craigslist. And I said, anybody should be able to use Airbnb. You didn't have to apply. If you wanted to rent your place, you could rent your place. And it turned out that many of the people believed in our values because we talked about it and we tracked them. But there were people who rented on Airbnb not because they believed in values, but because they realized they can make a lot of money renting their home. And not everyone really was a great culture fit. And these people actually did cause us a lot of problems. So, that was actually a bit of a lesson for me. And I didn't think our host had to, it didn't really occur to me in the early days. The host had to completely fit the values, that we met them, we attract people like us. And so, over time, we've realized host or partners, and so they need to believe in the same values we do. And so now we have a program called the Superhost program where they have to demonstrate values to reach this kind of badge, which gets them kind of priority customer support and distribution. We are having this host convention where you bring all the hosts in. We're gonna be talking about and reinforcing the values. We're moving towards the place where they have to apply to list. And we don't test them the way we test an employee but we're starting to get more rigorous about it. So the answer is, the answer is we were really late but we now do it by gradually moving towards apply to list and reinforcing it every step of the way. Go ahead. When Airbnb has made some great contributions to the open source community. Do you have any thoughts on how that contributes to the culture of your development team? Yeah. I think, just in general, and it may be related to two things about Airbnb. We tend to be a pretty open culture, just in general. We communicate a lot. And we generally believe in the idea of like, a shared world where people are giving back and contributing, making communities and industries stronger. So, just my one philosophy on communication is, we basically communicate and talk about everything internally except for things that relate to employee or customer privacy. So, if it doesn't relate to those two things, we'll basically talk about it. As far as open source culture and engineering, we wanted to make sure that we had a really strong identification of the team. And so we really felt like a lot of source codes shouldn't be, you know, we felt like every company needs a moat. Some kind of moat that protects you from your competition. We thought some technology would be, but we also felt like we wanted to be able to get back from a technology standpoint. And we preferred our moat to be that we provide the very best experience in the world when you use Airbnb. We have the biggest network effects. And we thought that kind of took precedent over having certain technology that only we could use. And so we decided to try to share some of that out to people. And I think, again, it does relate to the values. Now one other thing is I never one day recommended. Hopefully, if you have a strong culture, I didn't recommend we do any of that. We hired engineers that we felt like fit the values. And it just independently occurred to them they should do that. They felt like that was the right thing to do. All the way in the back. You talked about how during the conventions you didn't have any money and only a couple people visited your site. What did you do to increase the number of users that came to your site? How did you scale that out? So the question was, Brian had talked about that there weren't that many visitors to the site when they were trying to sort of get off the ground. How did they get users to the site? So this is actually not about culture but I will answer it anyway. So, you know a lot of people, this is not even a culture question, but the best advice I ever got was probably from Paul Graham. And Paul Graham basically said, I remember he had this line. He said it's better, he may have even talked about this at a talk, he said it's better to have 100 people that love you than to have a million people that just kinda sorta like you. It's literally better to have 100 people love you. And the reason why, if you have a million costumers or a million users and they just kinda don't care about you but they kinda use your app and you're okay. To get them to care is a really, really hard thing. In fact, I don't know how to get a million people to all of a sudden care. What I do know is if you get 100 people that love you, those people if they feel incredibly passionate, each of them will tell 100 people. And in fact all movements typically start, or companies or ideas that are really powerful, start with just 100 people. So the reason this is so critical is he gave us another lesson. Which is if all you need to do is get 100 people to love you. Then what you need to do is things that don't scale. So it's hard if you have a million people you can't meet all of them. But you can meet 100 people. You can spend time with them. So that's exactly what we did. Joanie and I, we would go door to door in New York City or in Denver where the Democratic National Convention was. Literally meeting with, staying with and living with our users. I use to joke that when you buy an iPhone Steve Jobs didn't come and sleep on your couch but I did. And that, that was really critical, living with your users. And by living with our users and spending time with them, all we had to do is give them enough time, attention. And get them to get to the point where they were deeply passionate. And if you work backwards from 100 people or even one person. Without even technology, imagine what would be an amazing experience for just this one person. And walk through the journey from the time they, whatever your service is, right? And make it perfect for that one person. Once you make a service perfect for one person, it's actually really easy to make almost anything perfect for a person. It's not actually that hard. The hard thing is then how do we scale this to millions of people. Where everyone gets in trouble is they try to solve both at the same time. So, the first thing we do is get the perfect experience for one person. We went door-to-door to do this, we won over their love. Then we use a separate part of our brain to imagine, now how would we achieve that at scale? And I'll give you one example before I stop talking about this. Right now on Airbnb you can, if you put your home on Airbnb, you can click a button and it kinda works like UBER. And we did this before UBER, a professional photographer comes to your house and they'll photograph your homes for free. We have 5000 photographers around the world, and we photographed hundreds of thousands of homes. So it's probably one of the largest on-demand photography networks, if there was such a thing, I guess probably the only one in the world. And that started with Joe and I. We were living, we were staying not living, staying with this one host in New York City. And her house is amazing, but her photos were terrible. And we said, why don't you just put up better photos? And this is before, you know, iPhones had great cameras, this was 2008. And she said, well, I can't figure out how to get photos from this camera, onto this computer. She wasn't very technically savvy. And we just said well, we'll just take photos for you. Or actually I said, what if you can press a button and somebody just showed up at your door and took professional photographs. She said, that would be magic. So next day, I knocked on her door and said I'm here. And I photographed her home. And then we sent emails to people saying, we have this new magical photography service. And if you want you can press this button and a professional photographer will show up at your home. Somewhere just press this button and just send me an alert or Joe an alert. And we'd rent a camera in Brooklyn. In January of 2009 walking through snow, photographing people's homes. We did this by hand without any technology. We managed it with just spreadsheets. I wasn't gonna burden Nate with trying to build something we designed before we had photography. Then we started hiring contract photographers. Then eventually we got a intern to manage all the contract photographers. Then we got a intern to become a full-time employee managing other interns to manage the contract employees. And at some point, this is before we built anything. And at some point there were too many, like people to manage. Like, there were like hundreds of photographers. And then we finally built all of the tools to manage all the photography. But we did it only after we knew exactly what the perfect service was. How about one more question? One more question. So a lot of people say that when, when the hardest part isn't the technology. Here the marketing, the communication is the hardest part there would be. And a lot of people say it's not the technology So do you wanna repeat the question? So the question is a lot of peop in this particular situation with Airbnb, a lot of people think that this is not necessarily a technology company, but it's more of a marketing company. Good question. So I'll, well, I'll tell you, I'll answer the question with a story. Okay, let me, let me, let me, let me just, let me preface that question by a set of questions. Do you have, do you today have proprietary technology? Yes. Do you have a moat? Yes. Do you have network effects? Yes. Do you have pricing power? Yes. Do you have a good brand? I think so. Are are you a monopoly? I'm not gonna answer that. But, but I think similar to the question just forgetting about all of that. It, companies that have network affects and sort of get off the ground based on. Yeah. The fly wheel is going. Yep. People just think that you're lucky. Yeah, let me, let me. It's a totally fair question. And people have said it. So, I wanna answer it. You guy that runs the Sequoia Capital now, his name is Doug Leoni. Yep. One day, I think it was a year, year and a half ago, Doug Leoni says, your job sucks. And I was like, what the hell does that mean? Like this is like, you've got the worst job of an CEO in my portfolio. And I said, tell me why. And this is what he said. He says, well, let me, here's how I think about it. First of all, you're a technology company. And he thought we were a technology company and I would say, at our heart, in many ways we are a technology company. And so, we have all the challenges of all my other portfolio companies. But beyond that, you are in 190 countries. And so, you have to figure out how to be international. We have to hire people in countries all over the world. We're literally in every country but North Korea, Rio, Syria, and Cuba. You're a, basically a payments company. We handle billions of dollars through our system every year. And we had to get money transmitter licenses in the state of California. So we actually are a payments company, and we have serious fraud and risk to, to, to warrant, and needs to be locked down like Fort Knox. He said, that's, that's usually where companies end. But you've gotta worry about all the other crap. And he says, trust in safety. You know we have 425,000 people staying in other people's, under, in other people's beds, in their sheets. Think about a woman from Texas staying in the Middle East or vice versa. The cultural conflicts that could happen and misunderstandings and, you know, you have 425,000 people a night. It's like being the mayor of Oakland. Now, imagine if you're the mayor of Oakland, all these things happen in Oakland tonight. So you've got trust in safety. Now, we have regulatory problems. You know, we are in 34,000 cities. Every city has a different law, different rules. And many of them were written in a different century, before you had any of this technology. So you've got to deal with that. Then you've got issues like search and discovery. So, Google's got this brand about being really important about search. The thing about search, though, is usually if I have a question, if Google can give me 40,000 results, but it's probably clear that there's like one or two best options for everybody. So if I wanna know a question to an answer, these are usually my best answer. We have 40,000 homes in Paris. There is no best home in Paris for anybody in this room. So we have to be really, really great at matching people and technology. We have to be a company that's just, you know, another example. Facebook, for example, is a digital product. Their product is their website. Our product are these experiences you have in the real world. So, we're not just an online product. We have to be an offline product. And we need to transition from when you're in your app, through cities. And these are just some of the examples why technology, design. So basically, the long and short of it is we have to be world class at technology. We have to be world class at design. We have to be world class at branding, because we've got to convince people this isn't crazy. You're not gonna die when you use it. We had to convince governments, this is good for neighborhood. What happens if the internet moves into your neighborhood? That's what people call it. It's a good thing, hopefully. And you've got to make sure trust in safety is really world class, that we handle all these payments and not have problems with risk. And I can kind of go through, and this is not even to do with culture. I didn't even mention culture. So, that's how I describe it is like, I think great companies are companies that are probably really strong at everything. But you know, we have, we try to hire the very best engineers and technical talent in the world and I definitely don't see us as a marketing company. Thank you. Thank you. Thank you, guys. All right, thank you sir.", 'https://www.ycombinator.com/library/JN-how-to-start-a-startup-building-company-culture-part-i'), (33590, "So so that, that's like, that kind of stuff, you notice we're not talking about the actual content of the app at all. Like, I'm not, I'm not, I'm not really interested in features. I don't really want to know about what they, the specific feature set in Google Docs and Evernote. I might start digging in a little bit more into, which features actually get used. Like if she's actively collaborating. You know is, how does that work? I heard some interesting things about oh, we, we use folders. That's interesting to me. But the main thing you're trying to do when you're running these first set of interviews is not necessarily get, like, questions about like user flows and like optimizing that, or questions about like the specifics of of, of any of that stuff. kind of can be distracting because users think they know what they want. But like you, you get the you get the horseless carriage effect, where you're, you're you're, you're getting asked for a faster horse instead of trying to design the actual real solution to the problem. If you start asking people about features, so you want to stay as far away from features as possible because the the things they tell you. Wind up feeling, almost overwhelmingly real. When you have a real user asking you for a feature, it's almost, it's very hard to say no to them. Because here's a real person who really has this problem, and they, they're saying build me this feature. But as you start to talk to lots of people and really get a sense for what, what their problems are, you figure out if this is actually a promising area or not. And like, based on what I heard there, it's like. Starting from that interview, I'm not necessarily positive there is a problem or there's at least there's a, there's a big enough problem that it's worth building a whole new product for. Because I didn't hear a lot of like things were were were. There was a, a big blocker, or there was something really wrong with the way it, the way it was working. Unless I had some big idea I would take that as, you know, maybe a negative sign. But it doesn't necessarily mean that you can't, you can't move forward and keep talking to more people. Because just because you talk to the first person and you don't get anything out of it, doesn't mean there's not going to be. A ton more people, who actually have a problem. And you, once you talk to about six, seven, eight people you're usually about done. It's unlikely you're going to discover a bunch of new information there. Which is why it's important to talk to different extremes of people right. Go, go find people who are different different points because this is just six or seven Stanford college students, you're going to get a very different response when we talk to six or seven high school students, or six or seven parents. All right, one second, let me look at the So based on that though, right, I think the. I think it's possible you could come up with, a set of ideas, right? You have this information about how someone takes notes, you've, you've come up with, potentially when you came up with this idea you had, you had some ideas as to, you heard this idea, you had some ideas as to like how you could build something cool. And so, if you're going to build just one feature on top of Google Docs. What would that feature be, right? And that's for, for, for a new product like this, it might be a good way to like get started thinking about where to go. Which is, okay, they're extensively using this things, right now. How can we make that experience just one quantum better? Something that would be. Really exciting to this person to be one one step ahead, and so let me take two minutes, right now. And think about, what that feature might be? Actually like try to, try to come up with what, what you might do based on what you heard from, from Stephanie, that could convince her to switch away from her current collaborative, multi-person, all-working-together workflow on Google Docs? To your new, your new thing that is, has all the features of Google Docs plus this one special thing that's, like, going to make it,. It's going to make it more be, more useful, and, and convincing the stop using that they are using. Awesome, all right. So, I'm going to invite our, our third guest, if you, if you have something up. I, I don't want to put you on the spot if you feel like you don't, you're not sure, but. Yeah. So what I, what I, is it on? Yes. What I thought about was like the, the reason she uses Everknow is like, of like, sticky note type notes like, like more thoughts and like details. So, I feel like, Google Docs has like documents and not like, smaller notes. So, I feel like a feature that will be like, super like, a mobile version of draw it that doesn't like, isn't that clunky and like, doesn't make you make real documents could be like, really useful. Awesome. So right. That's a, that's a good insight. Right, that's exactly, what's one of the thing that you get out of that, that user interview? And then, you've got this idea. Right, you've gotten this, I guess, user-fed feedback. You've got this idea. What if we've had a Google Docs that had the collaborative aspects and the group aspects of that, but where you you could pull in more little one off notes. And, it was, it was designed more around note taking. And so, the question is, now, once you have this idea, which I think it's the, it's actually probably a reasonable approach. Is this enough? Is this something people would actually switch just to have? And, the way to validate, there's two ways to validate that. One is if you're quick at programming, you can literally just go build it, and throw it out in the world and see what happens. and, that's that's great. And, if that, when that works that's that's an excellent way to approach it. But, a lot of the time that one little thing that's just a little bit better might take you three months to actually build something worthy of actually using. And so, you actually want to go out and validate that idea further before you go ahead and start building it. And so, you might take that idea, and you might go back go back out and you know, you can sit down with with diagrams. You can, you can draw what the what it looks like. Draw the work flow, and go bring that in front of people, but the one thing you really don't want to do is ask them this, this is sort of a trap, and I just want to warn you against doing it. Just don't go out and say, to come up with a feature idea, and go out and ask people. Are, you know? I've got this great idea for a feature. Are you excited about it? Because, the, the feedback you get from users, if you tell them about a feature, and ask them, is this feature good? It's often, oh yeah, that's great. Like, that sounds like such a good idea. but, when you actually take that in front of people, and you actually build it. You then, find out that while they thought it was such a clever idea, no one actually, like, cares to switch to get it. And so, the one question you can't ask is this feature actually good or not? Yes, Sam? What is the minimum that you could do in your experience to actually if asking, you know, between asking and actually building that whole thing. Yeah. So, Sam's asking if what's the, what's the minimum you can actually get away with to validate, given that you can't actually just go and ask them is this good or not? and, it's, it's highly dependent the answer to that is highly dependent on the particular feature. But, usually the, the best thing you can do is, is, is, really just hack something together, right? It's, you find, if your, if your idea is to build something on top of Google Docs, don't, for your V1, go rebuild, an awesome Google Documents, but for note taking application. Find a way to write a browser extension, that, that, that stuffs just that little bit of incremental feature in, and, and see if it's actually useful for people. go, like actually, go, go find a way to cheat is what it comes down to, because if you can't actually put it in front of people it's really, really hard to to find that out. For bigger things, where you're actually trying to, get people to spend money, it actually gets a lot easier. So, if you're selling it it's great actually sales is this cure all for this problem. Get people to put, give you their credit card and I guarantee you they're actually using the feature. It's it's one of the most validating thing you can do for a product, is go out there and actually get them to commit to pay you up fron. And, the problem is when you're working on a student note taking app, that's going to be relatively hard because you probably unless your idea is that you're actually going to sell it. It's probably something where you're thinking at least the, if the trial version's free, and you're not necessarily going to learn that much by trying to charge people money. But, if you go out there and you can, if you can get people to say hey I'm going to, I'm going to give you money? The money test is amazing, it really does clarify whether or not, they're rereally excited, because if you're not five-dollars-excited about it, you're probably not very excited about it. so, the last thing I wanted to do was actually work through with you guys, what happened at Twitch. So I brought some slides of feedback that I would like to get put up. It's my, my only slides for the for the thing and it's, it's. What it is it's, it's, it's representative excerpts of Twitch feedback. I had a whole like, 26 page document full of all the feedback. And then, I realized that reading that was going to be a little bit tedious and there was no way I'd make it through it in a lecture. So, pretend that like this is stuff is all representative of like, lots of people sent this kind of thing out to, to ask for me ask them questions. And, I've already pre condensed it for you in to the real feedback you got. So, when we were working on Twitch to go launch it, we we wouldn't talk too much about existing Justin.tv Broadcasters and asked them. About their experience broadcasting, what they liked about broadcasting, why they broadcasted, what they broadcasted, what else was going on in their life. And, the interesting thing is when you talk to users of your product who are, who are detailed users of your product, they come back to you with actually very detail things about features. Because they actually get mired in the feature and you have to sort of read between the lines. But they asked for first things like I want to be able to, way to clear the banlist in my chat room. Like, this, that was actually a very common request because there was a particular issue with how our chat rooms worked. People had asked for the ability to edit the titles of highlights after creating them. And, and it's, it's, the, this was like, this stuff was really consistent. As we talked to broadcasters, you probably talked to 12 fif, fo, 14, something like that broadcasters from the Justin.tv gaming platform. We got, we got all this feedback and, you know, what else do we have? We have your, your competitors have all these cool features like polls and scrolling text, you, I can personalize chat there and so, we have some positive feedback. They're like, oh, you guys don't have ads, that's great. I need to be able to ban. So, a bunch of stuff around chat. A bunch of stuff around interactivity with, with interactivity with the with their viewers. And, that was all really interesting. So, this was what the, this is what the Justin TV broadcasters wanted us to build. And, this is what they, what, what, where they felt pain using the, using the product. And so, if you thought that what we did was going to address these problems, you would be wrong. Because, actually, people who are using your service already and are willing to put up with all these issues, kind of, kind of means that these are probably not actually the biggest problems. Because if you're willing to ignore the fact that you can't edit the band lesson, titles are uneditable, and there's no way to get trolls out of your channel. And, you're using the service anyways, maybe those aren't huge problems. And so, that sort of brings up another really important point. Which is, you have to compare you have to compare groups of people, and compare the level at which they they argued with us. So, if you go to the next slide yes. Nice. We got competitor broadcaster feedback, which is really interesting. So, this is stuff that you've, we heard a lot from people who are using other broadcast platforms. They wanted to be able to switch multiple people onto their channel at the same time. they, they complained about us not having a rev share program or they talked a lot about how they're trying to make a living. They really wanted to make money pursuing this pursuing this gaming broadcasting thing. And, they talked a lot about video stability. Our service wasn't good in Europe specifically but, but just globally, video stability is this huge, huge issue for them. And if you compare and contrast actually, it was really different. Like, the things that people who didn't use our service said about what they cared about, was completely different from the things that people who were using the service cared about. And we focused on this stuff because this was the stuff where, it was so bad that they weren't even willing to use our service because of it. And most of them actually had thought about this because we were, our user base happened to be a very well educated user base in the area who knew about all their options for, for this. And, they would, they actually, you know, reaching out to them meant they could, they probably already tried all four services and actually had an opinion. It's great when you can users who are that, that informed and that, that, they have understand the space that well. And and if you go to the. I'm just going to go to the next slide. Yeah. Here we go. The other big thing we did that I thought was really important was we talked to non-broadcasters. so, we went up there and we talked to all the people who weren't using us or competitors. And in many ways, those are the most important people, right? Talking to your competitor's, that's your short term win, right? Someones using a competing, piece of competing software unless your piece of competing software is something like Google, which is a search engine, which everyone uses,. Okay. Then, there are no non-users to convert. But, in the case of gaming broadcasting, almost everyone's a non-user, right? The, the majority, this is true for most new products. The majority of people you're computing with are non-users. They are people who have never used your service before. And, what they say is actually the most important. What they say is, is the thing that blocks you from expanding from a, a, expanding the size of the market with your features, right? If you, all you do is look at your competitors and yourself, and all you do is talk to your, you know, your people who use your competitors products. People who use your products. You can never expand. Well, not never. But, you're not learning the things that help you expand the size of the market. You want to talk to people who aren't even trying to use one of these things, yet. Who, who have thought about it, maybe. But, who aren't who aren't into it. So, what did they say? My computer isn't fast enough. I'm focused on training 12 hours a day for the next tournament. I like making the perfect video, and like, editing it. And so, I just upload things to YouTube. I don't do live streaming. I don't, I, I, I have no desire to, to go into that space. or, or this is actually, particularly in Korea, this is a big problem. Once our strategy gets broadcast in a major tournament, we have to start over. We have to like, come up with an entirely new strategy. And so, the last thing we ever'd want to do would be broadcast our practice sessions, are you crazy? That's going to hurt us in the next big tournament. And so, this became, this became a big outreach program for us, trying to figure out how we can get people over this. We bought people computers. We ,. We worked really closely with gaming broadcast, software companies to help, the who, who made the broadcasting software to make that better. We started building broadcasting into games and into platforms, like we built broadcasting into the Xbox, we built broadcasting into the Playstation 4. Because we wanted, needed to overcome this issue that, like, it was too hard, broadcasting wasn't, wasn't possible. And so you sort of combine these, for us, these are three, three big groups we looked at for broadcasting. And you combine that feedback and what it tells you is not the features to build. Right? Because the, the features they asked for things like polls things like a you know, the ability to have child account. Like, child accounts in your account. We haven't built most of that stuff. But what was important were the, were the, the issues, like the goals they were trying to accomplish there. People wanted money. People wanted stability and quality. People wanted universal access for viewers all around the world to be able to watch them. And so that became our focus, actually. And we dumped almost all of our resources into things that none, no one ever mentioned in an interview. But, those are the things that actually address the problem. And, and the way you could tell that it worked is, was as we, we would build these things, and then we would go back to this exact same people we interviewed and say hey, you told us you really cared a lot about making money. Well, we built you this subscription program, that will let you make money. And, it, it, it's astonishing because most people aren't, have never had that experience, actually. They've never talked to someone and said it would be really great if your product had feature X. And then, and then, like, two months later or a month later, your product actually has feature X. Or at the very least, a feature that addresses the problem they brought up. And so, it was actually, the, the people we converted first to our product are the people that we talk to about user research. They are the ones who were actually the most impressed, which is kind of fun. But it really worked, because those, we picked people who are representative. We picked big broadcasters, small ones, medium ones. And we, we made sure we were addressing their concerns. And that, that was completely different from how we'd approach the problem on JustinTV. Because in JustinTV, when we'd try to do this, we'd, we'd sat down. We trolled through huge amounts of data. Like we, we spent tons of time looking at Google Analytics. Looking at mixed panel. Looking at in-house analytics tools. Figuring out how people use the service. Looking at where our traffic came from. Completion rates on flows. We spent all this time doing that. And that's good, I mean, you can learn things from that. I'm not telling you not to look at your at your data. But it doesn't tell you where you need to go. It doesn't tell you where, what the problems are you need to address. And so we would just sort of invent these ideas in JustinTV. And then, nine times out of ten, without talking to someone, the idea turns out to be bad. And that's just one of those disappointing things about doing user interviews and user feedback. It's why, I think, so many people don't do it, which is, you're going to get negative news about your, your favorite pet feature most of the time. Like, you're going to have this great idea, and you're going to talk to the user, and it's going to turn out that that nobody actually wants that. Like no, no one's actually, they're actually completely concerned about completely different things and they don't care about what you thought was important at all. And and that's a little bit sad but just, just think about how sad you'd be in four months when you launched that feature and it turns out no one actually wants to use it. So think that's about it for my the lecture section of what we're we're talking about. I want to take some questions from the audience. What you see startups get most wrong about? I mean, most startups don't do them at all, but the ones that do what are the most common mistakes? I'd say, the most common mistakes are, showing people your product. don't, don't show them you're product. It's, it's sort of like telling them about a feature, you want to learn about what's already in their heads, your, you want to avoid putting things there. The other thing is, asking about your, your pet feature direction, so if you think you want to add, add subscriptions to your product. Going and asking people would you pay for a subscription. Going and asking them, would you use this feature. And I'd say the the other big mistake people make is talking to who's available rather than talking to who they need to talk to. There's certain users that are really easy to get at, because they are say, members of your forum already. Right? You have some product forum, and you talk to the users on that forum because they're, they're easier to get access to. we, we spent like weeks digging for identity information, and figuring who these people were. So we could contact them, so we could talk to them. Because a lot of these people weren't, it wasn't obvious. They were just some user on a, on a site. And if that site didn't support messaging, there was, like, no obvious way to interact with them. And so we spent a bunch of time trying to network, and find those users, and bring them on. Because if you, if you just talk to who's easy to talk to, you're not really getting, getting the best data. The fortunate side there is that almost everyone is flattered to be asked what they think. And so most of them will actually talk to you and tell you things. Yeah? How hard is it to get buy in from the rest of your company? I mean, like, you can go and be like, whatever, I'm in charge. So you're doing what I say. But it's probably not the best way of doing it. Mm-hm. So how did you get them to? That's a good question. So the question is how hard is it to get buy in from the rest of the company and how do you do it? Getting buy in if you just go to them and say, I figured out, I talked to the user, I figured it out we have to build this. Is really hard. Because people don't trust you. There's something magic about showing them in the interview though. So I really recommend you record interviews. Recording interviews is like magic. A, it stops you from taking notes in the middle. And taking notes is a little bit disruptive. It makes it harder for you to feel like you're actually engaged in the conversation. And b, you can then play that recording for people. So when, when they don't have to be there for the entirety of all of the interviews. But when you want to make a point about what, what we should be building and why. You just playback for the rest of the company that interview and it's it's like magic the influence it has on people's thoughts and what's what the right thing to build is. Yes. Since you mentioned recording did you try to insist on doing Skype interviews rather than over email or? What was your impression of? Yeah. So you definitely want to do Skype or sorry the question was, do we insist on Skype interviews for recording. You don't want to do interviews over email if you can avoid it because interviews over email are non interactive. And the most interesting things you learn in interviews come from the interesting, tell me more. because the instant that you hit, you hope this vein of they'll say something you didn't expect, and the instant they say something you didn't expect or didn't already know, you should drop into detective mode, and detective mode is huh, that's interesting. Can you tell me more about that? And people don't like silence, so they'll keep talking to fill the void. And the best part about doing it over Skype or doing it in person is you have that interactive feedback. And you can actually pull a lot more out of people. E-mail interviews are, they're okay. But they're basically useless. If you're in person or over Skype, they're actually also easy to record. Make sure you ask them if it's okay to record it. It's not polite to record people without their consent. But if they're willing to like give you like an in, a user interview, they're probably willing for you to record it as well. Sorry, but what about the international market? Like you mentioned if that you had a lot of interviews in Korea, and I don't know maybe feel comfortable with English, or. Yeah, so the question is like what about people in the international market where you're trying to do youth interviews with people who don't speak your language. That's just really hard. And actually to this day Twitch works way better in English speaking countries than it does in non English speaking countries. And I think a big part of that is, we are much better at talking to people in English speaking countries, and learning what their needs are. And we're not as good at it, in other countries. We've tried to address that by hiring people who speak Korean. Having them translate. We've tried to address that by, finding representative people in those countries who speak both English and Korean, and reaching out to them. But the problem with that, is, like the, you're not actually getting a representative sample. No matter how hard you try. The very fact that they are a fluent English speaker means they're not representative of all the people who don't speak fluent English. It's just a hard problem. It's why companies find it easier to wi, build markets that went in their home, in their home country. Much more easily than abroad. Because it's really hard to talk to users abroad. Yes. What channels did you use to reach out to them, and do you ever compensate them? So the channels we used to, what channels did we use to reach out to them and what did we ever compensate them? The channels we used to reach out to them, were, on site messaging systems. So like, if you're, most site websites have some way to contact the user, so if they're a visible user of another website you use that sites messaging system and say hey, I was watching your stream, or whatever this person was doing on the site. I'd love to ask you some questions about your use would you mind hopping on a Skype call? And as for, the other thing we do is we find out who people were and we send them emails. we'd, like, rented some at events. because a lot of these people go to the same events and we, like, would go to the events and, like, get, we wouldn't run the user interview at the event, but you get to know them, you exchange business cards or, you know, whatever it is you actually do now aren't, isn't business cards. And, and you, you get in touch with them. We tended not to compensate people. I think that if you, if no, if people don't care enough about the problem to, like, talk to someone who's trying to solve it. You're probably barking up the wrong tree. We never had any trouble getting people to talk to us about paying them. What about on site user feedback tools? Do you get a little feedback from that? So, so there's this whole second set of user feedback that's really important, that I should talk about,. The question was, what about, like, on site user feedback tools? And I think this stuff you're talking about is where you have like a, a new product and you want to see how, if it's actually going to work or not. And so you put it in front of people and you see how they use it or not. That's really important. That kind of work is super important and it can tell you lots of things about where you went wrong building something before you launch it, which is great. It doesn't tell you what to build. It it helps you iron out the kinks and edges of the thing you did build. But generally speaking we that wasn't kind of the user feedback we were getting I mean that's stuffs good it's good it's like it's much more similar to the, to the data driven approach. Right? You're finding out, why are people dropping off in this flow, you're not finding out what problems should I really be solving for them, and what, what do they care about as a human. And, for this kind of like really early stages interview which the kind of user interview that's crucial startups do,. That's the, that's where you want to focus, so we didn't bring on site actually it almost all over phone or Skype. Yes. So for the three different groups of people there are different kinds of feedback so as a startup time and resources, is that a good area to focus on first? Yeah. So with the three different kinds of people did we focused on one of them given that we had very limited resources, yes. We focused on the competing people using competing products. Because, we knew that they already were interested in the behavior that we needed and they were willing to do it at all. And therefore all we had to do is convince them to switch, which is a much easier thing to do than to try to create new behavior where none existed before. And we had to do that because we had to get some quick wins, because my gaming project inside of Justin.tv would have been killed if it wasn't showing 25% month over month growth every single month. So we did, and that meant focusing on short term get the people in right now. And that turned out to be good in general because it turns out that building something that some people want generally generalizes and so I want to bring in people who weren't even users of the service as well. Yes. Twitch has been around from the beginning so it filled up, for example the video game industry. In the beginning this industry was very like, decentralized, like there wasn't a lot of cohesion with like, you know, different video game companies consolidating where tournaments are and stuff. But now it's very different. So you said originally you spoke to like broadcasters and you know streamers themselves, how does that change when like, for example like Riot has you know, banned users or professional players from streaming their own stuff. Have you tried to you know, gain leverage with that or? Yeah, so the question is what about the game publishers basically, right? The game publishers is huge important people in this space. a, the game publisher is and any big company for that matter isn't going to give you the time of day as a small start up. Which is both good and bad. It means you don't really need, need to talk to them because, they're they're not interested in you. But it means you actually just can't talk to them, I mean we tried but no one wanted to talk to us. And they did once we started getting some traction and, and becoming a little bit, slightly bit of a player in the space. I don't want to like, talk that bad about of them because they, they, they were nice about it enough about it it's just that you know, when you're, when you're a tiny little start up there's lots of tiny start ups and they, they don't have the time to talk to all of you. As we've gotten bigger actually the point that, you know, game publishers have become an increasingly important constituency for us. And if I was to talk about who Twitch does user interviews with now, who we who we pulled information from now it would include game publishers definitely because they'd be, they've become much more active in the space. It was something that they weren't particularly active three or four years ago as much as they are now. And that's another really important point about user interviews in general. Which is that the pool of people you care about is going to shift over time. The people who get you started, like the crucial people to get your product started for the first six months, are not who will be using it three years later. And it's very important you keep, doing this stuff. Because one thing that's really easy to do, is to do a little bit of it in the beginning. And, and achieve some level of success, and then you sort of, stop talking to new people. And that's a good way to make the, the next set of features you build be not as good as the first ones. How about one more question? Yeah. Yes? How do you give good user feedback, if you're a user? so, how do you give good user feedback, it's a really good question. So I think what I, what I want a user to do is I want a user to tell me about what they, like, what they're really thinking, right? And what, what, what they're problems really are. And to just sort of ramble. Like I want someone to just tell, tell me about stuff in their life. Because the, the more you learn about them as a person. And sort of the, the, their, what's going on in the context of what they're doing the is easier to understand why they want the things they want. And that's really the critical question. So I'd say like, you know, what I'm looking for in a, in someone, when I'm doing a user interview, it's someone who is going to be willing to talk a lot and be willing to, to really give me a full, give me a full picture. So that's what, I guess on the flip side, if you want to be a good, if you want to help people out with good user interview feedback ramble, like, be, just, just talk about stuff and everything. All right, great. Well, thank you very much. Thank you very much.", 'https://www.ycombinator.com/library/JQ-how-to-start-a-startup-talking-to-users')]
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - 25604 - docs_for_embeddings - STEP_OUTPUT - Yielded output "result" of type "[Any]". (Type check passed).
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - docs_for_embeddings - Writing file at: /Users/szymonzmyslony/projects/master-pipeline/pipeline/.dagster/storage/docs_for_embeddings using PickledObjectFilesystemIOManager...
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - 25604 - docs_for_embeddings - ASSET_MATERIALIZATION - Materialized value docs_for_embeddings.
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - 25604 - docs_for_embeddings - HANDLED_OUTPUT - Handled output "result" using IO manager "io_manager"
[32m2024-02-04 22:32:35 +0100[0m - dagster - [34mDEBUG[0m - __ASSET_JOB - 0a3d5ead-e3ae-4c86-ac43-b0dd2af706c3 - 25604 - docs_for_embeddings - STEP_SUCCESS - Finished execution of step "docs_for_embeddings" in 25ms.
