docs = [
    {
        "content": [
            [
                "Hey everyone. I'm Harj Taggar, one of the group partners at Y Combinator. Today I'm gonna talk about whether you should start a startup. Because YC invests in startups so early, I've spent a lot of time with people who aren't yet sure if they should start a company or not. I've helped many people, including my own friends and family, think about this decision and my intended audience for this talk is anyone who doesn't feel ready to start a startup today, but thinks they may want to one day in the future. I'm gonna break down the topic of whether you should start a startup into two parts. First, we'll talk about which types of people seem best suited to being startup founders and help you figure out if you might be one of them. Second, we'll talk about how you might best prepare yourself for becoming a startup founder in the future. Let's start by helping you figure out if you are the kind of person who should become a startup founder or not. I really wish there were a simple test you could take that would give you a clear and correct answer to that question. I've now worked with almost a thousand startup founders as a group partner at YC, and I still get surprised by which people take to startup life like a duck to water and which ones struggle to adapt. Now, you might find this surprising if your image of startups is based on the way famous founders are often depicted in books or movies. These depictions can make it seem that if you're not a ruthless, brilliant programmer like Mark Zuckerberg in The Social Network movie, or a charismatic product genius like Steve Jobs in one of the many books or movies about him, you probably aren't cut out to be a startup founder.\nNow, I can't deny that being a brilliant programmer or a charismatic product genius will certainly make it easier to be a successful startup founder. But I can say that after working with many successful founders, there are many more different types of people who succeed at startups with different strengths than just those stereotypes. As an investor, my job is to pick which people will make great startup founders. And yet, even after 15 years of starting and investing in startups, I still get surprised by who turns out to be a great startup founder. That means it's gonna be hard for you to know for sure if you are suited to being one. You might think you could just look at how well someone has done in school or at work and assume success there will lead to success at startups. That's definitely what I thought when I first started working at YC in 2010 and began reading YC funding applications for the first time. After I started working with more startups, though, I realized that these signals mattered much less than I'd expected they would. When you're working on a startup, you have to put in blood, sweat, and tears to convince even a single user to care about trying your product, let alone convincing the first 10 or a hundred.",
                "Introduction (Part 1)",
            ],
            [
                "You have to push through a lot of rejection to get there, and because this is your startup all of that rejection feels very personal in a way it doesn't, when you're working at a fan company, building a product for someone else. It takes a lot of resilience to make it through this initial struggle to get your early users, and that's the quality I think is most important for startup founders to have. Resilient people are suited to startups and should definitely become founders, but how do you know if you have enough resilience to be a startup founder? When I first started working at YC, I thought I could use confidence as a proxy for resilience. I'd assume that if someone projected confidence, like speaking with conviction, being high energy during our funding interviews, they were likely to be a resilient founder. The more founders I worked with though, the more I realized this was also wrong. It turned out that someone could appear very confident initially, but not be resilient when their startup hit roadblocks. Conversely, some of the quietest and least confident seeming founders at first turned out to be the most resilient founders I'd go on to work with, many, eventually taking their companies public. This is Sajith, the founder of Benchling. I met him when we funded Benchling in 2012. Benchling is now worth over $6 billion, and Sajith has grown into a formidable founder and CEO. But I remember when we first interviewed him and his co-founder Cory. They were both softly spoken engineers and we were all concerned they wouldn't be suited to working on Benchling because Benchling's idea was to sell software to biotech companies and pharmaceutical companies to make money, and we weren't sure that they would be good at that kind of enterprise sales. This concern was shared by investors at demo day, who worried that they wouldn't be able to get those biotech or pharmaceutical companies to pay for the Benchling software. And Benchling struggled to raise very much seed funding at demo day. Sales did turn out to be a real struggle for Benchling. In fact, over a year after they'd graduated from YC, Benchling was still not making any revenue, though they did have some enthusiastic grad students as free users, and the product continued getting better. It took them almost another year - that's now two years after YC - to start doing sales and making any revenue. Now, Benchling is on course to become a public company someday and has many of the world's top biotech and pharmaceutical companies as customers. Looking back, I always had confidence that Sajith was a good engineer. But I could not have predicted back when we funded him in 2012, that he would have the resilience to overcome that amount of rejection and transform himself into the leader of a company that took many years to become great at enterprise sales.",
                "Introduction (Part 2)",
            ],
            [
                "But what I haven't shared with you are the stories of many other founders who seemed equally talented at first when we first funded their companies, but turned out not to have the same amount of resilience as these founders did. I've thought a lot about how to tell the difference between people who have this kind of startup resilience and those who don't. I've wondered if maybe having the right motivations or reasons to start a company mean you're more likely to have this special resilience. Over time, though, I've decided that this also doesn't matter as much as I had thought. I think there are many perfectly legitimate motivations to start a company. For example, it's become popular to say that you shouldn't start a company just to make money. That's considered a somewhat flimsy motivation, but I actually think it's fine to start a startup to become rich. Startups are one of the few ways to make life changing amounts of money in a relatively short period of time. If the desire to make money gets you started, then great. Go for it. I also think that simply being curious about what it's like to found a startup is a fine initial motivation to start one. Actually doing a startup is the only way to know for sure if you'll enjoy it. The reason I have conviction that your initial motivations don't matter so much is that I've seen motivations change over time. I've seen founders who started out a company with a plan to sell it within a year changed their mind as they kept working with the company and are still working on that same startup a decade later, and it's now a public company. This means that your initial motivations to start a startup aren't as important as what those motivations might change into over time. In order to keep working on a startup and keep going through those dark periods that every startup experiences, you need enduring motivations, and I think the best ones are to be genuinely interested in the problem you're working on and love the people you're working with. We'll talk more about finding those later. So instead of introspecting too much on, if you'll make a good startup founder, I'll offer some practical advice. If you are curious about what it'd be like to start a company, start by asking yourself, What do I have to lose? Now, I mean this question, not as a rhetorical one, but as a very practical one. Figure out what the worst case scenario looks like if you started a startup and decide if you can live with that. It's probably gonna take at least a year for you to have enough data to tell if the startup you're working on is promising enough to keep working on. In the worst case, you'll shut down the company without having earned much or any salary for that year. Can you live with that worst case? The calculus here is different for everyone. If you're about to graduate college, taking a year after graduating to work on a startup is not a big deal.",
                "Introduction (Part 3)",
            ],
            [
                "Those job offers will still be waiting for you in a year, but if you've been a FAANG employee for the past nine years and you're in line for a big promotion this year, then maybe you stand to lose a lot by spending the next year working on a startup instead. Asking yourself if you can handle the worst case is the best way to know if you should start a startup. Be honest with yourself. If you can't actually handle the worst case, then your own constant anxiety will probably self-sabotage your startup efforts. When you're thinking about the worst case scenario of working on a startup, you should factor something else into the equation. You will learn a lot from starting a company. I don't think enough people factor in how valuable this learning is when they're doing their worst case scenario analysis. As a startup founder, you are responsible for making everything happen, and that means you get to do lots of different types of work. You'll have to do some amount of sales, product and customer support all at once. This can be very clarifying in helping you figure out what type of work you enjoy and where you might want to focus your career, even if the startup doesn't work out. Some people start a company that doesn't work, and then they jump straight back into starting another one because they wanna learn from their mistakes. Others decide they actually really enjoy specializing in doing one thing really well, and they join a company where they can do just that. The startup experience can really improve your career opportunities, even if the startup doesn't succeed. My second startup, Triplebyte, used software to help companies identify and hire great people. I work with hundreds of employers as they search for the best talent, and I found that many of them were explicitly looking to hire people who had previous startup experience. They believed they showed evidence of being a self-starter and being able to take initiative and lead projects. Some of the most successful YC companies have actually built their hiring processes around this knowledge. Rippling a $10 billion company founded by Parker Conrad, also a YC company, hires former founders and puts them in charge of entire product divisions. \"Usually we love hiring former founders to run specific product lines and, and build them and, and really run them as general managers. We've been, you know, really successful at recruiting. I think we have now probably around 50 former founders that work at Rippling.\" At YC, we often see startup founders leave their startup if it doesn't work out and go on to join a more successful YC company. This is Nick Grandy. YC funded his first startup Wundrbar in 2008. That startup shut down, but he went on to join another YC company you may have heard of, Airbnb, as its first employee. That, of course, worked out great. After many years at Airbnb, he left to start another YC company, Outschool, which is now valued at over $3 billion.",
                "Introduction (Part 4)",
            ],
            [
                "I share these stories to show how career progressions are not always perfectly linear. Introducing some serendipity and meeting smart, ambitious people can completely transform your career, and being a startup founder is a great way to do exactly that. Okay, so let's say you do decide you can live with the worst case of doing a startup, but you're not ready to do one right now. How can you best prepare yourself to start one in the future? To actually start a company you'll want two things, an idea and a co-founder. Now, sometimes an idea and co-founder both come to you quickly and you're off to the races. There's lots of great startup content out there about how to start a company once you're ready, but let's talk about what to do if it'll take you some time to get to that point. I'd start by encouraging you to not think of finding ideas and co-founders as two separate tasks. It's hard to think up good ideas yourself. Also, your ideas will start out being vague and fuzzy, more like a hunch or an impulse than a clearly formed idea, and you'll go through seven iterations of fleshing it out into something more tangible and concrete. Having someone to talk through that initial idea or impulse with and debate and discuss is important, and the best person to do that with is your co-founder. I find my best ideas come to me during conversations with smart people, so I'd start by thinking about who do you know that you enjoy talking about ideas with? In college, these are often the people you'll go to when you're stuck on a hard problem, or they're the people you most enjoy working on group assignments with. At work, these are the colleagues who you find make you the most productive and help you do your best work. I'd seek these people out and start having conversations with them about ideas or technologies that you find interesting. Talk about products you use every day that you admire or are frustrated by. Talk about technologies you think are underrated today and why.\nFlesh your thoughts out and debate them. Spend the time between these conversations, doing your own reading and research to learn more about the topics you find interesting. If you're a curious person, this will seem natural to you anyway. All of this primes your mind to more easily notice and think of potential startup ideas, and it helps you get to know your friends or colleagues better as potential co-founders.\nIf you are struggling to think of people you enjoy talking about ideas with, then you probably need to change your environment and meet some new people. If you really wanna start a company one day, it's best to choose an environment where you'll be around many people who might someday be your co-founder.\nI think the best environment for this is working at a startup. You both get to see how a startup works from the inside, and your colleagues will be less risk averse than the average FAANG employee.",
                "Introduction (Part 5)",
            ],
            [
                "So, if you're in college, I'd recommend finding a startup to work at after graduation, or if you're at a FAANG company now, think about leaving to join a startup as an intermediate step to starting your own someday.\nOnce you're around smart people who you enjoy talking about ideas with, I'd recommend you start experimenting with turning these ideas into side projects. At some point during these conversations, you'll eventually say something like,' Huh, like, it'd be cool if someone built X', and that's the moment to stop and think about how you could be the one to build X. Is there a simple first version you could build over a weekend? Or can you find other people who might be users and pitch them on the idea to see how they react? Keep pulling on this thread until you've come up with a plan to turn this idea into something real, however small it is. Right now, you're not trying to launch the next unicorn. You're just getting used to the experience of turning ideas into reality and experiencing the thrill of launching something. To turn your idea into something real, you'll need the skills to actually build them. If you're not a programmer, then either you'll need to learn how to program or find a co-founder who is a programmer. My advice, speaking from experience as someone who started his first startup without being able to code, is start learning to code. You only need to learn enough to build a version one of your ideas. Once you're around smart people, and you're working on some side projects, how do you know when it's time to take the leap and quit your job to start a company? While it'd be great if one of your side projects started getting explosive traction and made the decision easy for you, you can't rely on that happening if you're serious about starting a company someday. Even if you launch your side projects and get some early users, the feedback you get will be mixed. It's not uncommon for the early users of any product to span the spectrum of being delighted, appalled, and indifferent towards a product. To judge how promising your side project is as a startup idea, I'd use some advice from my Y Combinator partner, Paul Buchheit. He says that it's better to make a product that a few people really love than one a lot of people are indifferent towards. If your side project elicits a deep reaction from someone, the kind where they can legitimately say that doing something very differently as a result of your product existing, then you may be onto something. A single passionate user of a crude prototype that was hacked together on a weekend means so much more than a million signups on a wait list for something that doesn't exist yet. My main advice to you would be to think less about how well your side projects are going, and think more about how much you're enjoying the process of thinking up ideas and turning them into something real.\nAre you learning new things and finding yourself energized? Contrast this feeling with your day job.",
                "Introduction (Part 6)",
            ],
            [
                "If you find your job is draining, but you have energy to work on your side projects on evenings and weekends, that's a sign it may be time to quit and work on your own ideas. Pay particular attention to how much you enjoy working with your side project collaborators. If you enjoy working with them and you both want to be startup founders, recognize how rare that is. Having a great co-founder who wants to do a startup is a fantastic reason to quit and start one. To finish, my advice is: one, don't worry too much about your initial motivations or reasons to start a company. Those can change over time. Simply being curious about the experience of starting a startup is enough to get going. Think about the worst case scenario if you did start a company and be sure you can live with that. If you don't yet have an idea or co-founder, start looking around for smart people to talk about ideas with and launch some side projects with. Actually launch those side projects, however small, to get the experience of turning ideas into reality. And if you find someone you really enjoy working on side projects with and you both want to start a company, make the jump. I really hope you do, and I hope we get to work together at Y Combinator someday. Thanks so much.",
                "Introduction (Part 7)",
            ],
        ],
        "description": "YC Group Partner Harj Taggar shares his advice on the types of people best suited to be startup founders and how to prepare to start a company in the future.",
        "fetching_transcript": False,
        "title": "Should you start a startup?",
        "url": "https://www.ycombinator.com/library/GV-should-you-start-a-startup",
        "youtube_id": "BUE-icVYRFU",
    },
    {
        "content": [
            [
                "Kevin: This is gonna be part two of a talk I gave at the very beginning of Startup School on evaluating startup ideas. And the thing to know about both of these talks is we've been talking about them from the point of view of the investor. Basically, it was helpful, I thought, to explain to founders how investors evaluate startup ideas and looking at that structure so that they can better understand their own ideas, opportunities, and then in this presentation, present them better to the people that they want to get excited. So, a quick recap. In the first part, I basically say a startup idea is a hypothesis for why your company is gonna grow really quickly. That hypothesis must compose of three different parts: the problem, the solution, and insight. And the basic parts is your problem should be pretty big, pretty pervasive, have a lot of these characteristics to make it feel like there's a very big market that a lot people have the problem. Don't think you need to know about the solution is that you should not start with a technology, you should start with a problem. And lastly, you're looking to have something that's gonna make your company unique and have some kind of unfair advantage that we call an insight that will show why your company will grow faster than other companies. I talked about five different types of unfair advantages that your company can have, and kind of what are the benchmarks for meeting them. Now, the thing to keep in mind about understanding and creating this startup idea is that I don't need you to do all the work that lay all of that out in detail. That stuff that you'll kind of want to know or keep in mind, but a really good investor will do that on their own. They'll hear what you're talking about and extrapolate. And so, what I'm gonna cover in this presentation is how do you package up that hypothesis? How do you take all the things that you understand about your company and your startup idea, and how you present it to an investor so that they can make a decision that's in your favor? This is the YC startup application. And basically, this is the application, all the questions that we ask that YC partners will use to evaluate your startup. So, down here, when you're filling out the YC application, we actually linked to a couple of things and one of them is How to Apply Successfully. I can't tell because I've read so many applications, but it feels like founders are not reading that essay. It was written by Paul Graham in 2009 and almost everything in there still holds to this day, and people still make mistakes on it. So, I'm just gonna like, point out some stuff and really, like, punch it in here while I have your attention. So, here's a quote from that essay. Basically, we believe for every company that we will interview at YC, we bet there's probably another company that's just as good to them out there but they messed up on the application and we didn't realize it. We didn't invite them.",
                "Introduction (Part 1)",
            ],
            [
                "And basically, the reason is because they didn't express their idea clearly. That's it. Like, you might think, \"Oh, I didn't show off all that complex stuff about my startup idea and that's why they didn't pick me.\" And I want you to know, that's not True. And so, the first thing I want you to keep in mind is I do not need you to sell me as a YC partner. Right? So, average investor, what they do is they talk to you when you tell them about your idea, and it feels like they're poking holes, all the questions they ask about what's all the reasons why this could go wrong? A good investor does it the other way around. They hear what you say and they imagine and they use their optimism and they use knowing that some kind of rare event has to happen for you to become a billion-dollar company and they try to imagine all the those rare events that could possibly happen to you, and then they pitch that path back to you. And so, we are really good at selling ourselves. So, you don't need to do that. And the thing is, you guys are kind of bad at selling things in the beginning, right? And what I need you to understand is that I'm trying to evaluate these three statements when I'm hearing your idea. Do I understand it? Am I excited by it? Do I like the team and do I wanna work with them? Surprise, in your weekly updates, when you do your group sessions, these are the questions that we ask you to ask one another. It's basically the questions that we're trying to figure out for ourselves. And we're hoping that every week, when you talk with other companies, you are practicing getting feedback and understanding whether you're able to instill this in other people. So, your goal is just to be clear, I will do everything else. So, back to the application. These are the only two things we're gonna focus on today. What do I put in the what's my company going to make? How do I describe my company in a very efficient manner? The first way to do this is to be clear. The reason we focus on this is because a clear idea is a foundation for growth. And what I mean by that is that the best companies in YC, or around the world, grow organically, they grow by word of mouth. What does word of mouth look like? It looks like this. It's basically, I talk about your company, what you're doing, making, etc. and I'm the most interesting person at the dinner table. And I tell it to other people, and those people wanna tell other people. That's it. Word of mouth is something where I remember what you do, I talk about it enthusiastic, and it spreads on its own. Marketing and advertising, it's a tax I believe companies pay because they did not make something remarkable. Now, before anyone can remember at the dinner table what you do, they have to understand. And so, I have very simple rules for how to make things easy to understand. This will sound familiar if you're familiar with an essay I wrote on \"How to Design a Better Pitch Deck.",
                "Introduction (Part 2)",
            ],
            [
                "\" And I'm gonna focus on basically saying that the way I talk about designing a pitch deck actually works for ideas and lots of other things. And so, the way I make things easy to understand on a pitch deck or a slide is to make it legible, to make it simple, and make it obvious. In today's presentation, we're just gonna focus on making your idea legible. It's gonna sound interesting, right? For clarity. Now, in my essay, I talked about how at demo day, when our startups are presenting to a roomful of 1,000 investors, it's kind of an interesting audience. Number one, the audience is filled with really old people, they tend to not have very good eyesight as a result, they all can't sit in the front row like you lovely people. Some of them have to sit in a way back and stand up. And that means if you create a legible slide, they have to be ones that even old people in the back row with bad eyesight can read. Now, how does that apply to a legible idea? Well, basically, you are designing a slide that democratizes the idea, right? And so people who are blind or people who are ignorant, you're basically designing something for everyone in the room, not just the ones in the first row. So, a legible idea can be understood by people who know nothing about your business. That will make things very clear to the widest possible audience. Now, this is super important because you will talk about your company more than anything else. It is actually the thing that we are really great at Y Combinator. We have our companies constantly practice talking about their startup. Startup School curriculum is designed around helping you constantly practice talking about your startup. And this is because you are going to need a lot of people if you're going to become a billion-dollar company. So, you are trying to find a co-founder, you have to have a way of talking about your company clearly. Whether you're getting users, or investors, or employees, or shareholders, you have to get really good at this. And you have to be able to do it quickly and efficiently. Here are things to avoid that makes things not clear, that makes your idea muddy. The first is ambiguity, right? So, that's like, obviously, the opposite of clear or straightforward. Something's a little abstract, something could be interpreted in two ways. And therefore, it might take a question to understand what you do. Complexity. So, I've a very specific definition of complexity. And so, if you look at the root word, simple and complex come from the same root and having to do with twists or braids. Things that are simple are ones that have one braid and things that are complex have multiple braids. They're intertwined with one another. A simple idea is one idea that does not fold. A complex idea are ideas that are intertwined. So, simplicity means you are not trying to mix a bunch of things in your description. Mystery. So, this is an odd one.",
                "Introduction (Part 3)",
            ],
            [
                "Well, what I mean is anything where it's like, I'm not gonna understand what is going on when you're talking about your company. Jargon is one, obviously, any words that I don't understand, anything that's fake like indefinite pronouns. So, if you just use this, etc., and you don't describe what those nouns are, and then things that you just suggest, but aren't explicit about. And the last is ignorable. And so, what I mean by that is there's some language that we will just ignore. So, in UX design, people will create a sort of blindness to things that they don't wanna look at or they don't find to be of important value. So, for example, ad blindness is a big one that people sort of understand. And the thing is, when you're talking about ideas, there's a way of using language that is also easily ignorable, things that just won't stick in your head. Things like marketing speak. It's probably lots of stuff that you heard about that, MBA speak, where you kind of like, puff yourself up, talk that doesn't give any extra information, and then buzzwords. And so, when you say certain types of words, that as an investor I've heard over and over again or I will equate with zero information or value, then I will ignore them. And the result is parts of your pitch will end up being not even heard by me, and therefore I will not remember them. What you wanna do is be conversational. A great pitch is one where you can tell it to your mom and she gets it. She's proud of you, right? She's not gonna shake her head. And that means it's got to be conversational. And that's really good for word of mouth because we talk in normal conversational speak. We don't talk like an MBA. We don't talk like CEOs all the time. So, it's best to talk conversationally. Again, avoid jargon, words that are only understood or used by your industry. No preamble. We'll have some examples of this. But if you wanna be clear, let's go straight to what you want to talk about. Let's not have a winding path to eventually getting there. And the last one, this one's a big one, it's being reproducible. So, when I hear your idea, can I imagine it in my mind? Can I see what I would have to build to create your company? If I don't have that, then I have no picture in my head about what your company does. And until I have that picture, I can't ask any of the questions that helps me understand, if I'm excited about you or understand other nuances of your business. To make things reproducible, I need to know nouns. I need to have objects that I'm gonna imagine in my head. And there's three types of nouns that I should understand from your startup idea. First one is what are you making? That should be really clear. What is the problem? And then who is the customer? The two are kind of related to the market, right? But I should have these kind of three nouns in my head. So, let's go through some examples. This says, we are going to transform the relationship between individuals and information. This sucks.",
                "Introduction (Part 4)",
            ],
            [
                "The thing is, we see this all the time. Number one, all the nouns that you see down here are abstract. They're ideas. I can't reproduce based off of this, has zero informational value. I still have to ask questions to answer the three nouns that I need to have. This is a bad description for a company. We will see stuff that starts like this, when we ask, \"Describe what your company is gonna make.\" I don't even wanna read it. But basically, it starts talking about the story of the company. Or basically, like, \"In the beginning, there was this problem, and we're gonna go through this issue, right? And then there's these bad guys, and they showed up, but then who's gonna save us? We're finally here to save...\" And you're like, \"I have to read another thousand applications.\" That's not gonna work for me. This is the description on the actual application that Airbnb put to YC. Airbnb is the first online marketplace that lets travelers book rooms with locals, instead of hotels. It's concise, it's descriptive. I understand what they're building, I have a sense for what they're making. And then I can start thinking about my other two ideas of whether I'm excited about it. And then am I gonna like this team? Here's Dropbox. Synchronizes files across your or your team's computers. The thing about this is it's refreshing but also there's no pretense. They aren't playing defense. I see a lot of company descriptions where they're like, \"I'm worried about this, or I've gotten this kind of feedback.\" And so, they give up clarity to make themselves look bigger and blow themselves up or make themselves try to look more interesting. They're trying to protect themselves against something way ahead of time. And the whole problem is usually what ends up doing is it brings me farther away from you, all that padding that you've put on yourself. Here's a description from a company in the current batch. Lumineye is building X-ray vision for soldiers and first responders. We don't have to go deep into the details. I don't need to understand how they exactly do this, etc. This creates a foundation for my curiosity. Now, I will start from here to try to figure out, \"Oh, how do you do this? Is this the right team to do this? How far along are they? Do they have traction? Do they have customers?\" I start going down the route of asking all the right questions based off this one description. This is a good one. There's another one. So, Vahan, in the current batch, is building LinkedIn for the next billion internet users. So, doesn't perfectly connect me to what they're sort of making, but I'm intrigued. I'm excited about someone building the LinkedIn and I know it's some kind of social network for business people. And so, now I'm curious about how. I don't need you to answer how in the description, but I understand what you're doing.",
                "Introduction (Part 5)",
            ],
            [
                "And then, now, I can start making questions in my head about like, how would I evaluate whether this is working or successful or promising or not? Or is this the right team? Do they have a certain amount of traction, etc.? It gets me on the right track. Now, the reason I've used this example is because we have a lot of companies who try to use the X for Y. And what I mean by that is like LinkedIn for whatever or Uber for blank or Airbnb for blank. And so, that X for Y is super useful because it allows you to shortcut business model and some kind of complex behavior, right? And then attach it to some other vertical or something that you're trying to make work. X for Y is okay but most people abuse it or do it incorrectly. So, I'm gonna give you some tips. First, should you use X for Y? Sorry for the legibility. Number one, is X a household name? This should be like a billion-dollar company, right? You can't use your uncle's like pet shoe store as the X for this because people don't know your uncle's pet shoe store and they don't know if it's successful or not, right? So, everyone, as many people should know about this as possible, and for an investor, it should be clear that it's a billion-dollar-company opportunity. Everyone has to agree that it is successful. So, you could have a really big X everyone knows about it but it's infamous, right? So, a lot of people don't think it's successful. So, be careful of that. Does Y want X? So, is it really clear why the target that you're going after wants this kind of model applied to it, this kind of solution applied to it? Whether it's Airbnb for, Airbnb, or Uber for, etc. It should be really clear that that's a segment that's either missing it, it's not being served well by the other one, and also that those people want to have that kind of model. And then third one is Y should be a huge market? So, if you're building X for Y and in the last part doesn't sound like a really big business, that's not gonna work well for you, right? Because what we want, because you're essentially saying that you are something but it's a subset. And what we want to make sure is that subset feels like it could be really, really big. If you choose the subset that sounds like it's going to be really, really small, investors won't be as interested. It means that I'm worried that you will not have enough potential headroom to grow to become a billion-dollar company. So, here's an example that it doesn't work. So, we had a company in the batch that started off by describing themselves as Buffer for Snapchat. Buffer is a nice company, but definitely smaller than Snapchat. So, don't wanna do that. All right, so basic summary for this section. Lead with what not why or how. You don't need all that other stuff, that stuff gets in the way of your clarity for the most part. I read that like 1,000 applications every single batch and it's a really hard thing to do.",
                "Introduction (Part 6)",
            ],
            [
                "Basically, even though it's my job, it's really, really difficult to have that much focus and attention across all these different applications. So, I need some empathy. I need you to help me out. And what we want is that when I bring up your application, and I'm looking at it, let's make our intimate time really pleasurable, right? Let's make the time that I spend on your idea very efficient. I'll just look at it, I'll understand really clearly, I'll move around your application to be like, \"Oh, I'm kind of excited, maybe there's gonna have this.\" And I'll look at that part and I'm like, \"Oh, they do have it, that sounds awesome. Oh, what about this? Oh, that sounds awesome, too.\" What we don't want is me to go like, \"I don't know what they're talking about.\" Then I have to like, go to your website, I'm like, \"I don't know what they're talking about. I don't know how that sort of works.\" I go back to it, I try to figure something else out, I try to see if like some other partner might understand what you're doing, etc. Super inefficient. Where is there going to be room for me to get excited as a result? So, to be efficient, we need to be concise. Concise. The best way, I wanna keep this in mind, is to use some examples. And so, here's some things I need you to keep in mind. Yes, I want you to be concise, use as few words as possible. And what I want you to understand is the concision, it actually gives me secondary information about you as a team. It lets me one, know that you've thought deeply about your idea. Because you've thought so deeply about it and because you've practiced talking about it so much, and you've gotten really good at getting people excited and understand your thing really quickly, you probably figured out how to do it in a short amount of time. So, it lets me know that this is a founder that has thought deeply about the idea. The other thing about being concise, it shows me that you are efficient. And if you're efficient with your words, then you're probably efficient with your thoughts, and that means you're probably also efficient with your actions. And what that means is that I will start to believe that you understand what is most important about your business, you understand and communicate it clearly. And you might actually know how to always figure out the most important part of what to do about your company to make it grow, to make it work, etc. So, there's a minimum stuff that we want to have, even though we're trying to be as concise as possible. Again, I wanna understand the nouns. So, if we're so concise, that I can't understand these, then your concision is too much. The other is, I want to get to this point, when I read the concision or this short version of whatever it is you're talking about, because again, I know there's like 100,000 reasons why your company is great, but when I'm reading your application, I'm only going to maybe remember two to three of them.",
                "Introduction (Part 7)",
            ],
            [
                "And so we have to try to make sure those most important ones come up to the top. This is a real Startup School company description. It's an online ecommerce store. I can picture what it is, but again, it's not a description that helps me get excited about, it doesn't help me lead to all the other things. I have to do now more work to understand why this is fast growing and its potential. I also don't know, based on this, some nouns. I don't know exactly who the customer is. Is it people that are selling stuff too? Are they making an e commerce store for other shop owners? It's ambiguity. IT security services. This is most of the descriptions that we see on Startup School. It makes it really, really hard for us to understand it. A meritocratic decision support system. The thing is, I wanna know for what, for whom, I don't even understand what the problem is that they're solving based off of this. And so, is it because a lot of people have non... Basically, I have to ask so many questions in my head to figure out why did they get to this sort of description. Learn and sharing knowledge about Data Science and Artificial Intelligence. Sounds more like a mission. I can't tell what the product is,\nand how they're sorted and go about it. Like, I couldn't reproduce this. If I had 10 companies build based off this description, you'd have 10 very different products. The only thing that's odd about company descriptions is you guys tend to capitalize and make proper nouns very weird words and phrases. You should not do that. It's not like a magazine title. And it makes me think sometimes you're emphasizing the wrong things. Like you're thinking the data science and artificial intelligence is the thing that's gonna make me excited. And the thing is like, those are the buzzwords, those are the solutions, and it makes me worried that you haven't started with a problem. Let's do an example of like how to adjust a description. So, here's a much longer one. So, our company will make low cost and low power consumption medical devices based on artificial intelligence and IoT suitable for sub-Saharan communities. Now, relatively clear, I could understand it reading it, but it's not the most concise form of this and I feel like there's a lot of things get in the way. And so, when I work with companies to help shrink and reduce and improve their descriptions so that I will get the most out of it. I wanna talk through the process. The first thing I wanna do is figure out what are the nouns in the description? Here we go. Our company, medical devices, for sub-Saharan communities. Oh shit, we're almost done, right? Everything else that gets added on here, whatever verb, adjectives or adverbs you want, you wanna be really careful. You wanna know like, is it giving maximum punch for this? Right? And so, really, the verb is going to be usually just you're making something, etc.",
                "Introduction (Part 8)",
            ],
            [
                "But usually it's going to be whatever the product, like, the verb is like the thing that we're making. If we're thinking about this in an active voice structure, the subject, the verb, and then the object - the customer, the market, the people we're going after. Everything else, if we add anything back to this, I really wanna be really careful about why we're gonna add back to it. Is that gonna be the stuff that makes me excited? So, the artificial intelligence, IoT suitable stuff, that's like how they wanna get to it, the technology, and I'm more worried that they're wanting to use buzzwords to describe it, right? Hopefully, that's like a secret weapon that you have. But I bet it's not the defining characteristics of whether this company is successful or not. And then up here, I see two modifiers for medical devices, low cost, low power consumption. So, low cost, I could definitely see, that's super interesting. If you make a low-cost device in sub-Saharan community, then I'm like, \"Oh, that's interest. That's really interesting.\" Because that's, like, it's hard just to make something, you know, for developing countries, but to make it so that actually affordable for them, that'd be interesting. The low power consumption, I can give or take there, I'd have to know more about the company to know whether that's actually crucial to understanding whether this company has an unfair advantage or not. So, if I was to redo this, we come out to, \"We create affordable medical devices for sub-Saharan Africa.\" Some people are gonna be very squeamish about this. A lot of founders are worried it's like, \"You're putting me in a box, man. It's too reductive. My business is complex, I do a lot of things and a lot of things make me great. I wanna tell you all of them.\" And the thing is, like, you don't have time, and I know it, as an investor. There is no investor that thinks any business is like simple and easy. I just don't think that from the default, so you shouldn't be worried that I'm going to think something small of that. And again, you wanna be careful of the defense on here. Once I get to this, then I'll start asking the other questions. It creates that foundation for curiosity. All right, I'm pretty much here at the end. The best way to help me, and I would love for you to help me, is to be clear and concise. Thank you very much. All right, so we'll do a couple of questions about this presentation. And then I'll have Adora join me and then we'll answer questions about anything. Right here. Man 1: Thanks for the presentation, Kevin. You talked a lot about what is presenting an application but you also hear a lot of pitches, especially in demo day.",
                "Introduction (Part 9)",
            ],
            [
                "And what, in your opinion, are the killer tips to make a great pitch and get people to like you in a demo day? Kevin: So, he's asking about, like, I talked a lot about here about writing an idea for the application, how's that might be different for companies who are pitching or presenting investors on like a demo day? What are things that we look for? And so, I talked about in that essay that I wrote how to pitch, how to design a pitch deck and talk about like how to present the ideas. The main thing to keep in mind is that at... So let me describe the situation. So, demo day at Y Combinator, it's like 1,000 people in the room, and you have two minutes to talk about your company and show what you've built to get them excited. And then there's gonna be 200 other companies that will do the same thing on the stage. It's an extremely hard problem. And so, in two minutes, what do you get across? How do we get it so that in two minutes, a company on average will then raise $1.5 million after demo day? And the thing to keep in mind is that, yes, there's 100 reasons why your company is great. You cannot say all of them in two minutes, you can't say them in a short conversation when you're meeting a bunch of investors inside of the room. There's like maybe five to six points that are really, really great about your company, maybe the investor will remember one or two of them. One of them has to be remembering what you do. And so, the goal of you being on stage is not to say all the things that's great about your company, it is to get people to want to have a conversation with you, to say, like, \"I can't ignore having a conversation with that person.\" That's what a great pitch does. And what that means is, you don't make the slides be the thing that they remember. You wanna make yourself. It's about your presence, the way you talk, how confident you are, etc. Basically, do you present yourself in a way that people go, \"I wanna interact with you.\"? And so, the presentation is more about making the founders look formidable and impressive to use a language that everyone understands and is clear, but feels inevitable. And so, the goal is not to do all this fancy stuff. It is to do very simple fundamentals and talk about them in a way so that everyone will understand. Right there. Man 2: I applied a couple of times and the one question that's always the bane of my existence is the, \"What's the surprising or amusing thing that you've noticed about the world?\" Could you provide some clarity in terms of what you're looking for there? Is it something about the business or is it like something witty? Like, I just spend way too much time on that question. Kevin: So, we have a question on the application to YC that is about explain what you... Man 2: It's like, what's something surprising or amusing that you like to...? Kevin: Yeah. So, share something surprising, amusing that you've noticed about the world. And he's saying I'm having a hard time with the question.",
                "Introduction (Part 10)",
            ],
            [
                "And so, any tips about that? So, again, we at YC, we don't really judge ideas. I talked a lot about how to present your idea. But the idea is a reflection of how you think. So, everything that we have in the application is to try to understand more about the team and the people who are behind the company. So, a question like that is very obvious. It lets us know, how do you think about stuff? What do you find interesting or amusing? Because part of it is that YC is optimized to spend time with lots of people every single week for dinner. And I want to spend time with people I like, people who are not assholes, and are kind of interesting. Right? And so that kind of question, it's a basically a dating question, to letting me know, it's like, \"Oh, I wanna buy this guy dinner.\" Right here. Man 3: In my example, it's a very specific financial problem that I'm trying to attack. So, should I work on trying to make that very complex in very specific problem, something that anyone understands? Or should I talk to the right people that understand that type of problem? Kevin: Gotcha. So, the question is he's working on a very complex FinTech solution or app. And he's wondering, it's like, how do I balance this talking to the right people so I can use jargon and who understand the complexity versus making a version of the idea that everybody can sort of understand? The answer is you have to do both. So, everyone that you're talking to at industry, your users, customers, or your business partners, you get a shortcut with them. And that's most of the people you're gonna interact with. And the thing to know about that is you need to have that developed, right? That customer or business partner speech so that you're efficient and talking with them. The thing is, you also have this other one, if you're interested in outside investment, having the press want to talk about you, etc. You need to have a good storytelling narrative for non-experts. So, really, it is not one or the other is how you have to do both. And the thing is for FinTech people, because there's so much around all these other people who just understand this stuff, they rarely practice the other thing, because they just assume it's always going to be like that. But when they come to YC, it's the first time they want money from investors who might not know about their space or they wanna talk to press who's not gonna understand what they're doing, etc. Right here, sitting down. Woman: How do the best, most memorable applications make you feel? Kevin: So, how do the best, most memorable applications make me feel? Probably the best ones. Make me go like, \"Fuck. I wanna join their company.\" That's like the best ones, right? It's like, \"Man, these guys seem really cool, they're super smart. I feel like I'll learn a lot of stuff from them. Man, how do I get on their bandwagon?\" Right. Like, I'm thinking about quitting YC. So, would be, like, the best ones possible.",
                "Introduction (Part 11)",
            ],
            [
                "In the second tier, it's really just like, I'm energized. Because when I'm reading tons of applications, I just don't understand what's going on or I feel like people wasted a lot of time on the wrong stuff. I'm just getting frustrated. Like, when I hit an application where all of a sudden it goes like, \"Oh, it's a breath of fresh air.\" And I like, \"I wanna spend time with them, I wanna ask them a bunch of questions, I get very curious and then I like want to jump around the room.\" I'm a very active guy. So, like, think if like Adora got excited. She'd like drink a glass of water something like that. But really, the best ones are the ones that makes us wish we had done the company or that we would join them. That's the best. Right here. Man 4: Why or the how are very important for the idea, how can you include them? Kevin: How can I what? Man 4: Include them? Kevin: Oh, okay, yeah. So, I talked a lot about focusing on the what and then kind of avoid the how and the why, but they might be really important. How do I include them? You will not include them in the description. They will be included elsewhere. So, there's questions on the application that asked you about how are you gonna get your users, what is an insight that you understand about the business no one else does, how you came across this, etc. So, there's opportunities elsewhere. One thing to keep in mind is, I would highly recommend trying to keep your answers within one to two paragraphs at the most. That makes it for an application that's very skimmable by me. So, the whole thing is the how and why is important, but you can't just say it all at once. Like, sometimes you'd like to talk to someone and they're telling you a story, but they're trying to tell everything about everything all at once. And it feels like he's not giving you time to breathe or think. You wanna sort of avoid that context. Right over there, enthusiastic curly hair. Man 5: How do you know a company is on the right track to getting product-market fit? Kevin: How? That sounds like a together question, but I'll answer it. So, how do you know if a company's on the right path to product-market fit? So, if you have to ask a question, do I have product-market fit? The answer is probably no, you probably don't. Right? But if you're so busy, and you're frightened that the company is gonna fall apart, because you have so many customers coming in asking stuff for you, you're just figuring out how do I hire? How do I serve everyone that wants to come to me? You're too busy to ask that question because you're just making money hand over fist, that's product-market fit, you're on the right path. The whole thing is it feels like something else, changes in the company. It feels like you're out of control. So, if you are in control of your company, you feel like you can relax and you're sleeping well, you're not on the right track. Very few companies ever experience this. Far back . Man 6: Okay.",
                "Introduction (Part 12)",
            ],
            [
                "Well, if you can talk about your experience doing this because right now, you're on the other side of the stories, but you can go back to when you were applying to Y Combinator on and making this exciting? Kevin: So I tell a small anecdote about when I applied to YC, and about how this sort of applies. When I applied to Y Combinator, I was really bad at describing what our company does. So, we actually had pitched two different ideas. They told us to prepare for both and when we got into the interview, one of the ideas they immediately said, not interested. And the other idea we needed a pivoting in the middle of the interview. And so, the way I had described the company, in the beginning, was I said, \"We are building a content management system that has a concept called reversible forms that allows you to both put data input in from the back end, and also collect data from users on the front end.\" That's a horrible description of a company. And part of that idea that fed that is like, I wanted to be a content management system because what was hot at the time, it was buzz, where it was movable type in WordPress. We wanted to build software like that and we wanted to build a new version of this. And then I added, not even normal jargon, I made up jargon that I put into my description and I pitched it. And Paul Graham was just like, \"Oh, no, what are you talking about?\" But he was like, \"I think you're building a Form Builder.\" And then we were like, \"No, no.\" We looked at everyone in that space, they suck, they're really bad. We don't like what they're making, we don't want to be there. Not realizing that was the opportunity. Everyone was really bad there but their businesses still succeeded. And so, that's like the clear example of this from like the other side. And so, I actually spent a lot of times, like, Adora and I spent a lot of time fixing, mentally in our heads, what you guys are making or doing. And so, actually after we're reading applications, a lot of times, partners have to basically redescribe or repitch back what you're making, so that way they can understand why they're gonna get excited. I'm gonna do one more question and then we're gonna do combo, right here. Man 7: So, hello. So, how do you tell an idea that has multiple stages? For instance, if you want to become Z, but before that you need to do X and Y. Kevin: So, how do you tell and describe an idea that has multiple stages, like you have to do part one, before you can do part two and three. I would focus only on describing what part one is and then later on, you talk about what are the other phases that are important. Now, oftentimes, when I hear something like that, a YC partner will immediately have like an alarm go in their head, and they really are going to push you on. Why do we really have to do part one? I'm gonna push so hard and why can't we go straight to part three. Because what you're basically saying is like...",
                "Introduction (Part 13)",
            ],
            [
                "it sounds almost like a defense instead of you saying your strategy. It sounds like it's like, \"Hey, I'm gonna talk about what my company's doing but I'm worried that you're gonna think it's really small. So, don't worry, we're gonna do parts two and three, they're gonna be even bigger.\" And the thing is, that's a really weak pitch, doesn't sound very confident, etc. Now, what you wanna avoid is saying, like, \"We're doing number three...\" What you could do is if we're doing number three and we're starting with number one, but that has to be very efficient. That number three is very quickly can be said and that number one makes it sense. So it's like, I wanna build automated market...I just met a Colombian company today and they wanna make automated marketing software for WhatsApp, for small, medium businesses. And they're starting with hair salons, right. And then they're gonna move on to all the other industries that need help with them. All right. Thank you very much. I'm gonna invite Adora to come on.",
                "Introduction (Part 14)",
            ],
        ],
        "description": "In this lecture, YC Partner Kevin Hale goes over how to package up your idea and communicate it to an investor. He shares his tips on how to craft your pitch in a clear and concise way that effectively grabs your audience's attention.",
        "fetching_transcript": False,
        "title": "How to Pitch Your Startup",
        "url": "https://www.ycombinator.com/library/6q-how-to-pitch-your-startup",
        "youtube_id": "17XZGUX_9iM",
    },
    {
        "content": [
            [
                "i think this is image founders have of\nthe launch which is it's going to be\nlike the launch and it's going to be\nlike the oscar ceremony or something\nwhere there's just going to be like\nhordes of people and like and like\nyou're going to be treated like a\ncelebrity and so like you don't want to\nturn up to the oscars in like your\nscruffy like top and bottoms right like\nyou want to like you want to spend some\ntime getting in shape you want to be\nlooking good like it's just this whole\nthing\n[Music]\nhi this is michael with harj and brad\nand welcome to the partner lounge\nso as yc partners we find ourselves\nrepeating the same seemingly obvious\nadvice to startup founders over and over\nagain before covid we'd often gather\ntogether in the partner lounge at the yc\noffice to try to figure out why this was\nthe case and how we could help startups\nfigure it out faster now that we're in\nthe remote world we're going to do this\nin front of all of you\nso\nthe first topic we talked about today in\nthe partner lounge is\nwhy don't startups like to launch early\nand move quickly\nhard to be honest\nthis is painfully obvious advice right\nthis is you know yc paul graham 101 like\nno one applies to yc not knowing this is\nwhat we're going to tell them right so\nwhat do you think is going on why why do\nyou think people are getting screwed up\nhere\na bunch of reasons the first one that\nsprings to my mind is\nyou have to know what fast is to move\nfast\num\nand i i think one of the\nthings we get to see as partners is\nacross hundreds of companies and\nfounders the different speeds they can\nmove at and honestly i remember when i\nfirst started working at yc it surprised\nme right like i thought my startup we\nwere moving as fast as we could and then\nyou see some of the top companies you're\nlike wow\nhow do you get so much done in a week um\nand so i think there's that effect i\nthink maybe a specific version of that\nis if you've only ever worked at a big\ncompany\nlike you might think you're moving fast\nbecause you're moving big company fast\num\nbut like start up fast as a whole other\nball game\nfast means you have to be a little bit\nuncomfortable what's going out there you\nknow you were talking about instacart\nbefore what are you what how dirty did\ninstacart look back in the day when when\nyou saw them go through yc i mean pretty\nthere's the classic story with instacart\nwhich is we interviewed them and they um\ndid a demo of the product where they\nlike\nclicked to order beer and beer turned up\num\npretty quickly and i think it actually\nturned out it was like arpuva's friend\nor someone just drove to the store\nto like there was no back end right like\nand so that kind of continued during yc2\nfrom what i remember it wasn't like they\nhad they didn't spend a year building a\nsophisticated fulfillment center with\ncomplex algorithms to\nyou know\noptimize delivery times pretty sure they\njust had like the founders and maybe\nsome people off craigslist driving to\nthe grocery store to pick up groceries\npretty dirty li",
                "Introduction (Part 1)",
            ],
            [
                "ke i think it was a good\nui but they the the product was um very\nmuch hacked together\nwhat's funny because brexit was almost\nthe exact opposite like when they come\nin to tell their story at their batch\nthere was no ui like they could give you\na virtual credit card and like it worked\nbut that was it you couldn't see what\nyou spent money on you couldn't see how\nmuch money you spent you couldn't\nall they knew was that you had a card\nand it worked one of the things though\nthat i think is going on\nand you brought this up a little bit\nhard is that like founders will lie to\nthemselves they will think i'm the\nexception\ni know the advice is good in general\ni've heard all these great examples but\nlike we are different brad you were\ntalking a little bit about like\nthe idea that maybe i could\nmaybe i can do a perfect launch so how\ndo you think founders think about their\nperfect launch and why they maybe can't\nmove fast\nwell i think the minute anyone starts\nmaking something they start thinking\nabout\nthe moment when they show it to people\nand what they want the reaction to look\nlike and sound like and feel like\nand yet they also know that there's a\nchance that it won't be like that\nand it will be crushing\nand devastating\nand so i think every founder no matter\nwhat they're working on has this like\nparallel\nuniverse in the back of their mind of\nwhat the reaction is going to be to\ntheir product\nand when they let that parallel universe\nkind of win out\nover the reality that they need to get\nit in front of people faster and not\nworry about that it can slow them down\nbecause they start optimizing for this\nthing that is just living in their head\nand it's not real at all i think this is\nimage founders have of the launch which\nis it's going to be like the launch and\nit's gonna be like the oscar ceremony or\nsomething where there's just gonna be\nlike hordes of people\nlike and like you're gonna be treated\nlike a celebrity and so like you don't\nwanna turn up to the oscars in like your\nscruffy like top and bottoms right like\nyou want to like you want to spend some\ntime getting in shape you want to be\nlooking good like it's just this whole\nthing like the reality is like often no\none cares\nlike you launch\nthere's no one there\nwell\nthe way you talk about it has a fallacy\nbaked into it the launch yeah right\nright that it's that it's a singular\nthing there's the launch of the product\nand that's just not the case you launch\nover and over and over again and it's\nnot a precious thing\nthe goal here is to get people excited\nabout what you're working on and show it\nto the world and you might have to show\nyour thing to the world more than once\nbefore they get it and like that's okay\nlike who cares you know like um brad you\nwere talking about like what's the worst\ncase scenario like what how do you like\nhow do you think about that like what do\nyou think founders are afraid of like\nwhat do you think is like their worst\nvision of a launch\nso i think they're afraid that people\nwill think th",
                "Introduction (Part 2)",
            ],
            [
                "eir product is ugly or that\nit doesn't work well or that\nthey will notice immediately the thing\nthat the founders don't like about the\nproduct and confirm their worries\nthey're afraid that\na competitor will hear about the product\nthey're afraid that um investors will\nhear about the product\nbefore it's ready\nthey're afraid of all these things but\nthen when you actually think about them\nfor more than two seconds you realize\nthat if you play out the worst possible\nthing that could happen after each of\nthose occurrences\nit's fine\none of the fun kind of mental\ngymnastics moves that we see people do\nis this like oh i did launch\nwe have a wait list of 3 000 people\nwe're ready to use the product or like\ndoes it like what are you talk brad what\nare you talking about we've already\nlaunched right like\nand then and then when we say oh great\num let's open up the wait list now\nwhere's the button let's push the button\nno no no\num yeah i think there's a whole um a\nwhole set of contortions\nthat certain types of founders have\nfigured out how to tie themselves up in\nso that they can feel like they're\nlaunching they can talk like they're\nlaunching but they're not actually\nputting a thing in front of people to\nuse just yet a waitlist is just a form\nand you're not really getting product\nfeedback from that experience you know\nit was funny because one of the best\nexamples i'm remembering from back in\nthe day at yc was a company named magic\nand when they came up with the idea of\nmagic they launched two days later\nand it was just a website with a phone\nnumber and it just said text us and\nwe'll do whatever you like\nand like\nto me like that's the right spirit right\nlike they understood that they didn't\nreally know what was going on yet so\nlike let's just get this thing out there\nand we'll start learning live versus\nversus waiting\num\ni do want to play devil's advocate\nthough right like there are these\nexamples of companies that founders will\nthrow in our face right we'll give this\nadvice they'll be like\nharj and brad you all are idiots\nremember dropbox remember ripling\nremember a stripe like they didn't all\nlaunch publicly in the first three days\nof coming about\nwhich one of you wants to kind of tackle\nthis one like what what is our what what\nis our answer to the uh to the pushback\nhere\nyeah like there are there are exceptions\nyou mentioned good ones i take one at a\ntime there like i take rippling right so\ni think that i when rippling was going\nthrough yc\nthey took close to like a year and a\nhalf\nor more maybe it was two years to sort\nof officially launch um\nand it turned out to be right actually\nthe company is like doing tremendously\nwell and i think my analysis on that\nis\nyou in that case you had a founder who\nwas building a product he'd already\nbuilt for his last startups an unusual\ncase right i mean like and he'd have\ntons of users um like zenefit was like a\nbig startup growing really quickly and\nthen on top of that like\nhis benefit itself was a customer of\nzenefit like",
                "Introduction (Part 3)",
            ],
            [
                "and so i think with parker\nyou got this like incredibly unusual\ndeep level of\nproduct insight and domain expertise and\nso he was actually the example of where\nhe could come up in his head\nwith here's what the product needs to be\nit needs to actually be like a lot of\nproduct it's going to take us like some\ntime to build this amount of product and\nwe're only makes sense to launch like\nthe mvp was robust um\nand he could trust his instincts right\nbecause he had this unusual depth of\nexperience with what to build\nbut brad how rare is that how often are\nwe\ninteracting with founders\nwho have used and built a massive\nproduct doing the thing they're already\ndoing before they decide to do that\nagain\nit's pretty rare it doesn't happen that\noften\nand it's not always a fun office hour\nbecause you don't want to say\nyou're you're not parker right\nyou don't want to throw it in their face\nto that extent the thing that i think is\nreally great about the rippling example\nis that the first time he built the\nproduct with zenefits he did not spend a\nyear and a half\nin fact he's one of the i think the\ngreatest examples of what we were\ntalking about earlier i remember when i\nwas working on my company in san\nfrancisco he emailed me out of the blue\nwhile he was in the batch\nsaid i'm working on this new benefits\nthing i'd love to come to your office\nand show it to you and so\nmy company is building this ad tool we\nspent a year polishing the ui and making\nit all great and he shows up with this\num with this hr software that was\nbeautiful\nit was it had it was feature rich it had\neverything you could possibly need it\nand blew me away\nand i thought how the heck did this guy\nbuild this so quickly this is incredible\nand what i didn't know was that it was a\nbunch of forms and there was not a back\nend at the time\nand so\nthat first time when he was not the\nexpert\nin what the product needs to do didn't\nhave that knowledge that's the strategy\nthat he took\nand then the second time after he'd\nalready built this he was able that he'd\nearned the right\nto do the big build and make it that way\ni think this is like the common trap\nthat founders have is that like they\nknow five percent of the story and they\ndon't know the other 95 percent of the\nstory so\nthat's another kind of thing that i\nthink people need to dig in a little bit\nto when they think of these exceptions\nlike\nhow can they be rigorous about making\nsure they're\nthey know what really happened\none of the things i love to encourage\nfounders to do is to go back to\num something like github and go to the\nblog and go to the beginning\nof the blog\nyou know 10 years ago or whenever and\nand look at the screenshots from then\nlook at the feature announcements from\nthem and just try to internalize\nthat the the stakes were lower the\nfeatures were simpler the feature set\nwas simpler and they were just getting\non the board and it wasn't this huge\ngargantuan product that you think of now\nso if we're gonna wrap up here\nif the if you're uh\nearly stage",
                "Introduction (Part 4)",
            ],
            [
                "founder listening to this\nand you are a parker conrad you've\nalready built a billion dollar company\ndoing this exact same thing before and\nnow you know exactly how to do it right\nyou should ignore all the advice we gave\nin this talk\nif you're not\nthen kind of what harj and brad were\nsaying beginning you already know\nlaunching fast and moving fast is the\nright thing to do so just do it right\njust just do it right at the end of the\nday\nyou choose every day you decide not to\nlaunch you choose every day you decide\nto go at 10 miles an hour versus 100\nmiles an hour\nmaybe today you should choose\ndifferently\nall right thanks brad thanks harj thanks\nguys\nthank you\n[Music]\nyou",
                "Introduction (Part 5)",
            ],
        ],
        "description": "Step inside the group partners' lounge to hear Y Combinator Partners Harj Taggar, Michael Seibel and Brad Flora discuss how startups should approach launching and the exceptions to the rules.",
        "fetching_transcript": True,
        "title": "Inside the Group Partner Lounge: When to launch your startup",
        "url": "https://www.ycombinator.com/library/J0-inside-the-group-partner-lounge-when-to-launch-your-startup",
        "youtube_id": "f0tPjcgcwnQ",
    },
    {
        "content": [
            [
                "Picture this, it's 2010, and me and my co-founder are pitching on Sand Hill Road. We're sitting in the offices of Andreessen Horowitz, pitching Marc Andreessen, and Ben Horowitz. We thought it was going fun, just like the others. Ben turns to us and asks, \"Who's the CEO?\" I looked at my co-founder Sachin, he looked at me, we said both. (loud blast) And again, guess what? It was the wrong answer. The meeting might as well have ended at that moment. Let me walk you through this mistake, so you don't have to make it yourself. And along the way, we'll talk about why we made that mistake and what it means to be CEO. Are you ready? Let's get started. (lively music) The most legendary duo that can and did pull off saying both to the co-CEO question, is Larry Page and Sergei Brin. The founders of Google. You could say that we thought we could be just like that dynamic duo. What was good enough for Google surely could be good enough for us, right? Whoa, Whoa, no. Look, we had a good hockey stick graph. We had software we had software we had built that we were proud of. Look, most people are not Google at their series A, I know we weren't. The funnier thing about this whole thing is that Ben Horowitz actually wrote a long formal article about this in 2013.",
                None,
            ],
            [
                "He said, \"Shared command always seems really attractive to the people at the top of the organization, like the CEO and the board. We have two world-class people. This gives us the best of both worlds. We shouldn't get caught up in the conventions of years past.",
                None,
            ],
            [
                "We're all adults, we can get along. It looks much less attractive to those who do all the work in the organization. To them it looks like frustration, chaos, and delay.\" That's the real reason why co-CEO doesn't work. It's bad for founders and bad for everyone else. Everything takes longer. So you have a hard decision to make. You have two co-CEOs. You have to wait for the co-CEOs to agree. That makes every decision you have to make much longer. It becomes life or death at that point. You slow down so much, that your startup will die. (wind blowing) Back to sitting in that Andreessen Horowitz conference room. It was 2010. How did I find myself in this position? We didn't know who the CEO was yet, and yet we were here talking to venture capitalists about raising millions of dollars. (deep sigh) Look, I didn't think being CEO mattered. And later I discussed it with my co-founder after our series A and he became the CEO. And if I'm being honest with you, I regret that. I learned, you may not be interested in authority, but authority is interested in you. Look, when you're talking about who's CEO or when you're trying to divide the pie, there are moments when you and your co-founders are aligned, and there are moments when you aren't. Moments where you have to divide the pie are the latter. And the best you can do is make sure that you self-advocate.",
                None,
            ],
            [
                "Try to think through what you need. I'm absolutely glad I worked on Posterous and I'm glad I did it with my co-founder at that time. But, it took me too long in my career to realize, actually I needed to be CEO. And I needed to be CEO for the same reason I wanted to be a founder. If it was broken, I needed to be able to fix it. If things are broken, are you okay with someone else being in charge of fixing it? If you're going to be incredibly frustrated that you don't have the authority and can't fix it, then maybe you do need to be CEO. And that's the thing I wish I could have told myself at that moment. I didn't know myself well enough. And it took 20 years of my career to realize it. Don't make my mistake here. Look, it doesn't have to be an ego thing. It's just something that you need in your life. It's okay to need that. It's okay to need agency. (soft music) And that was one of the big things I made a mistake on. I actually really wanted to keep coding. I had to decide whether I wanted to be CEO or if I could keep designing and writing code and shipping product.",
                None,
            ],
            [
                "Writing code and shipping product, those felt really good to me. In the moment, I chose sticking with the things that made me feel good. One of the things that did give me pause that you should consider if you're thinking about becoming CEO is actually, it's very different from being an individual contributor or director manager of a particular part of the product. It becomes extremely important, right after product market fit. Early on, it's all hands on deck, get a product or service off the ground. Later there are a few things that only the CEO can do. And you've got to ask yourself, are you willing to drop everything else just to do this? Can you convince people to follow you? Can you hire, can you manage, can you fundraise and manage investors? Can you drive the vision of the company? Most importantly, can you be the magic that brings all of those things together, to build a great product or service. Being CEO is a very specific skillset. And unless you are signing up to do those things, and do them to the best of your ability, don't. Being CEO is not for everyone. But if you want to be CEO, those are the things you need to do. The other jobs are incredibly important too, but this role is a singular one.",
                None,
            ],
            [
                "(soft music) Every situation is very different. For some of you watching right now, you may never want to be CEO, and that's fine. For others, you may love doing another thing, but you may need to become CEO to steer the ship. And for some of you, you knew the day you quit your job, that you absolutely have to get that authority.",
                None,
            ],
            [
                "Only you can decide for yourself. Don't make my mistakes, don't delude yourself about whether or not you should be CEO. If you know, you know. Then, it's on you to acquire the skills, and manifest it. I know you can do it. (soft music) Thanks for watching my channel. It's been growing really quickly. And I just appreciate all of you spending so much time learning how to create new businesses, and maybe a startup. If you like this video, please click subscribe, and the bell icon to get notifications for all my next posts. I'm trying to post every week, by day, I'm actually a venture capitalist trying to fund the next billion dollar startup. We've actually been able to do that for companies that you've heard of like Instacart, Coinbase, and Flexport. I just want this place to be a good place where you can come for, the real lessons. The stuff that actually matters. (lively music)",
                None,
            ],
        ],
        "description": "We were pitching A16z, with Marc Andreessen and Ben Horowitz. They asked us who was CEO. We said both. It was the wrong answer.",
        "fetching_transcript": True,
        "title": "Garry's Channel: Should you be the CEO?",
        "url": "https://www.ycombinator.com/library/Jq-garry-s-channel-should-you-be-the-ceo",
        "youtube_id": "Xa6zsbXGQ5M",
    },
    {
        "content": [
            [
                "Hi, I'm Harj Taggar, and I'm partner at Y Combinator. And today I'm going to be talking about what I think is arguably the most important part of starting a company, which is finding the right co-founder. So let's start by talking about why should you have a co-founder at all. Well, I think there's three main reasons you really want a co-founder when you're starting a company. The first is productivity, you can get a lot more work done if you have someone to divide the work up with. And you can get much better work done if you have a co-founder who maybe has complementary skills, so they can do things that you can't. And there's someone you enjoy discussing ideas with. So you can brainstorm and come up with better ideas than you could alone, or have someone to talk you out of potentially bad ideas. So you get a lot of uplift in just the amount and quality of work you can do with a co-founder. The second reason is moral support. Startups are an incredibly intense and taxing journey. And it's great to have someone you can lean on for support during the tough times. And what I've noticed about the best co-founder relationships is they have this dynamic where both co-founders kind of balance each other out. So if one founder is having a bad day, they're feeling a little down, despondent, and they've become a little pessimistic and feel like the startup is about to die, the other co-founder can just help bring them up a little bit, and keep them going and keep them motivated. And vice versa. Sometimes you get too carried away, you sign a customer and you think you're guaranteed the IPO. And you can use someone to just ground you and bring you back to reality a little bit. And so that's where I kind of find the best co-founding relationships can help kind of even out some of the highs and lows of the emotional rollercoaster that is a startup. And while you can get sort of productivity increased by hiring people or bringing your own contractors, you don't get that same emotional support that you do from a co-founder. Because ultimately, anyone who's working for you, you're the boss, and they're not as invested in the success of the startup as you are. And you can't really be as open or honest with them about the company as you can be with a peer. And that's what you get from a co-founder. The final reason I'd say to have a co-founder is pattern matching to success. If you look at a list of the most successful startups in history, think of Apple, Facebook, Google, Microsoft, they all had co-founders when they started. And now I think sometimes people forget this point. Because when you think of these great iconic companies, you associate them with a single person, usually the CEO, who's over time risen to become prominent, famous and a bit of celebrities.",
                "Introduction (Part 1)",
            ],
            [
                "You know, when you think of Apple, you think of Steve Jobs, when you think of Microsoft, Bill Gates, and when you think of Facebook, Mark Zuckerberg, right? I think it's completely True that over time, and we're talking at this point decades, because that's how long successful startups are around for, over that time period, it's pretty common for one person to kind of really drive the company become the figurehead for it and stick out that company for a long period of time. And that's why we remember those people. But we're talking about the earliest stages of starting a company. And in those days, all of these founders had co-founders that they lent on for all the reasons I just mentioned. So I think it's always important to remember that when you're starting a company, and wondering whether you should have a co-founder or not. Okay, so hopefully, I've convinced you that you really do want a co-founder when you're starting a company. But what if you're really keen to get started in a company right now, and you don't have a co-founder that immediately available, or someone that you can bring on board? Should you wait to get a great co-founder before you start a company? Or should you just go ahead and get started? Well, I think the default answer is that you should wait because of all the reasons I just mentioned, all the benefits that you get from having a co-founder. But Y Combinator has funded single founders, and we have done so successfully. So I've noticed that there are some exceptions to this rule and they tend to follow a particular pattern. And that pattern is that the single founders, those who start company by themselves, has sort of two things that are True. So one is they have an idea that they have incredibly high conviction about either because they're solving a personal problem for themselves. So there really no solution is necessary. Or they're a domain expert, they're working in a field where they know for sure the sort of technology that's missing, where the customers might be. So there's all of that because they have such conviction in the idea that they don't need a co-founder to convince them that this is a good idea to get started on. They're ready to go. The second condition is that those single founders, they are able to make progress on that idea without a co-founder, in the short time at least. And that almost always means that they're technical, or at least technical enough to be able to build the first version of the product so they can show it to potential investors, or maybe even to potential co-founders who may want to join the company. And that second point is something I've noticed that the best single founders are also able to do is not only are they tremendously productive in building product and talking to users themselves, they're also able to run a great background search for co-founders and keep their eyes open. And if the opportunity arises, bring on a great co-founder.",
                "Introduction (Part 2)",
            ],
            [
                "And I think the best example I can think of here would be Drew Houston of Dropbox. So Drew applied Y Combinator way, way back now, in 2007. He had a really solid idea for building Dropbox, because he'd already felt the pain of losing his own files. So he knew for sure, there was a better solution to build. But he didn't have a co-founder. And so Paul Graham, the Y Combinator founder, messaged him back saying, \"We love your application, you're great, the idea's great, but we really won't fund you without a co-founder. So come back to us when we have one.\" And Drew kind of went away, continued building the Dropbox prototype, while also looking for co-founders and found Arasha, who would be later the Dropbox CTO and his co-founder. And he applied again, and [inaudible 00:06:34] And now Dropbox is obviously a tremendously successful company. So that's kind of what I'd ask you to bear in mind is, if you're really keen to get a startup right now, but you don't have a co-founder, ask yourself like, do you have absolute high conviction in this idea, you know sure that this is the idea that we want to work on? There's no other ideas that you'd be open to? And can you really make progress without having a co-founder? And if those things are True, sure. Go ahead and give it a shot. But if not, I'd really suggest you wait until you do have a co-founder to start a company. So when you're thinking about bringing on a co-founder, what should you be looking for in them? Well, I actually think the single most important thing to know about someone before you start a company with them is how do they handle stress. Sort of second most important is how well are they going to help you handle stress. And the reason I say that is startups are very incredibly stressful, intense experience, as I mentioned before. And a great co-founder should be able to support you through those and help you through those. Because if you're determined and motivated, enjoy working together, you'll keep working on this startup for a long period of time. And that's usually what it takes to build a really successful company. So you really don't want to start a company with someone that you don't know particularly well. Because even if you've spent time with them in social events, or you hung out together a little bit, you don't really have insight into how they're going to respond to pressure and stress. And are they someone that's going to stick around when things are tough? And are they someone that's going to help you want to stick around when things are tough? So the best people to start companies with are always people that you've got some sort of personal experiences, where you kind of know the character and how they're going to respond to those tough situations. And that usually means there's someone, a close friend, or someone that you've worked with, under stressful conditions.",
                "Introduction (Part 3)",
            ],
            [
                "So I'd certainly recommend that you be on the lookout and think about that when you're considering co-founders. The second thing I think you really want to look for is understanding the goals and values someone has for starting a company or wanting to do a startup. And honestly, I think when I was younger, I used to think of some goals and values as being sort of fuzzy terms. I didn't need them too much. But over time, I realized, really what they mean is understanding the motivations someone has for doing what they do. And in this context, I think it's really important to talk with someone, even if you know them very well, about why they want to do a startup, what are they hoping for? And the kinds of things that can come out are avoiding conflicting goals, right. So for example, let's say that you really want to build a high-growth, high-intensity, high-risk startup and you want to push forward, you want to raise venture capital, you want to hire a bunch of people, you want to just really go for it. And your goal is to take the company public and you're okay kind of taking lots of risks along the way to get that. That's a totally fine set of motivations, it's a very common set of motivations for startup founders. But let's say your co-founder prefers to take kind of a slow and steady approach. Maybe they're more motivated by building great software for a small group of people. And they will be totally fine if you just made enough revenue to pay yourselves good salaries and just grew a little bit every year. That's also a completely fine set of motivations for wanting to start a company. But the two motivations there aren't compatible with each other and they'll lead to inevitable conflict. So what I'd suggest is make sure that you have this conversation. And it's not a perfect predictor, because people's goals and ambitions for a startup change over time. I've seen people start companies because, honestly, they just wanted to get rich. And their hope was that they would be able to sell the company in two to three years for a good amount to a bigger company. But they got two to three years into the company, and they loved it so much, they got so excited by the challenge that they kept working on it, and they're still working on it a decade later. So that's totally fine. I'm not saying that having this conversation means you're gonna know for sure whether your goals and values are aligned over the next decade, which is how long it usually takes if a startup is successful, but at least having the conversation gives you a better chance of finding a co-founder who you're aligned with around a high level important stuff. Now, as you're probably wondering, I'm talking about what you should look for in co-founders, and I haven't mentioned the obvious thing, which is, what skills do they have. So it's obviously really important to have a co-founder who has the right sort of skills to help you grow the company.",
                "Introduction (Part 4)",
            ],
            [
                "And usually that means someone who's got complementary set of skills to you, right? So if you're really great at sales, talking to users, getting customers, ideally, you'd have a co-founder who's really great at building product, and writing code, and building software, because the two of you can divide and conquer and get a lot done. Why do you think that's really important? I don't think it's one you should overly fixate it. All right. So more important than anything is just working with someone that you like working with and you trust. And so if sort of the person best fits that description doesn't necessarily have the perfect set of complementary skills, tools, I think that's fine, you should still bring them on as a co-founder. And then you can start hiring people as you need, and make enough progress in the company to get investment, you can hire people to kind of fill in the skills gaps, and that's okay. Another point I'd just make on this is, when you are trying to see if someone's got complementary skills to you, don't go too much into the details of how well do their skills map onto this specific idea you're working on right now. So a common example of this we see sometimes is someone's considering bringing on a technical co-founder. And they want to build an iPhone app. But the co-founder, even though they know them, they trust them, they've worked with him before, that co-founder isn't necessarily an iPhone app developer, they haven't built iPhone apps in the past. That's not a reason to rule someone out as a co-founder, right. What does matter is that they're willing to learn what they need to learn. So if they're not an iPhone developer, they're willing to learn how to do that. And particularly, they're willing to learn things that maybe aren't glamorous, like startups are often just a grind of doing a lot of boring work to get the thing going. And so long as you have a co-founder who's okay with that, it's totally fine if they don't have the perfect set of skillsets. So don't rule someone out who's potentially a great co-founder because they don't have this checklist of specific skills you're looking for. But do make sure you count them in if it's someone that you trust, you like working with, you've got a good sense of how they're going to handle the stress and pressure of the startup journey. So where should you look for to find co-founders? Well, the answer here is a little obvious. It's to start with the people you already know. So ideally, your friends and colleagues, and kind of ironically, the best time to find a co-founder are when you're not actually necessarily looking for a co-founder to start a company with right now. What I mean by that is, if I were going giving myself advice 10, 15 years ago, what I would say is, rather than sort of trying to pick a startup idea, and go and find co-founders to work on with it, I would suggest that I just look for people to do projects with.",
                "Introduction (Part 5)",
            ],
            [
                "So if you're in school, look around, see who's in your class, who's in school, and like, identify people that you think would be cool to work on a project. And this project doesn't have to be a takeover the world idea of a company, just somebody you find interesting. Like maybe you're into games, and you want to build a cool game together. The thing that's awesome about projects is that it's much less scarier and asking for a far lower of commitment if you ask them to work on a project with you than it is to go straight into, \"Hey, let's start a company together.\" Right? So you have sort of a higher chance of people saying yes, if you ask them for this. And the other thing that's great about projects is you can work on different projects with different people and you can start developing a taste for who do you like? Well, what kinds of personalities? Like what kinds of skills are you actually good at as opposed to what you might think you're good at? And so what kind of complementary skills might you look for in a co-founder. And again, being in school or college is a really ideal time for this because you're surrounded by lots of people who usually have a decent chunk of spare time. And so you can start getting together to work on things that you think are fun. And, again, kind of ironically, although this is I'm suggesting you don't try and start a startup. Projects that you work on in your spare time often tend to be some of the greatest sources for actually finding great startup ideas and building huge companies. Facebook's an obvious example, something that started out as a project while Mark Zuckerberg was an undergrad at Harvard. And now it's turning into one of the biggest companies in the world. But that's not why I'm suggesting you do this. I'm suggesting you can look for people to work on projects with because that's a great way for you to get a sense of what kind of person do you enjoy working with, and what specific type of personality do you work well with. And this advice also applies if you're not in college or school, maybe if you're working at a company, like look at your coworkers, like, keep a list of people that you think are particularly smart, particularly capable, who impresses you, and start getting to know them better. And ask them if they're up for working on things in the evenings or weekends. That's the kind of personality...the kind of person who is interested in working on evening and weekend projects is the kind of person that's likely to make a great co-founder. I actually remember years ago at Y Combinator startup school, when it was an in-person physical event, we had Phil Libin, the founder of Evernote, there. And he kind of gave a somewhat extreme version of his advice, which was that he sort of years and years before he started a company knew that he wanted to start a company someday. And so he would only make friends with people that he thought could someday be a co-founder.",
                "Introduction (Part 6)",
            ],
            [
                "And now, while I think that advice is maybe a little extreme, if you don't just want to be around people who might be co-founders, there is truth to it. Right? So I think this is kind of the thing where if you make this of a conscious effort well before you start a company, it'll probably the best bet for finding a great co-founder. But let's say you do know for sure that you want to start a company, and you're kind of ready to go, again, right now. How do you start finding co-founders? Well, again, you start in the same place, you start with people that you know. And what I've noticed is an issue people run into here is that they can be really reluctant to just ask people they know to start a company with them. And it's all kind of reasons, like maybe you're worried about how your relationship will change, like maybe you don't value the personal relationship more than the risks of working with someone. And those are fair concerns. But it's not the right optimization for starting a company, you have to make the ask. So what I'd suggest, the pretty simple algorithm here for finding co-founders, it's make a list of the people that you know, you're closest to that you think would be great co-founders, and start from top to bottom, and ask every single person there to go grab a coffee and talk to them, and ask them if they'll start a company with you and be your co-founder. If they say no, that's totally fine. Say you understand. But like, who would they start a company with and make it very specific. Ask them, \"If you were starting a company, who would be sort of your top three or four co-founders that you want to try and convince to work with you?\" And ask them for an introduction to each of those people. So your list keeps growing now. You ask the people you know, if they say no, you at least get some more ideas for names. And then you meet with those people. And you ask them and you simply repeat, repeat the same algorithm, ask them if they'd be interested in being a co-founder with you along. And if they say no, ask them who'd they try to recruit. And so this way, you start growing the tree of potential co-founders beyond those people you immediately know, but at least they're still connected via people that you do know. So they're not just sort of completely random strangers. The final sort of bit of advice, I'd say, for where to look is go out and try and meet people that just have similar interests to you. Right, it kind of sounds a little bit just like how to have a social life. But this is essentially what finding co-founders reduces to. So if you're an engineer, attend, like developer meetups or work on open source projects, or go to hackathons. Do things where others, engineers and builders are hanging out. And you're likely to find some meets. And if you're not technical, if you're interested in those things, you should totally attend those kinds of events too.",
                "Introduction (Part 7)",
            ],
            [
                "But maybe also just attend or find people who are interested in the kinds of things you're interested in. Maybe you're interested in economics and finance, and that's kind of the pool of things, or is a pool of interests where you think you'll find a startup idea. Well, make a real effort to go out and meet people that have similar interests. And in these COVID times, there's lots of online groups and communities that you can join. But even in regular times, there's always ways to find people that have similar interests to you. And because if constantly on the lookout for people who might make co-founders, you have a high chance of finding someone who could be a good fit. So once you found a potential co-founder, how do you test out and know for sure that you both want to start a company together before making the final commitment? Well, it's not a perfect process. And at some point, you just kind of have to make the leap and hope that it will work out. But one way to de-risk it is to allocate a chunk of time where you agreed to kind of work together. And set yourself a deadline by which time you want to have ideally, like a MVP, or a prototype of something built, or you at least want to have gone out and try it out, pitching some customers and convincing them to pay you if you did build a particular product. These are all things you'd usually do when you're signing up with a new company or testing out new idea anyhow. And do that together, and agree that at the end of the time that you've set aside, that you both have an honest conversation, decide, \"Do we both enjoy working together on this? And if so, great, let's go ahead and make the leap.\" And if not, be honest and say, \"Hey, let's go our own separate ways.\" So making that a little bit more tangible. If you both have the no other commitments, you know, which is pretty uncommon, but sometimes happens if, say, you both graduated college and you didn't go and get a job because you want to start a company, then I'd say treat this like your full time job, right? Say that, \"Hey, we're going to set aside a month or three months. And let's just pick idea we're excited about and get as much progress made as we can on building the first version of it, and going out and signing customers.\" Even if you can't do that full time because you have other commitments, but then do it on evenings and weekends, right. But you'll have to sacrifice some amount of time doing other things in order to actually spend time working together. But the more times, the more hours you can accumulate of working together on the idea, the better sense you'll have for sure if you want to start company or not. Right. So once you've kind of done that, let's say you've decided that, \"Hey, we do want to start the company, and we want to be co-founders,\" then I think there's two important points you want to make sure that you're in agreement on. First is the equity split, right, like who owns how much of the company.",
                "Introduction (Part 8)",
            ],
            [
                "Now, I think the way to think about this is, your sort of default equity allocation should really be 50/50. That's where you want to start from, right, because assuming that nothing's been built yet, you're at the earliest stages of the company, you're both going to make equal contributions, you both want to be equally motivated to work super hard in the company. And all the work is years and years ahead of you. So there is not really too much reason to deviate from a 50/50 equity split early on. However, we have seen different equity arrangements, and they have been successful. And so I kind of think the underlying thing that you're solving for here is making sure that both of you are happy with what the equity arrangement is, and will be motivated to keep working on the company for a long period of time. Right. And so, again, usually that means 50/50, but let's just say that you have been working on the company for a little bit longer, or you de-risked it somehow by yourself, and you're bringing on what is commonly called a later stage co-founder, then sometimes deviate from 50/50 might make sense. But the thing I would really encourage you to do is not optimize for the short term, right. So just because you made a little bit of progress and the idea by yourself, and you have a great co-founder, and you're sort of thinking, \"Hey, maybe I should take 70% interest, just leave them 30%,\" because you've made progress in the last 6 months, I would encourage you not to do that. Startups are a really long-term game and you win by making the best decision long term. Right. So if you have a great potential co-founder, and even though you made a little bit of progress on the company yourself, if you know that they won't be all in and fully committed to the success of the company unless they're a 50/50 partner, you should do that. You should make them 50/50 equity partner so you can keep them as motivated and get as much out of them as possible. The second thing I think you really want to decide is who's the CEO. Now, this can sometimes be an uncomfortable conversation. And to be honest, it's actually, I think, a bit of a red flag if it is uncomfortable conversation. And so as far as the actual title itself goes early on in the startup when it's just two or three co-founders, in terms of how it impacts your day to day and how you divide up responsibilities, the title doesn't actually matter. Like early on, you're all going to be doing a little bit of everything, there's like plenty of like unglamorous grunt work to go around. And just because you have a CEO title doesn't mean you get to sort of abscond from them. Right. So practically, it doesn't matter, like, in terms of who does what. One exception to that might be, if you need to be doing sales, it usually might be good if the CEO is a person, where CEO title is the person talking to customers and users and convincing them because they might feel a little bit more flattered if the CEO is pitching them.",
                "Introduction (Part 9)",
            ],
            [
                "And this kind of gets the point of where really the only impact the CEO title has. And that is externally, and I would say specifically for investors. So investors care about seeing that there is sort of a clear leader, and a clear final decision maker or a tiebreaker. And that person should be the CEO. So when you're pitching investors, it's usually better for whoever sort of does most of the talking, whoever is going to be leading those conversations, that that person is the CEO. And now, where you run into problems, and a very, very common source of co-founder friction we see at Y Combinator is where two people really want to be the CEO. Right. And this can sort of...we can see this in Y Combinator interviews, where you end up with two people who kind of talk over each other, they interrupt each other, they can look at each other with a little bit of content when the other person's answering. These are all really, really bad signs, right. So be honest with yourselves, if you think it's really important to you to be the CEO, and you both feel that way, you're not good co-founders for each other. So just avoid all that pain and heartache and don't start a coming together. You ideally want to start a company with someone who doesn't care about that stuff if you do, or you're both indifferent to it and you'll find picking whoever you feel is best suited to the role for now, even if that changes sometime in the future. So let's kind of wrap up everything we've talked about. Once you're sure you want a co-founder, which I hope I've convinced you to, once you run the process to find some good candidates to be a co-founder, and you've identified someone that you really do want to start a company with, because you spent a little bit of time working on projects together and testing each other out, so to speak, then you have the conversations around what's the equity split and who's going to be the CEO. Now you're ready to formalize things. And formalizing really means the legal act of incorporating a company, setting up a vesting agreement. This is really important. Vesting means that the shares in the company, we don't all get them at once. They vest over a period of time, and there's very standard templates and documents for this that you should really ensure that you have in place. And then you're pretty much good to go. And you know, the when exactly should you sort of leap from, \"Hey, we're hanging out, working together,\" to, \"Hey, okay, let's like do some paperwork.\" Not a perfect answer to that, but it's just kind of up to you. Like once you've made the commitment to yourself and each other, that we're gonna make a real go of trying to build a company together, that's kind of the trigger for when you start making things real by getting sort of the legal, corporation and paperwork done. So, that's all the advice I have for how to think about finding the right co-founder and how to make it happen. I hope that helps and good luck.",
                "Introduction (Part 10)",
            ],
        ],
        "description": "YC's Harj Taggar shares advice on how to find the right co-founder for your startup.",
        "fetching_transcript": False,
        "title": "How to find the right co-founder",
        "url": "https://www.ycombinator.com/library/8h-how-to-find-the-right-co-founder",
        "youtube_id": "prKi3-rUPHc",
    },
    {
        "content": [
            [
                "The original version of this essay is available at http://www.paulgraham.com/ds.html July 2013 One of the most common types of advice we give at Y Combinator is to do things that don't scale. A lot of would-be\nfounders believe that startups either take off or don't. You build something, make it available, and if you've made a\nbetter mousetrap, people beat a path to your door as promised. Or they don't, in which case the market must not exist.\n[1] Actually startups take off because the founders make them take off. There may be a handful that just grew by themselves,\nbut usually it takes some sort of push to get them going. A good metaphor would be the cranks that car engines had\nbefore they got electric starters. Once the engine was going, it would keep going, but there was a separate and\nlaborious process to get it going.",
                "Introduction",
            ],
            [
                "The most common unscalable thing founders have to do at the start is to recruit users manually. Nearly all startups have\nto. You can't wait for users to come to you. You have to go out and get them. Stripe is one of the most successful startups we've funded, and the problem they solved was an urgent one. If anyone\ncould have sat back and waited for users, it was Stripe. But in fact they're famous within YC for aggressive early user\nacquisition. Startups building things for other startups have a big pool of potential users in the other companies we've funded, and\nnone took better advantage of it than Stripe. At YC we use the term \"Collison installation\" for the technique they\ninvented. More diffident founders ask \"Will you try our beta?\" and if the answer is yes, they say \"Great, we'll send you\na link.\" But the Collison brothers weren't going to wait. When anyone agreed to try Stripe they'd say \"Right then, give\nme your laptop\" and set them up on the spot. There are two reasons founders resist going out and recruiting users individually. One is a combination of shyness and\nlaziness. They'd rather sit at home writing code than go out and talk to a bunch of strangers and probably be rejected\nby most of them. But for a startup to succeed, at least one founder (usually the CEO) will have to spend a lot of time\non sales and marketing. [2] The other reason founders ignore this path is that the absolute numbers seem so small at first. This can't be how the\nbig, famous startups got started, they think. The mistake they make is to underestimate the power of compound growth. We\nencourage every startup to measure their progress by weekly growth rate . If you\nhave 100 users, you need to get 10 more next week to grow 10% a week. And while 110 may not seem much better than 100,\nif you keep growing at 10% a week you'll be surprised how big the numbers get. After a year you'll have 14,000 users,\nand after 2 years you'll have 2 million. You'll be doing different things when you're acquiring users a thousand at a time, and growth has to slow down\neventually. But if the market exists you can usually start by recruiting users manually and then gradually switch to\nless manual methods. [3] Airbnb is a classic example of this technique. Marketplaces are so hard to get rolling that you should expect to take\nheroic measures at first. In Airbnb's case, these consisted of going door to door in New York, recruiting new users and\nhelping existing ones improve their listings. When I remember the Airbnbs during YC, I picture them with rolly bags,\nbecause when they showed up for tuesday dinners they'd always just flown back from somewhere.",
                "Recruit",
            ],
            [
                "Airbnb now seems like an unstoppable juggernaut, but early on it was so fragile that about 30 days of going out and\nengaging in person with users made the difference between success and failure. That initial fragility was not a unique feature of Airbnb. Almost all startups are fragile initially. And that's one of\nthe biggest things inexperienced founders and investors (and reporters and know-it-alls on forums) get wrong about them.\nThey unconsciously judge larval startups by the standards of established ones. They're like someone looking at a newborn\nbaby and concluding \"there's no way this tiny creature could ever accomplish anything.\" It's harmless if reporters and know-it-alls dismiss your startup. They always get things wrong. It's even ok if\ninvestors dismiss your startup; they'll change their minds when they see growth. The big danger is that you'll dismiss\nyour startup yourself. I've seen it happen. I often have to encourage founders who don't see the full potential of what\nthey're building. Even Bill Gates made that mistake. He returned to Harvard for the fall semester after starting\nMicrosoft. He didn't stay long, but he wouldn't have returned at all if he'd realized Microsoft was going to be even a\nfraction of the size it turned out to be. [4] The question to ask about an early stage startup is not \"is this company taking over the world?\" but \"how big could this\ncompany get if the founders did the right things?\" And the right things often seem both laborious and inconsequential at\nthe time. Microsoft can't have seemed very impressive when it was just a couple guys in Albuquerque writing Basic\ninterpreters for a market of a few thousand hobbyists (as they were then called), but in retrospect that was the optimal\npath to dominating microcomputer software. And I know Brian Chesky and Joe Gebbia didn't feel like they were en route to\nthe big time as they were taking \"professional\" photos of their first hosts' apartments. They were just trying to\nsurvive. But in retrospect that too was the optimal path to dominating a big market. How do you find users to recruit manually? If you build something to solve your own\nproblems , then you only have to find your peers, which is usually\nstraightforward. Otherwise you'll have to make a more deliberate effort to locate the most promising vein of users. The\nusual way to do that is to get some initial set of users by doing a comparatively untargeted launch, and then to observe\nwhich kind seem most enthusiastic, and seek out more like them. For example, Ben Silbermann noticed that a lot of the\nearliest Pinterest users were interested in design, so he went to a conference of design bloggers to recruit users, and\nthat worked well. [5]",
                "**Fragile**",
            ],
            [
                "You should take extraordinary measures not just to acquire users, but also to make them happy. For as long as they could\n(which turned out to be surprisingly long), Wufoo sent each new user a hand-written thank you note. Your first users\nshould feel that signing up with you was one of the best choices they ever made. And you in turn should be racking your\nbrains to think of new ways to delight them. Why do we have to teach startups this? Why is it counterintuitive for founders? Three reasons, I think. One is that a lot of startup founders are trained as engineers, and customer service is not part of the training of\nengineers. You're supposed to build things that are robust and elegant, not be slavishly attentive to individual users\nlike some kind of salesperson. Ironically, part of the reason engineering is traditionally averse to handholding is that\nits traditions date from a time when engineers were less powerful   when they were only in charge of their narrow domain\nof building things, rather than running the whole show. You can be ornery when you're Scotty, but not when you're Kirk. Another reason founders don't focus enough on individual customers is that they worry it won't scale. But when founders\nof larval startups worry about this, I point out that in their current state they have nothing to lose. Maybe if they go\nout of their way to make existing users super happy, they'll one day have too many to do so much for. That would be a\ngreat problem to have. See if you can make it happen. And incidentally, when it does, you'll find that delighting\ncustomers scales better than you expected. Partly because you can usually find ways to make anything scale more than you\nwould have predicted, and partly because delighting customers will by then have permeated your culture. I have never once seen a startup lured down a blind alley by trying too hard to make their initial users happy. But perhaps the biggest thing preventing founders from realizing how attentive they could be to their users is that\nthey've never experienced such attention themselves. Their standards for customer service have been set by the companies\nthey've been customers of, which are mostly big ones. Tim Cook doesn't send you a hand-written note after you buy a\nlaptop. He can't. But you can. That's one advantage of being small: you can provide a level of service no big company\ncan. [6] Once you realize that existing conventions are not the upper bound on user experience, it's interesting in a very\npleasant way to think about how far you could go to delight your users.",
                "**Delight**",
            ],
            [
                "I was trying to think of a phrase to convey how extreme your attention to users should be, and I realized Steve Jobs had\nalready done it: insanely great. Steve wasn't just using \"insanely\" as a synonym for \"very.\" He meant it more literally\n  that one should focus on quality of execution to a degree that in everyday life would be considered pathological. All the most successful startups we've funded have, and that probably doesn't surprise would-be founders. What novice\nfounders don't get is what insanely great translates to in a larval startup. When Steve Jobs started using that phrase,\nApple was already an established company. He meant the Mac (and its documentation and even packaging   such is the\nnature of obsession) should be insanely well designed and manufactured. That's not hard for engineers to grasp. It's\njust a more extreme version of designing a robust and elegant product. What founders have a hard time grasping (and Steve himself might have had a hard time grasping) is what insanely great\nmorphs into as you roll the time slider back to the first couple months of a startup's life. It's not the product that\nshould be insanely great, but the experience of being your user. The product is just one component of that. For a big\ncompany it's necessarily the dominant one. But you can and should give users an insanely great experience with an early,\nincomplete, buggy product, if you make up the difference with attentiveness. Can, perhaps, but should? Yes. Over-engaging with early users is not just a permissible technique for getting growth\nrolling. For most successful startups it's a necessary part of the feedback loop that makes the product good. Making a\nbetter mousetrap is not an atomic operation. Even if you start the way most successful startups have, by building\nsomething you yourself need, the first thing you build is never quite right. And except in domains with big penalties\nfor making mistakes, it's often better not to aim for perfection initially. In software, especially, it usually works\nbest to get something in front of users as soon as it has a quantum of utility, and then see what they do with it.\nPerfectionism is often an excuse for procrastination, and in any case your initial model of users is always inaccurate,\neven if you're one of them. [7] The feedback you get from engaging directly with your earliest users will be the best you ever get. When you're so big\nyou have to resort to focus groups, you'll wish you could go over to your users' homes and offices and watch them use\nyour stuff like you did when there were only a handful of them.",
                "**Experience**",
            ],
            [
                "Sometimes the right unscalable trick is to focus on a deliberately narrow market. It's like keeping a fire contained at\nfirst to get it really hot before adding more logs. That's what Facebook did. At first it was just for Harvard students. In that form it only had a potential market of a\nfew thousand people, but because they felt it was really for them, a critical mass of them signed up. After Facebook\nstopped being for Harvard students, it remained for students at specific colleges for quite a while. When I interviewed\nMark Zuckerberg at Startup School, he said that while it was a lot of work creating course lists for each school, doing\nthat made students feel the site was their natural home. Any startup that could be described as a marketplace usually has to start in a subset of the market, but this can work\nfor other startups as well. It's always worth asking if there's a subset of the market in which you can get a critical\nmass of users quickly. [8] Most startups that use the contained fire strategy do it unconsciously. They build something for themselves and their\nfriends, who happen to be the early adopters, and only realize later that they could offer it to a broader market. The\nstrategy works just as well if you do it unconsciously. The biggest danger of not being consciously aware of this\npattern is for those who naively discard part of it. E.g. if you don't build something for yourself and your friends, or\neven if you do, but you come from the corporate world and your friends are not early adopters, you'll no longer have a\nperfect initial market handed to you on a platter. Among companies, the best early adopters are usually other startups. They're more open to new things both by nature and\nbecause, having just been started, they haven't made all their choices yet. Plus when they succeed they grow fast, and\nyou with them. It was one of many unforeseen advantages of the YC model (and specifically of making YC big) that B2B\nstartups now have an instant market of hundreds of other startups ready at hand.",
                "**Fire**",
            ],
            [
                "For hardware startups there's a variant of doing things that don't scale that we\ncall \"pulling a Meraki.\" Although we didn't fund Meraki, the founders were Robert Morris's grad students, so we know\ntheir history. They got started by doing something that really doesn't scale: assembling their routers themselves. Hardware startups face an obstacle that software startups don't. The minimum order for a factory production run is\nusually several hundred thousand dollars. Which can put you in a catch-22: without a product you can't generate the\ngrowth you need to raise the money to manufacture your product. Back when hardware startups had to rely on investors for\nmoney, you had to be pretty convincing to overcome this. The arrival of crowdfunding (or more precisely, preorders) has\nhelped a lot. But even so I'd advise startups to pull a Meraki initially if they can. That's what Pebble did. The\nPebbles assembled the first several hundred\nwatches themselves. If they hadn't gone through that phase, they probably wouldn't have sold $10 million worth of\nwatches when they did go on Kickstarter. Like paying excessive attention to early customers, fabricating things yourself turns out to be valuable for hardware\nstartups. You can tweak the design faster when you're the factory, and you learn things you'd never have known\notherwise. Eric Migicovsky of Pebble said one of the things he learned was \"how valuable it was to source good screws.\"\nWho knew?",
                "**Meraki**",
            ],
            [
                "Sometimes we advise founders of B2B startups to take over-engagement to an extreme, and to pick a single user and act as\nif they were consultants building something just for that one user. The initial user serves as the form for your mold;\nkeep tweaking till you fit their needs perfectly, and you'll usually find you've made something other users want too.\nEven if there aren't many of them, there are probably adjacent territories that have more. As long as you can find just\none user who really needs something and can act on that need, you've got a toehold in making something people want, and\nthat's as much as any startup needs initially. [9] Consulting is the canonical example of work that doesn't scale. But (like other ways of bestowing one's favors\nliberally) it's safe to do it so long as you're not being paid to. That's where companies cross the line. So long as\nyou're a product company that's merely being extra attentive to a customer, they're very grateful even if you don't\nsolve all their problems. But when they start paying you specifically for that attentiveness   when they start paying\nyou by the hour   they expect you to do everything. Another consulting-like technique for recruiting initially lukewarm users is to use your software yourselves on their\nbehalf. We did that at Viaweb. When we approached merchants asking if they wanted to use our software to make online\nstores, some said no, but they'd let us make one for them. Since we would do anything to get users, we did. We felt\npretty lame at the time. Instead of organizing big strategic e-commerce partnerships, we were trying to sell luggage and\npens and men's shirts. But in retrospect it was exactly the right thing to do, because it taught us how it would feel to\nmerchants to use our software. Sometimes the feedback loop was near instantaneous: in the middle of building some\nmerchant's site I'd find I needed a feature we didn't have, so I'd spend a couple hours implementing it and then resume\nbuilding the site.",
                "**Consult**",
            ],
            [
                "There's a more extreme variant where you don't just use your software, but are your software. When you only have a small\nnumber of users, you can sometimes get away with doing by hand things that you plan to automate later. This lets you\nlaunch faster, and when you do finally automate yourself out of the loop, you'll know exactly what to build because\nyou'll have muscle memory from doing it yourself. When manual components look to the user like software, this technique starts to have aspects of a practical joke. For\nexample, the way Stripe delivered \"instant\" merchant accounts to its first users was that the founders manually signed\nthem up for traditional merchant accounts behind the scenes. Some startups could be entirely manual at first. If you can find someone with a problem that needs solving and you can\nsolve it manually, go ahead and do that for as long as you can, and then gradually automate the bottlenecks. It would be\na little frightening to be solving users' problems in a way that wasn't yet automatic, but less frightening than the far\nmore common case of having something automatic that doesn't yet solve anyone's problems.",
                "**Manual**",
            ],
            [
                "I should mention one sort of initial tactic that usually doesn't work: the Big Launch. I occasionally meet founders who\nseem to believe startups are projectiles rather than powered aircraft, and that they'll make it big if and only if\nthey're launched with sufficient initial velocity. They want to launch simultaneously in 8 different publications, with\nembargoes. And on a tuesday, of course, since they read somewhere that's the optimum day to launch something. It's easy to see how little launches matter. Think of some successful startups. How many of their launches do you\nremember? All you need from a launch is some initial core of users. How well you're doing a few months later will depend\nmore on how happy you made those users than how many there were of them. [10] So why do founders think launches matter? A combination of solipsism and laziness. They think what they're building is\nso great that everyone who hears about it will immediately sign up. Plus it would be so much less work if you could get\nusers merely by broadcasting your existence, rather than recruiting them one at a time. But even if what you're building\nreally is great, getting users will always be a gradual process   partly because great things are usually also novel,\nbut mainly because users have other things to think about. Partnerships too usually don't work. They don't work for startups in general, but they especially don't work as a way to\nget growth started. It's a common mistake among inexperienced founders to believe that a partnership with a big company\nwill be their big break. Six months later they're all saying the same thing: that was way more work than we expected,\nand we ended up getting practically nothing out of it. [11] It's not enough just to do something extraordinary initially. You have to make an extraordinary effort initially. Any\nstrategy that omits the effort   whether it's expecting a big launch to get you users, or a big partner   is ipso facto\nsuspect.",
                "**Big**",
            ],
            [
                "The need to do something unscalably laborious to get started is so nearly universal that it might be a good idea to stop\nthinking of startup ideas as scalars. Instead we should try thinking of them as pairs of what you're going to build,\nplus the unscalable thing(s) you're going to do initially to get the company going. It could be interesting to start viewing startup ideas this way, because now that there are two components you can try\nto be imaginative about the second as well as the first. But in most cases the second component will be what it usually\nis   recruit users manually and give them an overwhelmingly good experience   and the main benefit of treating startups\nas vectors will be to remind founders they need to work hard in two dimensions. [12] In the best case, both components of the vector contribute to your company's DNA: the unscalable things you have to do\nto get started are not merely a necessary evil, but change the company permanently for the better. If you have to be\naggressive about user acquisition when you're small, you'll probably still be aggressive when you're big. If you have to\nmanufacture your own hardware, or use your software on users's behalf, you'll learn things you couldn't have learned\notherwise. And most importantly, if you have to work hard to delight users when you only have a handful of them, you'll\nkeep doing it when you have a lot.",
                "**Vector**",
            ],
            [
                "[1] Actually Emerson never mentioned mousetraps specifically. He wrote \"If a man has good corn or wood, or boards, or\npigs, to sell, or can make better chairs or knives, crucibles or church organs, than anybody else, you will find a broad\nhard-beaten road to his house, though it be in the woods.\" [2] Thanks to Sam Altman for suggesting I make this explicit. And no, you can't avoid doing sales by hiring someone to\ndo it for you. You have to do sales yourself initially. Later you can hire a real salesperson to replace you. [3] The reason this works is that as you get bigger, your size helps you grow. Patrick Collison wrote \"At some point,\nthere was a very noticeable change in how Stripe felt. It tipped from being this boulder we had to push to being a train\ncar that in fact had its own momentum.\" [4] One of the more subtle ways in which YC can help founders is by calibrating their ambitions, because we know\nexactly how a lot of successful startups looked when they were just getting started. [5] If you're building something for which you can't easily get a small set of users to observe   e.g. enterprise\nsoftware   and in a domain where you have no connections, you'll have to rely on cold calls and introductions. But\nshould you even be working on such an idea? [6] Garry Tan pointed out an interesting trap founders fall into in the beginning. They want so much to seem big that\nthey imitate even the flaws of big companies, like indifference to individual users. This seems to them more\n\"professional.\" Actually it's better to embrace the fact that you're small and use whatever advantages that brings. [7] Your user model almost couldn't be perfectly accurate, because users' needs often change in response to what you\nbuild for them. Build them a microcomputer, and suddenly they need to run spreadsheets on it, because the arrival of\nyour new microcomputer causes someone to invent the spreadsheet. [8] If you have to choose between the subset that will sign up quickest and those that will pay the most, it's usually\nbest to pick the former, because those are probably the early adopters. They'll have a better influence on your product,\nand they won't make you expend as much effort on sales. And though they have less money, you don't need that much to\nmaintain your target growth rate early on. [9] Yes, I can imagine cases where you could end up making something that was really only useful for one user. But\nthose are usually obvious, even to inexperienced founders. So if it's not obvious you'd be making something for a market\nof one, don't worry about that danger. [10] There may even be an inverse correlation between launch magnitude and success. The only launches I remember are\nfamous flops like the Segway and Google Wave. Wave is a particularly alarming example, because I think it was actually a\ngreat idea that was killed partly by its overdone launch. [11] Google grew big on the back of Yahoo, but that wasn't a partnership. Yahoo was their customer.",
                "**Notes** (Part 1)",
            ],
            [
                "[12] It will also remind founders that an idea where the second component is empty   an idea where there is nothing\nyou can do to get going, e.g. because you have no way to find users to recruit manually   is probably a bad idea, at\nleast for those founders. Thanks to Sam Altman, Paul Buchheit, Patrick Collison, Kevin Hale, Steven Levy, Jessica Livingston, Geoff Ralston,\nand Garry Tan for reading drafts of this.",
                "**Notes** (Part 2)",
            ],
        ],
        "description": "Startups take off because the founders make them take off. Almost all startups are fragile initially. It's important to recruit users manually.",
        "title": "Do things that don't scale",
        "transcript": None,
        "url": "https://www.ycombinator.com/library/96-do-things-that-don-t-scale",
    },
    {
        "content": [
            [
                "The original version of this essay is available at http://www.paulgraham.com/convince.html August 2013 When people hurt themselves lifting heavy things, it's usually because they try to lift with their back. The right way\nto lift heavy things is to let your legs do the work. Inexperienced founders make the same mistake when trying to\nconvince investors. They try to convince with their pitch. Most would be better off if they let their startup do the\nwork   if they started by understanding why their startup is worth investing in, then simply explained this well to\ninvestors. Investors are looking for startups that will be very successful. But that test is not as simple as it sounds. In\nstartups, as in a lot of other domains, the distribution of outcomes follows a power law, but in startups the curve is\nstartlingly steep. The big successes are so big they dwarf the rest. And since\nthere are only a handful each year (the conventional wisdom is 15), investors treat \"big success\" as if it were binary.\nMost are interested in you if you seem like you have a chance, however small, of being one of the 15 big successes, and\notherwise not. [1] (There are a handful of angels who'd be interested in a company with a high probability of being moderately successful.\nBut angel investors like big successes too.) How do you seem like you'll be one of the big successes? You need three things: formidable founders, a promising market,\nand (usually) some evidence of success so far.",
                "Introduction",
            ],
            [
                "The most important ingredient is formidable founders. Most investors decide in the first few minutes whether you seem\nlike a winner or a loser, and once their opinion is set it's hard to change. [2] Every startup has reasons both to\ninvest and not to invest. If investors think you're a winner they focus on the former, and if not they focus on the\nlatter. For example, it might be a rich market, but with a slow sales cycle. If investors are impressed with you as\nfounders, they say they want to invest because it's a rich market, and if not, they say they can't invest because of the\nslow sales cycle. They're not necessarily trying to mislead you. Most investors are genuinely unclear in their own minds why they like or\ndislike startups. If you seem like a winner, they'll like your idea more. But don't be too smug about this weakness of\ntheirs, because you have it too; almost everyone does. There is a role for ideas of course. They're fuel for the fire that starts with liking the founders. Once investors like\nyou, you'll see them reaching for ideas: they'll be saying \"yes, and you could also do x.\" (Whereas when they don't like\nyou, they'll be saying \"but what about y?\") But the foundation of convincing investors is to seem formidable, and since this isn't a word most people use in\nconversation much, I should explain what it means. A formidable person is one who seems like they'll get what they want,\nregardless of whatever obstacles are in the way. Formidable is close to confident, except that someone could be\nconfident and mistaken. Formidable is roughly justifiably confident. There are a handful of people who are really good at seeming formidable   some because they actually are very formidable\nand just let it show, and others because they are more or less con artists. [3] But most founders, including many who\nwill go on to start very successful companies, are not that good at seeming formidable the first time they try\nfundraising. What should they do? [4] What they should not do is try to imitate the swagger of more experienced founders. Investors are not always that good\nat judging technology, but they're good at judging confidence. If you try to act like something you're not, you'll just\nend up in an uncanny valley. You'll depart from sincere, but never arrive at convincing.",
                "**Formidable**",
            ],
            [
                "The way to seem most formidable as an inexperienced founder is to stick to the truth. How formidable you seem isn't a\nconstant. It varies depending on what you're saying. Most people can seem confident when they're saying \"one plus one is\ntwo,\" because they know it's true. The most diffident person would be puzzled and even slightly contemptuous if they\ntold a VC \"one plus one is two\" and the VC reacted with skepticism. The magic ability of people who are good at seeming\nformidable is that they can do this with the sentence \"we're going to make a billion dollars a year.\" But you can do the\nsame, if not with that sentence with some fairly impressive ones, so long as you convince yourself first. That's the secret. Convince yourself that your startup is worth investing in, and then when you explain this to\ninvestors they'll believe you. And by convince yourself, I don't mean play mind games with yourself to boost your\nconfidence. I mean truly evaluate whether your startup is worth investing in. If it isn't, don't try to raise money.\n[5] But if it is, you'll be telling the truth when you tell investors it's worth investing in, and they'll sense that.\nYou don't have to be a smooth presenter if you understand something well and tell the truth about it. To evaluate whether your startup is worth investing in, you have to be a domain expert. If you're not a domain expert,\nyou can be as convinced as you like about your idea, and it will seem to investors no more than an instance of the\nDunning-Kruger effect. Which in fact it will usually be. And investors can tell fairly quickly whether you're a domain\nexpert by how well you answer their questions. Know everything about your market. [6] Why do founders persist in trying to convince investors of things they're not convinced of themselves? Partly because\nwe've all been trained to. When my friends Robert Morris and Trevor Blackwell were in grad school, one of their fellow students was on the\nreceiving end of a question from their faculty advisor that we still quote today. When the unfortunate fellow got to his\nlast slide, the professor burst out: Which one of these conclusions do you actually believe? One of the artifacts of the way schools are organized is that we all get trained to talk even when we have nothing to\nsay. If you have a ten page paper due, then ten pages you must write, even if you only have one page of ideas. Even if\nyou have no ideas. You have to produce something. And all too many startups go into fundraising in the same spirit. When\nthey think it's time to raise money, they try gamely to make the best case they can for their startup. Most never think\nof pausing beforehand to ask whether what they're saying is actually convincing, because they've all been trained to\ntreat the need to present as a given   as an area of fixed size, over which however much truth they have must needs be\nspread, however thinly.",
                "**Truth** (Part 1)",
            ],
            [
                "The time to raise money is not when you need it, or when you reach some artificial deadline like a Demo Day. It's when\nyou can convince investors, and not before. [7] And unless you're a good con artist, you'll never convince investors if you're not convinced yourself. They're far\nbetter at detecting bullshit than you are at producing it, even if you're producing it unknowingly. If you try to\nconvince investors before you've convinced yourself, you'll be wasting both your time. But pausing first to convince yourself will do more than save you from wasting your time. It will force you to organize\nyour thoughts. To convince yourself that your startup is worth investing in, you'll have to figure out why it's worth\ninvesting in. And if you can do that you'll end up with more than added confidence. You'll also have a provisional\nroadmap of how to succeed.",
                "**Truth** (Part 2)",
            ],
            [
                "Notice I've been careful to talk about whether a startup is worth investing in, rather than whether it's going to\nsucceed. No one knows whether a startup is going to succeed. And it's a good thing for investors that this is so,\nbecause if you could know in advance whether a startup would succeed, the stock price would already be the future price,\nand there would be no room for investors to make money. Startup investors know that every investment is a bet, and\nagainst pretty long odds. So to prove you're worth investing in, you don't have to prove you're going to succeed, just that you're a sufficiently\ngood bet. What makes a startup a sufficiently good bet? In addition to formidable founders, you need a plausible path to\nowning a big piece of a big market. Founders think of startups as ideas, but investors think of them as markets. If\nthere are x number of customers who'd pay an average of $y per year for what you're making, then the total addressable\nmarket, or TAM, of your company is $xy. Investors don't expect you to collect all that money, but it's an upper bound on\nhow big you can get. Your target market has to be big, and it also has to be capturable by you. But the market doesn't have to be big yet,\nnor do you necessarily have to be in it yet. Indeed, it's often better to start in a small market that will either turn into a big one or from which you can move into a\nbig one. There just has to be some plausible sequence of hops that leads to dominating a big market a few years down the\nline. The standard of plausibility varies dramatically depending on the age of the startup. A three month old company at Demo\nDay only needs to be a promising experiment that's worth funding to see how it turns out. Whereas a two year old company\nraising a series A round needs to be able to show the experiment worked. [8] But every company that gets really big is \"lucky\" in the sense that their growth is due mostly to some external wave\nthey're riding, so to make a convincing case for becoming huge, you have to identify some specific trend you'll benefit\nfrom. Usually you can find this by asking \"why now?\" If this is such a great idea, why hasn't someone else already done\nit? Ideally the answer is that it only recently became a good idea, because something changed, and no one else has\nnoticed yet. Microsoft for example was not going to grow huge selling Basic interpreters. But by starting there they were perfectly\npoised to expand up the stack of microcomputer software as microcomputers grew powerful enough to support one. And\nmicrocomputers turned out to be a really huge wave, bigger than even the most optimistic observers would have predicted\nin 1975. But while Microsoft did really well and there is thus a temptation to think they would have seemed a great bet a few\nmonths in, they probably didn't. Good, but not great. No company, however successful, ever looks more than a pretty good\nbet a few months in.",
                "**Market** (Part 1)",
            ],
            [
                "Microcomputers turned out to be a big deal, and Microsoft both executed well and got lucky. But it\nwas by no means obvious that this was how things would play out. Plenty of companies seem as good a bet a few months in.\nI don't know about startups in general, but at least half the startups we fund could make as good a case as Microsoft\ncould have for being on a path to dominating a large market. And who can reasonably expect more of a startup than that?",
                "**Market** (Part 2)",
            ],
            [
                "If you can make as good a case as Microsoft could have, will you convince investors? Not always. A lot of VCs would have\nrejected Microsoft. [9] Certainly some rejected Google. And getting rejected will put you in a slightly awkward\nposition, because as you'll see when you start fundraising, the most common question you'll get from investors will be\n\"who else is investing?\" What do you say if you've been fundraising for a while and no one has committed yet? [10] The people who are really good at acting formidable often solve this problem by giving investors the impression that\nwhile no investors have committed yet, several are about to. This is arguably a permissible tactic. It's slightly\ndickish of investors to care more about who else is investing than any other aspect of your startup, and misleading them\nabout how far along you are with other investors seems the complementary countermove. It's arguably an instance of\nscamming a scammer. But I don't recommend this approach to most founders, because most founders wouldn't be able to\ncarry it off. This is the single most common lie told to investors, and you have to be really good at lying to tell\nmembers of some profession the most common lie they're told. If you're not a master of negotiation (and perhaps even if you are) the best solution is to tackle the problem head-on,\nand to explain why investors have turned you down and why they're mistaken. If you know you're on the right track, then\nyou also know why investors were wrong to reject you. Experienced investors are well aware that the best ideas are also\nthe scariest. They all know about the VCs who rejected Google. If instead of seeming evasive and ashamed about having\nbeen turned down (and thereby implicitly agreeing with the verdict) you talk candidly about what scared investors about\nyou, you'll seem more confident, which they like, and you'll probably also do a better job of presenting that aspect of\nyour startup. At the very least, that worry will now be out in the open instead of being a gotcha left to be discovered\nby the investors you're currently talking to, who will be proud of and thus attached to their discovery. [11] This strategy will work best with the best investors, who are both hard to bluff and who already believe most other\ninvestors are conventional-minded drones doomed always to miss the big outliers. Raising money is not like applying to\ncollege, where you can assume that if you can get into MIT, you can also get into Foobar State. Because the best\ninvestors are much smarter than the rest, and the best startup ideas look initially like bad\nideas , it's not uncommon for a startup to be rejected by all the VCs\nexcept the best ones. That's what happened to Dropbox. Y Combinator started in Boston, and for the first 3 years we ran\nalternating batches in Boston and Silicon Valley. Because Boston investors were so few and so timid, we used to ship\nBoston batches out for a second Demo Day in Silicon Valley.",
                "**Rejection** (Part 1)",
            ],
            [
                "Dropbox was part of a Boston batch, which means all those\nBoston investors got the first look at Dropbox, and none of them closed the deal. Yet another backup and syncing thing,\nthey all thought. A couple weeks later, Dropbox raised a series A round from Sequoia. [12]",
                "**Rejection** (Part 2)",
            ],
            [
                "Not understanding that investors view investments as bets combines with the ten page paper mentality to prevent founders\nfrom even considering the possibility of being certain of what they're saying. They think they're trying to convince\ninvestors of something very uncertain   that their startup will be huge   and convincing anyone of something like that\nmust obviously entail some wild feat of salesmanship. But in fact when you raise money you're trying to convince\ninvestors of something so much less speculative   whether the company has all the elements of a good bet   that you can\napproach the problem in a qualitatively different way. You can convince yourself, then convince them. And when you convince them, use the same matter-of-fact language you used to convince yourself. You wouldn't use vague,\ngrandiose marketing-speak among yourselves. Don't use it with investors either. It not only doesn't work on them, but\nseems a mark of incompetence. Just be concise. Many investors explicitly use that as a test, reasoning (correctly) that\nif you can't explain your plans concisely, you don't really understand them. But even investors who don't have a rule\nabout this will be bored and frustrated by unclear explanations. [13] So here's the recipe for impressing investors when you're not already good at seeming formidable: Make something worth investing in. Understand why it's worth investing in. Explain that clearly to investors. If you're saying something you know is true, you'll seem confident when you're saying it. Conversely, never let pitching\ndraw you into bullshitting. As long as you stay on the territory of truth, you're strong. Make the truth good, then just\ntell it.",
                "**Different**",
            ],
            [
                "[1] There's no reason to believe this number is a constant. In fact it's our explicit goal at Y Combinator to increase\nit, by encouraging people to start startups who otherwise wouldn't have. [2] Or more precisely, investors decide whether you're a loser or possibly a winner. If you seem like a winner, they\nmay then, depending on how much you're raising, have several more meetings with you to test whether that initial\nimpression holds up. But if you seem like a loser they're done, at least for the next year or so. And when they decide you're a loser they\nusually decide in way less than the 50 minutes they may have allotted for the first meeting. Which explains the\nastonished stories one always hears about VC inattentiveness. How could these people make investment decisions well when\nthey're checking their messages during startups' presentations? The solution to that mystery is that they've already\nmade the decision. [3] The two are not mutually exclusive. There are people who are both genuinely formidable, and also really good at\nacting that way. [4] How can people who will go on to create giant companies not seem formidable early on? I think the main reason is\nthat their experience so far has trained them to keep their wings folded, as it were. Family, school, and jobs encourage\ncooperation, not conquest. And it's just as well they do, because even being Genghis Khan is probably 99% cooperation.\nBut the result is that most people emerge from the tube of their upbringing in their early twenties compressed into the\nshape of the tube. Some find they have wings and start to spread them. But this takes a few years. In the beginning even\nthey don't know yet what they're capable of. [5] In fact, change what you're doing. You're investing your own time in your startup. If you're not convinced that\nwhat you're working on is a sufficiently good bet, why are you even working on that? [6] When investors ask you a question you don't know the answer to, the best response is neither to bluff nor give up,\nbut instead to explain how you'd figure out the answer. If you can work out a preliminary answer on the spot, so much\nthe better, but explain that's what you're doing. [7] At YC we try to ensure startups are ready to raise money on Demo Day by encouraging them to ignore investors and\ninstead focus on their companies till about a week before. That way most reach the stage where they're sufficiently\nconvincing well before Demo Day. But not all do, so we also give any startup that wants to the option of deferring to a\nlater Demo Day. [8] Founders are often surprised by how much harder it is to raise the next round. There is a qualitative difference\nin investors' attitudes. It's like the difference between being judged as a kid and as an adult. The next time you raise\nmoney, it's not enough to be promising. You have to be delivering results. So although it works well to show growth graphs at either stage, investors treat them differently.",
                "**Notes** (Part 1)",
            ],
            [
                "At three months, a\ngrowth graph is mostly evidence that the founders are effective. At two years, it has to be evidence of a promising\nmarket and a company tuned to exploit it. [9] By this I mean that if the present day equivalent of the 3 month old Microsoft presented at a Demo Day, there\nwould be investors who turned them down. Microsoft itself didn't raise outside money, and indeed the venture business\nbarely existed when they got started in 1975. [10] The best investors rarely care who else is investing, but mediocre investors almost all do. So you can use this\nquestion as a test of investor quality. [11] To use this technique, you'll have to find out why investors who rejected you did so, or at least what they claim\nwas the reason. That may require asking, because investors don't always volunteer a lot of detail. Make it clear when\nyou ask that you're not trying to dispute their decision   just that if there is some weakness in your plans, you need\nto know about it. You won't always get a real reason out of them, but you should at least try. [12] Dropbox wasn't rejected by all the East Coast VCs. There was one firm that wanted to invest but tried to lowball\nthem. [13] Alfred Lin points out that it's doubly important for the explanation of a startup to be clear and concise,\nbecause it has to convince at one remove: it has to work not just on the partner you talk to, but when that partner\nre-tells it to colleagues. We consciously optimize for this at YC. When we work with founders create a Demo Day pitch, the last step is to imagine\nhow an investor would sell it to colleagues. Thanks to Marc Andreessen, Sam Altman, Patrick Collison, Ron Conway, Chris Dixon, Alfred Lin, Ben Horowitz, Steve\nHuffman, Jessica Livingston, Greg Mcadoo, Andrew Mason, Geoff Ralston, Yuri Sagalov, Emmett Shear, Rajat Suri, Garry\nTan, Albert Wenger, Fred Wilson, and Qasar Younis for reading drafts of this.",
                "**Notes** (Part 2)",
            ],
        ],
        "description": "You need three things: formidable founders, a promising market, and some evidence of success so far.",
        "title": "How to convince investors",
        "transcript": None,
        "url": "https://www.ycombinator.com/library/98-how-to-convince-investors",
    },
    {
        "content": [
            [
                "Snapdocs is the leading digital closing platform for the mortgage industry. Today, the\ncompany touches 25% of all US real estate transactions and is valued at $1.5B. Founder and CEO Aaron\nKing and his team have expertly navigated fundraising and market cycles. We sat down with\nAaron to hear his insight into getting a business up and running with minimal outside funding and building through\nvolatile market conditions. Why did you decide to raise minimal funding early in the company’s history? I never considered funding to be a requirement for building   but I also didn't know much about fundraising early on in\nthe company’s history. Snapdocs was started as a side project a couple of years before ever thinking about applying to\nYC. By the time I applied, we had a live product, customers, and revenue. Even after YC, we didn’t raise much\nimmediately. We stayed focused on building and then raised a seed round later in the year. It wasn’t until three years later that we raised our Series A. By then, we had spent about $1MM of our seed round and\nwere at a $5MM revenue run rate. Around that time we started working with much larger customers, and it was clear we\nwould need more capital to be successful in this bigger market. So, we raised our Series A. After we closed the round,\nour lead investor revealed how capital efficient we had been compared to our peers. Do you feel you had to ruthlessly prioritize when building the product because you didn't have the capital? Yes, and I’ve learned that you should take the same approach even when you do have the capital to be less disciplined.\nBack then, ruthless prioritization was our only option. We couldn’t afford to build features that weren’t essential.\nThere were always a hundred distractions that would result in a broader, less focused product. But our capital\nconstraints kept us focused on going deep with our paying customers. That helped us avoid the common trap of building\nproducts no one wanted. It also meant that when we decided to build a product, we had to think about the smallest version of that product in\norder to quickly ship. That helped ensure we had a short feedback loop from our users and ensure our resources were\ncontinuously being invested in building the right features. Looking back, I’m amazed at how much we were able to\naccomplish without spending much capital. Being capital constrained forced good behaviors that served us well even after we raised more funding. We continue to be\nthoughtful about every dollar we spend. But, there is a cost to this approach, and we’re paying for it today. We built\nmany things that weren't engineered for scale or flexibility. However, now we can afford to reengineer those unscalable\nsolutions because we built something people want. What did your product cycles look like before you raised your Series A? We were always heavy on customer involvement when building product.",
                "Introduction (Part 1)",
            ],
            [
                "We spent a lot of time in our customers’ offices\nwatching them use what we were building and understanding their work. We also kept a lot of our prospects in the loop as\nwe built new features. Some of the best feedback came from people who had chosen to not yet work with us. Responding to\nthat feedback with a killer feature was a great way to ultimately get them on board. We built a lot of trust and rapport with these early customers, and the in-person interactions helped immensely. As a\nresult, they would call one of us the moment they thought there was a problem or if they thought a competitor was doing\nsomething compelling. Customer churn for Snapdocs has always been incredibly low as a result. We created a disciplined product release process, even in those early days, but we were still able to move quickly. We\nshipped code every day, sometimes multiple times a day. Customers were impressed by how quickly we could respond to\nissues and feedback. Interestingly, not having too much pressure from investors early on allowed us to experiment more in an underappreciated\npart of our market. The Serviceable Available Market (SAM) of our initial product was roughly only $20MM, but we\nbelieved it would allow us to expand into more critical parts of the mortgage ecosystem. It was the type of opportunity\nthat would be hard to discover through market analysis or spreadsheet exercises. You had to get deep into the problem\nset to see the opportunity and develop the right strategy   and that ultimately worked to our advantage. Founders need capital to hire employees. As a bootstrapped company, what was your strategy around hiring? Hiring was hard, but we did a few things that worked well. Even before the company could afford full-time employees, I\nworked with talented contractors. I also leaned on friends to help me work through both technical and business\nchallenges. Someone would come over and whiteboard with me or we’d get into the code and work through a problem. When I could afford to hire full-time employees, I treated them like founding team members. I was generous with equity\nand shared everything about the potential and challenges of the business. We built a lot of trust as a small team.\nGetting a few really good people into the company early on was foundational to the company’s success. The first person to join full time was an engineer I had worked with in a previous role (and one of the friends that\nwould help in those early days). The second and third hires were applicants from job postings on Hacker News. All three\nturned out to be excellent. None of us initially had large networks in the startup world, so most of our early hiring\ninvolved lots of interviews and hiring a few of the wrong people. We couldn’t attract well-known talent and took risks;\ninvested in people we thought had a lot of potential. One mistake I made in the early years was being too timid to approach more of the people I respected.",
                "Introduction (Part 2)",
            ],
            [
                "I should have\ntried to convince them to quit their successful jobs and join our small (yet risky at the time) startup. I’m fearless on\nthis approach now, but back then I was intimidated to try to convince a friend to join a company that might fail. In\nhindsight I did them a disservice by not trying to recruit them. The truth is that these people are smart and you’re not\nharming anyone by sharing your vision and the potential of the company with them. As long as you’re honest and\ntransparent about the inherent challenges, you should give them the opportunity to take a risk on you. As Snapdocs grew, it became easier to pull from the team’s networks. We continued to build a lot of trust within the\nteam, and they started referring their friends to apply. Eventually we attracted well-known investors, and that, along\nwith our culture and growth, made hiring easier. Because we were capital constrained, we also didn’t hire anyone until there was a clear and painful need. It made\nrunning the company harder because we were all spread thin, but ultimately made us incredibly productive, as it meant we\nwere always working on the most important things. How have you navigated different market conditions? When do you decide to react? A big part of our success has come from selectively ignoring some market changes, while reacting quickly to others. It\nhas always been a question of how the change aligns with our resources, vision, and north star metric of market share\ngrowth. For example, the biggest and most dynamic change we regularly experience are fluctuations in the number of mortgages\nthat happen in a given month or year.This can change quickly based on a host of economic factors. When we are\nwell-resourced and growing fast, we can ignore some of those market downturns and stay focused on market share growth  \nknowing we have the momentum and capital to power through it. Other times we’ve had to scale up or scale back based on\nthe size of the fluctuation. But other market dynamics can change quickly too, like the industry’s appetite for new technologies and the competitive\nlandscape. There have been times when the market was demanding a technology but we believed there were underlying\nfactors in the industry that would prevent that tech from scaling. If we built the technology, it would pull resources\naway from our priorities that drove us towards our long-term goals. And so, sometimes to the protests of our sales team,\nwe ignored it or invested minimally in these trendy areas. By doing so, we were able to stay focused on the things that\nwere truly going to transform the industry. It’s also worth noting that navigating change was relatively easy in the first few years of building the company. It was\na lot easier to adjust course on company direction or strategy when the team was smaller and could all fit in the same\nroom. The product cycles were relatively short and malleable. The cost of making a change was low.",
                "Introduction (Part 3)",
            ],
            [
                "As the company has grown, we’ve had to be a lot more thoughtful and methodical about changing the speed or direction of\nthe business as we react to market changes. The cost of making a change has increased a lot. Investments take longer to\nplay out. Changes to headcount take longer to scale up or down. There are more people on the team and more layers in the\norganization to communicate the change through. In March 2020, Snapdocs made a huge shift because of changes you were seeing in the housing market. How did you\ncommunicate this shift to your team and ensure their goals were aligned with the new priorities? COVID accelerated demand for our product, but with that came a shift in what our customers wanted from a platform like\nours. We had to expand quickly to serve their needs, and we had to pivot our roadmap on a dime. It’s a testament to the\nteam that we were able to pull that off. To make decisions quickly and then communicate them, we worked in concentric circles. We started by discussing the\nchange in a smaller group of 3-4 people. This is where the hardest and messiest conversations took place. We moved\nquickly to define the problems and opportunities and set a direction for the company. We then looped in the senior\nleadership team for further discussion and to arm them with everything they needed to share the directional changes with\ntheir teams. Finally, we held a company-wide meeting to share the new direction and answer questions. All of this\nhappened over the course of about 2 weeks. Now, our business required more speed and flexibility as information was coming in and changing week on week. We dealt\nwith this by  temporary pods of 4-5 team members focused on solving specific challenges that would spin up for a few\nweeks and then dissolve once the challenge was addressed. We also increased the frequency of our company wide all-hand\nmeetings from monthly to weekly so we could keep the whole company up to speed. Luckily we had a deep culture of transparency that goes back to the beginning of the company. We’ve always tried to\nshare everything with our entire team   our cash balance, monthly growth rate, burn, our biggest challenges. This got\nharder as the team grew, but we’ve largely continued this transparency to today. It’s much easier to be transparent in\ntimes of great change if you've laid a foundation of trust and transparency in the past. We also worked hard to be intellectually honest about the growth we were experiencing. It’s easy to take credit when the\nbusiness accelerates, but our message to the team wasn't, “Look at how great we're doing.” The message was closer to,\n“This industry works in cycles. We're in an up cycle now and that's great. There's going to be a down cycle. We don't\nknow when or how strong it's going to be. But we should not overly congratulate ourselves for the current situation,\njust as we shouldn’t be too hard on ourselves when we’re fighting through an inevitable downturn in the future.",
                "Introduction (Part 4)",
            ],
            [
                "” In 2021, Snapdocs announced a Series D\nround. How did this change your mentality around resources? It was clear that the pandemic would be an accelerator for our business, and we needed to move fast to stay ahead of the\nmarket. We went from being frugal to raising larger rounds of capital and hiring seasoned executives who could help us\nscale. It’s important for companies to evolve at the right points in time and ask themselves, “Is what I did yesterday\nthe thing that's going to get me to where I need to be tomorrow?”. We asked that question and decided we needed to\nchange parts of our culture and capital investment strategy if we wanted to win. When we raised capital in 2021, transactions on Snapdocs had steadily increased to millions of closings a year and\nthousands of lenders and title companies were using our technology every month. Demand for mortgages throughout the\npandemic was strong, and we deployed an intentional strategy of prioritizing effectiveness over efficiency. We needed to\nget aggressive and expand our market position, which required capital. The market turned again later in the year, with demand for mortgages cooling. It was clear that it was time to go back\nto some of our old ways of doing things. We ditched the motto of being effective over being efficient. This meant a\nreturn to ruthless prioritization of our focus. We shifted away from investing so heavily in future scale as we wouldn’t\nneed to tap into these systems for a few years. I find it helpful to remember that market fluctuations are normal and unavoidable. Startups should scale up at times and\nscale back at others. It’s hard and painful. There’s nothing easy or enjoyable about being understaffed to meet customer\ndemand on one side, or needing to let team members go on the other. But these ups and downs are natural and a necessary\npart of building an enduring company. In a startup, you’re always making hard decisions based on insufficient\ninformation. You’re never going to be able to perfectly predict the future. You need to keep making the best decisions\nyou can   knowing all the while that you may be wrong and need to change course again once the future becomes clearer.",
                "Introduction (Part 5)",
            ],
        ],
        "description": "Founder & CEO Aaron King expertly built Snapdocs (YC W14) through volatile market conditions and with minimal outside funding into the mortgage industry's leading digital closing platform, valued at $1.5B. This is what he learned about navigating market cycles.",
        "title": "Snapdocs' Aaron King on navigating market cycles",
        "transcript": None,
        "url": "https://www.ycombinator.com/library/Gu-snapdocs-aaron-king-on-navigating-market-cycles",
    },
    {
        "content": [
            [
                "YC's library of startup advice: essays, podcasts, and videos created over the past 15 years. Here is a link to the library: https://www.ycombinator.com/library If you would like to submit an article to the library, please fill out this form: (redacted) and someone will get back to you when the link goes live. Instructions for adding to the library manually: (redacted)",
                None,
            ]
        ],
        "description": None,
        "title": "YC Startup Library",
        "transcript": None,
        "url": "https://www.ycombinator.com/library/2q-yc-startup-library",
    },
    {
        "content": [
            [
                "A couple years ago, Athelas (YC S16) started as a proof-of-concept project built overnight at YC Hacks 2014 . This month we started shipping our first devices\nto patients and hospitals around the country. We learned a lot in the process and wanted to share a few thoughts here. The device is a low-cost imager that enables rapid blood diagnostics through computer vision instead of traditional\nlab-based techniques. Going from a hacked together hardware prototype to shippable product (especially in the medical\nfield) was a progression in dimensionality at every stage, and it’s quite interesting now to look back at day 1.",
                None,
            ],
            [
                "The first version that began at the hackathon used a rubber piece and spherical magnifier attached to a smartphone\ncamera. A blood sample would be held (by a toilet paper roll) underneath, the camera would take a couple images, then\nproduce the computer vision rendered malaria cell counts. In design this is quite similar to a van Leeuwenhoek\nmicroscope (considered one of the earliest microscopes ever\nbuilt) which was used to see microorganisms for the first time in human history. There were a few examples of this\nsetup, and I spent the first couple hours of the hackathon getting it to work consistently on my phone. Above: A few excerpts from a writeup I did on Athelas a few months after the hackathon. The real focus of the hack was writing segmentation and template matching approaches, combined with a fast random forest\nmodel implementation that learned to classify extracted versions of the Red Blood Cells (RBCs). Cell boundaries would be\nrecognized, then fed into the classier to identify whether a parasitical cell (like Malaria or Trypanosoma) was present. This made for a fun demo, where a sample slide would have malaria tagged in it, but a normal person’s blood would not.\nWhile functioning and a neat trick, someone needed to be physically holding the camera in place, the slide had to be\nmoved around, with the lighting often being hard to fix. At the end of the day it was a nice experimental toy you might\nsee someone post as a video on Facebook. But we were sure it could be more. The core idea was - if we made it broad-ranging and easy enough for anyone to use -\nwhy not have a simple blood screen in every doctor’s office, nursing facility, or even home? After heading back to\nschool, this idea consumed us and we decided to continue it - but as a product - not just a demo. That meant creating an\nautomated blood processing mechanism to generate a stained peripheral smear, a more robust computer vision approach for\ndifferent cell types, automated mechanisms to image the whole sample without holding the slide in place, and most\nimportantly - clinical validation. Deepika (my cofounder) worked to perfect the fast staining mechanism and come up with a way to coat them on plastic\nstrips that could be ready to use out of the box. She worked mostly in-lab, synthesizing dozens of versions of the stain\ncompound, and observing empirically the quality of cell rendering. The other side of this problem was ensuring that the\nstrip could easily be compressed to create a ‘monolayer’, or single layer of cells that enables statistically\nrepresentative imaging. Above: An excerpt from “The marching velocity of the capillary meniscus in a microchannel”, a sample of work we\nreferenced when attempting to model the flow in our channel to generate a monolayer. This capillary design was\neventually shelved for a future iteration.",
                None,
            ],
            [
                "In the meantime, I focused on building a higher resolution optical set up in a still cheap, but stand-alone device. As\nsuch, we could focus on monitoring more prevalent cell-types like Leukocytes and Platelets (beyond just malaria). The\nheart of it was an actuation system, coupled with gaussian edge autofocusing algorithms to ensure that our cells were\nbeing captured in a consistent fashion. Here’s a prototype midway through: Furthermore, we started assembling a training set of data from public CDC images, blood smears collected from\nresearchers at Stanford and UCSF - often hand labeled by me or a pathologist. From there, we were able to employ\ntraditional computer vision and deep learning approaches to recognize and classify cell types based on previous,\nhuman-guided examples. Cell body extraction post hough transform, first pass, pre-segmentation and classification The first set of progress was slow. College workload at Stanford + rising costs of our hardware iterations often made it\ndifficult for us to operate with the iteration speeds a normal product needs. Finals often meant days going by without\nany tangible progress whatsoever. But we put together a tangible, usable v1, that could grab images of a stained blood\nsample, and process. See the demo here . Then this summer, things came full circle to that orange building in Mountain View, as we joined the summer batch at Y\nCombinator. Our time (now full time on the project) was focused on our clinical validation locally and at the FEMAP\nfamily hospital, to run a first set of usages within a hospital system. The goal was proving the system on just one\naspect first: White Blood Cell counts. By grabbing images of samples on our strip, and then running the algorithms we\nshowed how our counts were correlating with high accuracy to the gold standard Beckman Counter across 350 patients,\ncombined with a set of bench precision studies . An interesting aspect was showing how our drop to drop precision (something of much recent\ninterest) was clinically acceptable versus other systems operating on drops.\nCoulter counters (traditional cell counting systems) work by flowing particles through a jeweled aperture a few microns\nin diameter, and recording impedance to register particle size - and as a result, particle classification. At the crux\nof it, higher impedance = larger particle size . Coulter Counting Principle diagram source: cyto.purdue.edu Athelas’s computer vision approach, however, focuses wholly on the image and nucleation patterns. As such, the\nparticulate matter or lymph that can often confuse a Coulter system (especially in diluted quantities), is simply\nclassified by the vision as a non-leukocyte cellular body (not a white blood cell, but some other, un-classified\nartifact in the blood sample).",
                None,
            ],
            [
                "The trial showed high inter-rater agreement (100% 5-class inter rater agreement) between the two systems, we submitted\nour data off to the FDA for Class 2 510k approval, and are now distributing our Class 1 version of the system for rapid\nWhite Blood Cell monitoring. See more at athelas.com .",
                None,
            ],
            [
                "As we integrate new blood tests into the system over the coming months (concussion monitoring, inflammation tracking,\nurinary tract infection, platelets, more cell counts), our key growing challenge will be working with the existing\nclinical and medical community to help guide adoption and usage. These coming months will focus on getting our $250\ndevices into as many point-of-care locations, homes, and clinical settings as possible. We’re always looking for awesome people to meet and hackers to join our growing team, so shoot me an email if you want\nto chat about anything: tanay [at] getathelas.com",
                None,
            ],
        ],
        "description": "Athelas (YC S16) makes low cost devices that enable rapid blood diagnostics. Here's the story of how Athelas began as a small hardware prototype at a YC Hackathon and grew into a real shippable product.",
        "title": "On starting a company from a hackathon project",
        "transcript": None,
        "url": "https://www.ycombinator.com/library/4x-on-starting-a-company-from-a-hackathon-project",
        "youtube_id": None,
    },
]
